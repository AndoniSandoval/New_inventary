OBJECT Codeunit 50009 WS Movs. Almacen
{
  OBJECT-PROPERTIES
  {
    Date=06/10/25;
    Time=05:22:58 p. m.;
    Modified=Yes;
    Version List=Mtt01.00 RTC,HH-1.00;
  }
  PROPERTIES
  {
    Permissions=TableData 50011=rimd,
                TableData 50060=rimd,
                TableData 50061=rimd,
                TableData 50062=rimd,
                TableData 50063=rimd,
                TableData 50064=rimd;
    OnRun=VAR
            "70900"@1102401001 : Record 50023;
            DiaT@1102401002 : Date;
            HoraT@1102401003 : Time;
            "1"@1102401004 : Text[1024];
            "2"@1102401005 : Text[1024];
            messg@1102401006 : Code[100];
            BufferTableLabel@1102401007 : Record 50060;
          BEGIN

            ReadBarCode('2829161|OPL-174530|6ADNLS00982V|424|06J25220L174530001','EMBARQUES',Rt1,Tt2,Rt3,Rt4,Rt5,Rt6,Rt7);
            MESSAGE(Rt1,Tt2,Rt3,Rt4);

            //DiarioConsignacion('2HECLS088NEG','100','HAM L PL7','28H152SECAL','384','aa','271714');
            //99000773
            //DiarioSalida2('OPL-021881','2WCMUS005NEG','25','09E162SECAU','378176','01');

            //DiarioConsumo('OPL-017660','0KMAB0SC0002NEG','1','*2018263','324005','');
            //ValidExistOP('OPL-102536',Rt7);
            //MESSAGE(Rt7);
            //ValidExistOP('OPL-083411',Rt7);
            //MESSAGE(Rt7);


            //PreInventario('2VWCRE05882V','54','26L181NER100','1233252','rack10','GDC');
            //ConsultLabelPreInventary('208896');
            //DiarioReclass('2VWCLS03782V','080','gen','22I153SECAL','396','aa','280610','rack15');
            //DiarioCuarentena('2VWCUS308NEG','23A19104U085005015','1000','','1259074');

            //BlockedLotNo('OPL-0000014','2HEBLS099NEG','28K18117L0000014004','128','73',FALSE);

            //R :=GetProdOrder;


            //GetLastLabelLedgerEntry('33',Rt1,Tt2,Rt3);


            //DiarioRechazos('OPL-084538','1','AG-descrio');

            //UpdateStatusLabel060;
            //MESSAGE('fin');

            //RInt :=ConsultUser();
            //MESSAGE(FORMAT(RInt));

            //ValidatQtyCons('OPL-107973','0BAAC1TD200892V',1654908,'*ZA12A0202',QtyLM_,QtyLabel_,QtyNAV_);
            //MESSAGE(FORMAT(QtyLM_));
          END;

  }
  CODE
  {
    VAR
      t120@1102401001 : Record 120;
      Text000@1102401003 : TextConst 'ESM=CORRECTO';
      Text001@1102401002 : TextConst 'ESM=INCORRECTO';
      Text002@1102401005 : TextConst 'ESM=REGISTRO CORRECTO';
      Text003@1102401004 : TextConst 'ESM=ERROR A REGISTRAR';
      ManufacturingSetup@1102401006 : Record 99000765;
      ItmJornlBatch@1102401008 : Record 233;
      ItemJnlPostBatch@1102401007 : Codeunit 23;
      Rt1@1102401009 : Code[50];
      Tt2@1102401010 : Code[50];
      Rt3@1102401011 : Code[50];
      Rt4@1102401012 : Code[50];
      Rt5@1102401013 : Code[50];
      Rt6@1102401014 : Code[50];
      Rt7@1102401017 : Code[50];
      CustomerNo@1102401015 : Code[30];
      TextCust@1102401016 : Code[50];
      TxtGen@1102401018 : TextConst 'ESM=GENERICA';
      LabelMtg@1102401020 : Codeunit 50015;
      Date_@1102401019 : Date;
      UserSetup@1102401021 : Record 91;
      ItemJnlPost@1102401022 : Codeunit 241;
      LabelLedgEntry@1102401023 : Integer;
      LabelLedgerEntry@1102401024 : Record 50011;
      TurnCode@1102401025 : Code[30];
      SalesSetup@1102401026 : Record 311;
      Windows@1102401027 : Dialog;
      TextProcess@1102401028 : TextConst 'ESM=Procesando';
      InvScan@1102401029 : Record 50066;
      F@1102401030 : Text;
      StartD@1102401031 : Date;
      RStr@1102401032 : Text;
      RInt@1102401033 : Integer;
      IdExt@1102401034 : Text[20];
      IndexExt@1102401035 : Integer;
      OkCust@1102401036 : Boolean;
      LibroInvFis@1102401037 : Code[30];
      SeccionInvFis@1102401038 : Code[30];
      QtyLM_@1102401039 : Decimal;
      QtyNAV_@1102401040 : Decimal;
      QtyLabel_@1102401041 : Decimal;

    PROCEDURE ReadBarCode@1102401003(TextBarcode@1102401001 : Text[1024];TypeTransation@1102401008 : Code[30];VAR RtrnOP@1102401004 : Code[30];VAR RtrnItemNo@1102401005 : Code[30];VAR RtrnQty@1102401006 : Code[20];VAR RtrnLoteNo@1102401007 : Code[30];VAR RtnCustNo@1102401009 : Code[30];VAR RtrnEntryNoLabl@1102401010 : Code[10];VAR RtnMessage@1102401028 : Code[50]) : Boolean;
    VAR
      Customer@1102401002 : Record 18;
      a@1102401012 : Code[10];
      TmpTablecord@1102401021 : Record 50060;
      LineNo@1102401022 : Integer;
      BufferTablecord@1102401023 : Record 50060;
      BufferTablecord2@1102401038 : Record 50060;
      EdiText@1102401024 : ARRAY [25] OF Text[100];
      BufferTableR@1102401025 : Record 50060;
      VSupplier@1102401003 : Code[30];
      Index@1102401011 : Integer;
      BufferTableLabel@1102401013 : Record 50060;
      Delim_V@1102401014 : Code[3];
      Delim_1T@1102401018 : Code[4];
      Delim_OPL@1102401019 : Code[3];
      Delim_P@1102401035 : Code[2];
      Delim_M@1102401039 : Code[2];
      Delim_GDC@1102401041 : Code[5];
      Delim_1DP@1102401044 : Code[3];
      Delim_S@1102401049 : Code[2];
      Text1@1102401015 : Code[100];
      TextSupplier@1102401017 : Code[50];
      TxtOP@1102401020 : Code[30];
      Txt_P@1102401037 : Code[30];
      Txt_M@1102401040 : Code[30];
      Txt_GDC@1102401042 : Code[30];
      Txt_1DP@1102401045 : Code[30];
      Txt_Item@1102401046 : Code[30];
      Txt_S@1102401048 : Code[30];
      LabelLedgerEntry@1102401026 : Record 50011;
      ItemCrossRef@1102401027 : Record 5717;
      NoSerieHellaVW@1102401029 : Code[10];
      LongTxt@1102401016 : Integer;
      LongField1@1102401036 : Integer;
      LongField3@1102401043 : Integer;
      LongField5@1102401030 : Integer;
      LongField8@1102401031 : Integer;
      LongField6@1102401032 : Integer;
      LongField13@1102401033 : Integer;
      SerieVW@1102401034 : Integer;
      Item@1102401047 : Record 27;
      LablLedEntry2@1102401050 : Record 50011;
      LabelLedgerEntry5@1102401051 : Record 50011;
      NewBarCode@1102401059 : Code[1024];
      LongBarCode@1102401058 : Integer;
      IndexPosHella@1102401057 : Integer;
      IndexPosVW@1102401056 : Integer;
      IndexPosGM@1102401065 : Integer;
      IndexPosGM2@1102401068 : Integer;
      IdHella@1102401055 : Code[10];
      IdVW@1102401054 : Code[10];
      IdGM@1102401066 : Code[10];
      IdGM2@1102401067 : Code[10];
      StrHella@1102401053 : Code[10];
      strVW@1102401052 : Code[10];
      strGM@1102401064 : Code[10];
      strGM2@1102401069 : Code[10];
      strLotNo@1102401060 : Text[30];
      Pos1@1102401061 : Integer;
      Pos2@1102401062 : Integer;
      Pos3@1102401063 : Integer;
      Item3@1102401070 : Code[1];
      ContPacking@1102401071 : Integer;
      Cust@1102401072 : Record 18;
      ItemCrossReference@1102401073 : Record 5717;
      IndexPosRecep@1102401074 : Integer;
      QtyLabel@1102401075 : Decimal;
      QtyPerPacking@1102401076 : Decimal;
      LabelType@1102401077 : Option;
      DocNo@1102401078 : Code[30];
      ItemNo@1102401079 : Code[30];
      LotNo@1102401080 : Code[50];
      LabelNo@1102401081 : Integer;
      LotNoStrNew@1102401082 : Text[100];
      LenghtTotal@1102401083 : Integer;
      Pos4@1102401084 : Integer;
    BEGIN
      TextBarcode := DELCHR(TextBarcode,'=',' ');

      RtrnOP      :='';
      RtrnItemNo  :='';
      RtrnQty     :='';
      RtrnLoteNo  :='';
      IndexPosGM    :=0;
      IndexPosGM2   :=0;
      IndexPosHella :=0;
      IndexPosVW    :=0;

      IdHella := '1JUN';
      IdVW    := '2LVW';
      IdGM    := '20L';
      IdGM2   := '21L';

      IndexPosHella :=STRPOS(TextBarcode,IdHella);
      IndexPosVW    :=STRPOS(TextBarcode,IdVW);
      IndexPosGM    :=STRPOS(TextBarcode,IdGM);
      IndexPosGM2   :=STRPOS(TextBarcode,IdGM2);

      //>>descarta GM
      IF (IndexPosGM > 0) AND( ((STRLEN(TextBarcode)) < 70)) THEN
        IndexPosGM:=0;

      IF (IndexPosGM2 > 0) AND( ((STRLEN(TextBarcode)) < 70)) THEN
        IndexPosGM2:=0;

      TmpTablecord.RESET;
      IF TmpTablecord.FINDLAST THEN
        LineNo:=TmpTablecord."Entry No"+1
      ELSE
        LineNo:=1;

      IF ((IndexPosHella = 0) AND (IndexPosVW = 0) AND (IndexPosGM=0) AND (IndexPosGM2=0)) THEN
        GetValueField(TextBarcode,EdiText);

      BufferTablecord.INIT;
      BufferTablecord."Entry No"          := LineNo;
      BufferTablecord.text                := COPYSTR(TextBarcode,1,250);
      BufferTablecord."Type Transation"   := TypeTransation;
      BufferTablecord."Posting Date Time" := CREATEDATETIME(TODAY,TIME);
      BufferTablecord."User ID"           := USERID;
      BufferTablecord.INSERT(TRUE);
      COMMIT;

      //>>Hella
      IF ((IndexPosHella <> 0) AND (IndexPosGM=0) )  THEN BEGIN
        Pos1 := STRPOS(TextBarcode,IdHella);
        StrHella := COPYSTR(TextBarcode,Pos1+13,9);

        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETFILTER("Cod Serie Hella"      ,'=%1',StrHella);
        LabelLedgerEntry.SETFILTER("Label Production Type",'=%1',LabelLedgerEntry."Label Production Type"::Hella);
        LabelLedgerEntry.FINDSET;

        OkCust:=FALSE;
        ItemCrossRef.RESET;
        ItemCrossRef.SETRANGE("Item No.",LabelLedgerEntry."Source No.");
        IF ItemCrossRef.FINDSET THEN BEGIN
          REPEAT
            IF NOT OkCust THEN BEGIN
              Customer.RESET;
              Customer.SETRANGE(Blocked,Customer.Blocked::" ");
              Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
              IF Customer.FINDSET THEN
                OkCust:=TRUE;
            END;
          UNTIL ItemCrossRef.NEXT=0;
        END;

        BufferTablecord.VALIDATE(Customer                 ,Customer."No.");
        BufferTablecord.VALIDATE("Type Label"             ,FORMAT(Customer."Label Production Type"));
        BufferTablecord.VALIDATE("Printed Entry No. Label",LabelLedgerEntry."Entry No.");
        BufferTablecord.VALIDATE("Status Label"           ,LabelLedgerEntry."Label Status");
        BufferTablecord.MODIFY(TRUE);
      END;

      //>>VW
      IF (IndexPosVW <> 0) THEN BEGIN
        {
        CLEAR(LotNoStrNew);
        CLEAR(LenghtTotal);
        CLEAR(Pos4);
        LenghtTotal := STRLEN(TextBarcode);
        LotNoStrNew := COPYSTR(TextBarcode,Pos2,LenghtTotal-Pos2);

        Pos4 := STRPOS(LotNoStrNew,'_');


        strVW     :=COPYSTR(TextBarcode,Pos1+2,9);
        strLotNo  :=COPYSTR(LotNoStrNew,3,Pos4-3);
        EVALUATE(SerieVW,strVW);
      }
        CLEAR(LenghtTotal);
        LenghtTotal := STRLEN(TextBarcode);

        Pos1      :=STRPOS(TextBarcode,'1J');
        Pos2      :=STRPOS(TextBarcode,'1T');
        strVW     :=COPYSTR(TextBarcode,Pos1+2,9);
        //strLotNo  :=COPYSTR(TextBarcode,Pos2+2,12);
        strLotNo  :=COPYSTR(TextBarcode,Pos2+2,20);


        EVALUATE(SerieVW,strVW);

        Customer.RESET;
        Customer.SETRANGE(Blocked,Customer.Blocked::" ");
        Customer.SETRANGE("Our Account No.",'6001002266');
        Customer.FINDSET;

        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETFILTER("Serie VW"             ,'=%1',SerieVW);
        LabelLedgerEntry.SETFILTER("Label Production Type",'=%1',LabelLedgerEntry."Label Production Type"::VW);
        //>261218
        LabelLedgerEntry.SETFILTER("Lot. No"              ,'=%1',strLotNo);
        LabelLedgerEntry.FINDSET;


        BufferTablecord.VALIDATE(Customer                 ,Customer."No.");
        BufferTablecord.VALIDATE("Type Label"             ,FORMAT(Customer."Label Production Type"));
        BufferTablecord.VALIDATE("Printed Entry No. Label",LabelLedgerEntry."Entry No.");
        BufferTablecord.VALIDATE("Status Label"           ,LabelLedgerEntry."Label Status");
        BufferTablecord.MODIFY(TRUE);
      END;

      //>> General Motors
      IF (IndexPosGM<>0) AND (IndexPosGM2<>0) THEN BEGIN
        Pos1      :=STRPOS(TextBarcode,'UN812527732');
        Pos2      :=STRPOS(TextBarcode,'P90');
        strGM     :=COPYSTR(TextBarcode,Pos1+11,9);
        strGM2    :=COPYSTR(TextBarcode,Pos2+1,8);
          LabelLedgerEntry.RESET;
          LabelLedgerEntry.SETRANGE("Label Production Type",LabelLedgerEntry."Label Production Type"::"General Motors");
          LabelLedgerEntry.SETRANGE("Label No",strGM);
          IF LabelLedgerEntry.FINDSET  THEN BEGIN
            OkCust:=FALSE;
            ItemCrossRef.RESET;
            ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
            ItemCrossRef.SETRANGE("Item No.",LabelLedgerEntry."Source No.");
            ItemCrossRef.SETRANGE("Cross-Reference No."   ,strGM2);
            IF ItemCrossRef.FINDSET THEN BEGIN
            REPEAT
              IF NOT OkCust THEN BEGIN
                Customer.RESET;
                Customer.SETRANGE(Blocked,Customer.Blocked::" ");
                Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
                IF Customer.FINDSET THEN
                OkCust:=TRUE;
              END;
            UNTIL ItemCrossRef.NEXT=0;

            BufferTablecord.VALIDATE(Customer                   , Customer."No.");
            BufferTablecord.VALIDATE("Type Label"               , FORMAT(Customer."Label Production Type"));
            BufferTablecord.VALIDATE("Printed Entry No. Label"  , LabelLedgerEntry."Entry No.");
            BufferTablecord.VALIDATE("Status Label"             , LabelLedgerEntry."Label Status");
            BufferTablecord.MODIFY(TRUE);
          END;
        END;
      END;

      IF ((IndexPosHella = 0) AND (IndexPosVW = 0) AND (IndexPosGM=0) AND (IndexPosGM2=0)) THEN BEGIN
        BufferTablecord.EDIField1    :=DeleteDelim(EdiText[1]);
        BufferTablecord.EDIField2    :=DeleteDelim(EdiText[2]);
        BufferTablecord.EDIField3    :=DeleteDelim(EdiText[3]);
        BufferTablecord.EDIField4    :=DeleteDelim(EdiText[4]);
        BufferTablecord.EDIField5    :=DeleteDelim(EdiText[5]);
        BufferTablecord.EDIField6    :=DeleteDelim(EdiText[6]);
        BufferTablecord.EDIField7    :=DeleteDelim(EdiText[7]);
        BufferTablecord.EDIField8    :=DeleteDelim(EdiText[8]);
        BufferTablecord.EDIField9    :=DeleteDelim(EdiText[9]);
        BufferTablecord.EDIField10   :=DeleteDelim(EdiText[10]);
        BufferTablecord.EDIField11   :=DeleteDelim(EdiText[11]);
        BufferTablecord.EDIField12   :=DeleteDelim(EdiText[12]);
        BufferTablecord.EDIField13   :=DeleteDelim(EdiText[13]);
        BufferTablecord.EDIField14   :=DeleteDelim(EdiText[14]);
        BufferTablecord.EDIField15   :=DeleteDelim(EdiText[15]);
        BufferTablecord.EDIField16   :=DeleteDelim(EdiText[16]);
        BufferTablecord.EDIField17   :=DeleteDelim(EdiText[17]);
        BufferTablecord.EDIField18   :=DeleteDelim(EdiText[18]);
        BufferTablecord.EDIField19   :=DeleteDelim(EdiText[19]);
        BufferTablecord.EDIField20   :=DeleteDelim(EdiText[20]);
        BufferTablecord.EDIField21   :=DeleteDelim(EdiText[21]);
        BufferTablecord.EDIField22   :=DeleteDelim(EdiText[22]);
        BufferTablecord.EDIField23   :=DeleteDelim(EdiText[23]);
        BufferTablecord.EDIField24   :=DeleteDelim(EdiText[24]);
        BufferTablecord.EDIField25   :=DeleteDelim(EdiText[25]);
        BufferTablecord.MODIFY(TRUE);
        COMMIT;
      END;

      //>>Kautex
      Delim_S     := 'S';
      Txt_S       := COPYSTR(EdiText[1],1,1);
      LongField1  := STRLEN(EdiText[1]);
      IF (Delim_S = Txt_S) THEN BEGIN
        OkCust:=FALSE;
        ItemCrossRef.RESET;
        ItemCrossRef.SETRANGE("Item No."              ,COPYSTR(BufferTablecord.EDIField1,2,LongField1));
        ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
        IF ItemCrossRef.FINDSET THEN BEGIN
        REPEAT
          IF NOT OkCust THEN BEGIN
          Customer.RESET;
          Customer.SETRANGE(Blocked,Customer.Blocked::" ");
          Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
           IF Customer.FINDSET THEN
            OkCust:=TRUE;
          END;
        UNTIL ItemCrossRef.NEXT=0;

          BufferTablecord.VALIDATE(Customer    ,Customer."No.");
          BufferTablecord.VALIDATE("Type Label",FORMAT(Customer."Label Production Type"));
        END;
        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETRANGE("Label Production Type",LabelLedgerEntry."Label Production Type"::Kautex);
        LabelLedgerEntry.SETRANGE("Label Status",LabelLedgerEntry."Label Status"::Pendiente);
        LabelLedgerEntry.FINDLAST;
        BufferTablecord.VALIDATE("Printed Entry No. Label",LabelLedgerEntry."Entry No.");
        BufferTablecord.VALIDATE("Status Label"           ,LabelLedgerEntry."Label Status");
        BufferTablecord.MODIFY(TRUE);
      END;

      //>>Etiqueta Externa
      IdExt:='EXT';
      IndexExt :=0;
      IndexExt :=STRPOS(EdiText[1],IdExt);
      IF (IndexExt <> 0) THEN BEGIN

          EVALUATE(QtyLabel,EdiText[4]);
          EVALUATE(LabelNo,EdiText[5]);

          BufferTablecord."Type Label"              :=  'EXTERNA';
          BufferTablecord."Lot No"                  :=  COPYSTR(EdiText[1],4,STRLEN(EdiText[1])-3);
          BufferTablecord."Quantity Label"          :=  QtyLabel;
          QtyPerPacking   := QtyLabel;
          LotNo           := BufferTablecord."Lot No";
          ItemNo          := EdiText[3];

          OkCust:=FALSE;
          ItemCrossRef.RESET;
          ItemCrossRef.SETRANGE("Item No.",ItemNo);
          IF ItemCrossRef.FINDSET THEN BEGIN
          REPEAT
            IF NOT OkCust THEN BEGIN
              Customer.RESET;
              Customer.SETRANGE(Blocked,Customer.Blocked::" ");
              Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
              IF Customer.FINDSET THEN
                OkCust:=TRUE;
            END;
          UNTIL ItemCrossRef.NEXT=0;
        END;


      {
          IF ItemCrossRef.FINDSET THEN;

          Customer.RESET;
          Customer.SETRANGE(Blocked,Customer.Blocked::" ");
          Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
          IF Customer.FINDSET THEN;

          }


          BufferTablecord."Status Label" :=BufferTablecord."Status Label"::Almacen;
          BufferTablecord.VALIDATE(Customer    ,Customer."No.");
          BufferTablecord.VALIDATE("Printed Entry No. Label",
                                  LabelMtg.CreateReceiptLabelsFromVendrExt(LabelNo,1,QtyPerPacking,LabelType,DocNo,ItemNo,LotNo));
          BufferTablecord.MODIFY;

          LabelLedgerEntry.RESET;
          LabelLedgerEntry.GET(BufferTablecord."Printed Entry No. Label");
      END;

      //>>ETIQUETAS GENERICAS OP
      Delim_OPL :='OPL';
      LongTxt   :=0;
      Text1     :='';
      Text1     := EdiText[2];
      LongTxt   := STRLEN(Text1);
      TxtOP     := COPYSTR(Text1,1,3);
      IF (TxtOP = Delim_OPL) THEN BEGIN
        LabelLedgerEntry.RESET;
        LabelLedgerEntry.GET(BufferTablecord.EDIField1);

        OkCust:=FALSE;
        ItemCrossRef.RESET;
        ItemCrossRef.SETRANGE("Item No."              ,BufferTablecord.EDIField3);
        ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
        IF ItemCrossRef.FINDSET THEN BEGIN
          REPEAT
            Customer.RESET;
            Customer.SETRANGE(Blocked,Customer.Blocked::" ");
            Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
            IF Customer.FINDSET THEN
            OkCust:=TRUE;
          UNTIL ItemCrossRef.NEXT=0;

          BufferTablecord.VALIDATE(Customer    ,Customer."No.");
          BufferTablecord.VALIDATE("Type Label",FORMAT(Customer."Label Production Type"));
        END
        ELSE BEGIN
          BufferTablecord.VALIDATE("Type Label",FORMAT('GENERICA-PT'));
        END;
        BufferTablecord.VALIDATE("Printed Entry No. Label",LabelLedgerEntry."Entry No.");
        BufferTablecord.VALIDATE("Status Label"           ,LabelLedgerEntry."Label Status");
        BufferTablecord.MODIFY(TRUE);
      END;

      //>>Genericas Internas GDC
      IF (IndexExt = 0) THEN BEGIN
      Txt_Item:= EdiText[3];
      Item.RESET;
      IF Item.GET(Txt_Item) THEN BEGIN
        Item3 := COPYSTR(Item."No.",1,1);
        IF (Item3 <> '3') THEN BEGIN
          Delim_OPL :='OPL';
          Text1     := EdiText[2];
          LongTxt   := STRLEN(Text1);
          TxtOP     := COPYSTR(Text1,1,3);
          IF TxtOP <> Delim_OPL THEN BEGIN
            LabelLedgerEntry.RESET;
            LabelLedgerEntry.GET(BufferTablecord.EDIField1);
            IF LabelLedgerEntry."Label Type" <> LabelLedgerEntry."Label Type"::Produccion THEN BEGIN
              BufferTablecord.VALIDATE("Type Label"             , FORMAT(LabelLedgerEntry."Label Type"));
              BufferTablecord.VALIDATE("Printed Entry No. Label", LabelLedgerEntry."Entry No.");
              BufferTablecord.VALIDATE("Status Label"           , LabelLedgerEntry."Label Status");
              BufferTablecord.VALIDATE("Label GDC"              , TRUE);
              OkCust:=FALSE;
              ItemCrossRef.RESET;
              ItemCrossRef.SETRANGE("Item No."              ,BufferTablecord.EDIField3);
              ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
              IF ItemCrossRef.FINDSET THEN BEGIN
                REPEAT
                IF NOT OkCust THEN BEGIN
                Customer.RESET;
                Customer.SETRANGE(Blocked,Customer.Blocked::" ");
                Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
                IF Customer.FINDSET THEN
                  OkCust:=TRUE;
                END;
                UNTIL ItemCrossRef.NEXT=0;

                BufferTablecord.VALIDATE(Customer     , Customer."No.");
                BufferTablecord.VALIDATE("Type Label" , FORMAT(LabelLedgerEntry."Label Type"));
              END;
              BufferTablecord.MODIFY;
            END;
          END;
        END
        ELSE BEGIN
          //>>Empaques Complementarios
          Item.TESTFIELD("Customer No");
          IF ManufacturingSetup.GET('') THEN BEGIN
            ContPacking :=ManufacturingSetup."Entry No Empaque Compl"+1;
            ManufacturingSetup."Entry No Empaque Compl":=ContPacking;
            ManufacturingSetup.MODIFY;
          END;

          BufferTablecord.VALIDATE("Type Label"     , 'EMP-COMPL');
          BufferTablecord.VALIDATE(Customer         , Item."Customer No");
          BufferTablecord."Lot No"                  := FORMAT(TODAY,0,'<YEAR4><Month,2><day,2>');
          BufferTablecord."Quantity Label"          := 1;
          BufferTablecord."Document No."            := FORMAT(ContPacking);  //No Mov Empaque
          BufferTablecord.MODIFY;
        END;
      END;
      END;


      //>>Grupo Antolin
      Delim_M     := 'M';
      LongField1  := STRLEN(EdiText[1]);
      Txt_M       := COPYSTR(EdiText[1],1,1);
      IF (Txt_M = Delim_M ) THEN BEGIN
        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETRANGE("Label Production Type",LabelLedgerEntry."Label Production Type"::"Antolin Caja");
        LabelLedgerEntry.SETFILTER("Label Type",'=%1',LabelLedgerEntry."Label Type"::Produccion);
        LabelLedgerEntry.SETRANGE("Number Serie GA",(COPYSTR(EdiText[1],2,LongField1)));
        IF LabelLedgerEntry.FINDSET  THEN BEGIN
          OkCust:=FALSE;
          ItemCrossRef.RESET;
          ItemCrossRef.SETRANGE("Item No."              ,LabelLedgerEntry."Source No.");
          ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
          IF ItemCrossRef.FINDSET THEN BEGIN
            REPEAT
            IF NOT OkCust THEN BEGIN
              Customer.RESET;
              Customer.SETRANGE(Blocked,Customer.Blocked::" ");
              Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
               IF Customer.FINDSET THEN
                  OkCust:=TRUE;
             END;
            UNTIL ItemCrossRef.NEXT=0;
          END;
          BufferTablecord.VALIDATE(Customer                   , Customer."No.");
          BufferTablecord.VALIDATE("Type Label"               , FORMAT(Customer."Label Production Type"));
          BufferTablecord.VALIDATE("Printed Entry No. Label"  , LabelLedgerEntry."Entry No.");
          BufferTablecord.VALIDATE("Status Label"             , LabelLedgerEntry."Label Status");
          BufferTablecord.MODIFY(TRUE);
        END;
      END;

      //>>HBPO
      Delim_GDC     := '3SGDC';
      LongField1    := STRLEN(EdiText[1]);
      Txt_GDC       := COPYSTR(EdiText[1],1,5);
      IF (Txt_GDC = Delim_GDC ) THEN BEGIN
        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETRANGE("Label Production Type" ,LabelLedgerEntry."Label Production Type"::HBPO);
        LabelLedgerEntry.SETRANGE("Number Serie HBPO"     ,(COPYSTR(EdiText[1],17,LongField1)));
        LabelLedgerEntry.SETRANGE("Lot. No"               ,(COPYSTR(EdiText[1],6,11)));
        IF LabelLedgerEntry.FINDSET  THEN BEGIN
          OkCust:=FALSE;
          ItemCrossRef.RESET;
          ItemCrossRef.SETRANGE("Cross-Reference Type"  ,ItemCrossRef."Cross-Reference Type"::Customer);
          ItemCrossRef.SETRANGE("Item No."              ,LabelLedgerEntry."Source No.");
          IF ItemCrossRef.FINDSET THEN BEGIN
          REPEAT
            IF NOT OkCust THEN BEGIN
              Customer.RESET;
              Customer.SETRANGE(Blocked,Customer.Blocked::" ");
              Customer.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
              IF Customer.FINDSET THEN
              OkCust:=TRUE;
            END;
          UNTIL ItemCrossRef.NEXT=0;

            BufferTablecord.VALIDATE(Customer                   , Customer."No.");
            BufferTablecord.VALIDATE("Type Label"               , FORMAT(Customer."Label Production Type"));
            BufferTablecord.VALIDATE("Printed Entry No. Label"  , LabelLedgerEntry."Entry No.");
            BufferTablecord.VALIDATE("Status Label"             , LabelLedgerEntry."Label Status");
            BufferTablecord.MODIFY(TRUE);
          END;
        END;
      END;

      IF (Item3 <> '3') THEN BEGIN
        LabelLedgerEntry5.RESET;
        LabelLedgerEntry5.SETCURRENTKEY("Entry No.");
        IF LabelLedgerEntry5.GET(BufferTablecord."Printed Entry No. Label") THEN BEGIN
          LabelLedgerEntry5.CALCFIELDS("Remaint Quantity Lot");
          BufferTablecord."Lot No"              := LabelLedgerEntry5."Lot. No";
          BufferTablecord."Quantity Label"      := LabelLedgerEntry5."Remaint Quantity Lot";
          BufferTablecord."Document No."        := LabelLedgerEntry."Document No.";
          BufferTablecord.MODIFY;
        END
        ELSE BEGIN
          RtnMessage:='La Etiqueta No fue Encontrada!!';
          EXIT(FALSE);
        END;
      END;

      {  //240121 RM
      IF (LabelLedgerEntry."Quality Control" = LabelLedgerEntry."Quality Control"::"Bloqueado Calidad") THEN BEGIN
        IF ((TypeTransation <> 'LIBERACIONLOTE') AND (TypeTransation <> 'CONSULTA')) THEN
          ERROR('La Etiqueta/Lote esta se encuentra Bloqueado por Calidad');
      END;}

      ////>> Validacion de Estatus Retorno de valores /////
      IF NOT ((TypeTransation = 'INVENTARIO') OR (BufferTablecord."Type Label" ='EMP-COMPL') OR
              (BufferTablecord."Type Transation" ='CONSULTA')) THEN BEGIN
        IF BufferTablecord."Status Label" = BufferTablecord."Status Label"::Cancelada THEN BEGIN
          RtnMessage:='La Etiqueta Fue Cancelada!!';
          EXIT(FALSE);
        END;

        IF BufferTablecord."Status Label" = BufferTablecord."Status Label"::" " THEN BEGIN
          RtnMessage:='La Etiqueta no Tiene un Status Asignado!!';
          EXIT(FALSE);
        END;

        IF BufferTablecord."Status Label" = BufferTablecord."Status Label"::Terminada THEN BEGIN
          RtnMessage:='La Etiqueta ya termino su Proceso!!';
          EXIT(FALSE);
        END;
      END;

      IF (BufferTablecord."Type Transation"= 'CONSULTA') THEN BEGIN
        RtrnOP          := '';
        RtrnItemNo      := '';
        RtrnQty         := '';
        RtrnLoteNo      := '';
        RtnCustNo       := '';
        RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
        RtnMessage      := '';
        EXIT(TRUE);
      END;

      IF (BufferTablecord."Type Label"= 'EMP-COMPL') THEN BEGIN
        RtrnOP          := BufferTablecord."Type Label";
        RtrnItemNo      := BufferTablecord.EDIField3;
        RtrnQty         := FORMAT(BufferTablecord."Quantity Label");
        RtrnLoteNo      := BufferTablecord."Lot No";
        RtnCustNo       := BufferTablecord.Customer;
        RtrnEntryNoLabl := 'EMP'+FORMAT(ContPacking);
        RtnMessage      := '';
        EXIT(TRUE);
      END;

      IF (BufferTablecord."Type Transation"= 'INVENTARIO') THEN BEGIN
        IF NOT ((BufferTablecord."Status Label" = BufferTablecord."Status Label"::Almacen) OR
                (BufferTablecord."Status Label" = BufferTablecord."Status Label"::Terminada))  THEN BEGIN
          RtnMessage:='La Etiqueta debe estar con estatus de Almacen o Terminado';
          EXIT(FALSE);
        END;
      END;

      IF  (BufferTablecord."Type Transation"= 'TRASPASOS') OR (BufferTablecord."Type Transation"= 'CONSIGNACION') OR
          (BufferTablecord."Type Transation"= 'EMBARQUES') OR (BufferTablecord."Type Transation"= 'SALIDACANCEL')  THEN BEGIN
        IF (BufferTablecord."Status Label" = BufferTablecord."Status Label"::" ") THEN BEGIN
          RtnMessage:='La Etiqueta no tiene Estatus asignado';
          EXIT(FALSE);
        END;
        IF NOT (BufferTablecord."Status Label" = BufferTablecord."Status Label"::Almacen)THEN BEGIN
          RtnMessage:='La Etiqueta debe estar en Almacen!';
          EXIT(FALSE);
        END;
        IF (BufferTablecord."Status Label" = BufferTablecord."Status Label"::Cancelada)THEN BEGIN
          RtnMessage:='La Etiqueta ha sido Cancelada!!';
          EXIT(FALSE);
        END;
      END;

      //>>Validar Items Consignacion
      IF (BufferTablecord."Type Transation"= 'EMBARQUES') THEN BEGIN
        OkCust:=FALSE;
        ItemCrossRef.RESET;
        ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
        ItemCrossRef.SETRANGE("Item No.",LabelLedgerEntry."Source No.");
        IF ItemCrossRef.FINDSET THEN
        REPEAT
        IF NOT OkCust THEN BEGIN
          Cust.RESET;
          Cust.SETRANGE(Blocked,Customer.Blocked::" ");
          Cust.SETRANGE("No.",ItemCrossRef."Cross-Reference Type No.");
          IF Cust.FINDSET THEN
            OkCust:=TRUE;
        END;
        UNTIL ItemCrossRef.NEXT=0;
        IF Cust.Consignation = TRUE THEN
          ItemJnlPost.CheckItemsPTCons(LabelLedgerEntry."Source No.",ItemCrossRef."Cross-Reference Type No.");
      END;


      IF ((BufferTablecord."Type Transation"= 'CONSUMO') OR
          (BufferTablecord."Type Transation"= 'SALIDA') OR
          (BufferTablecord."Type Transation"= 'CONSIGNACION') OR
          (BufferTablecord."Type Transation"= 'INVENTARIO') OR
          (BufferTablecord."Type Transation"= 'TRASPASOS') OR
          (BufferTablecord."Type Transation"= 'EMBARQUES') OR
          (BufferTablecord."Type Transation"= 'CUARENTENA') OR
          (BufferTablecord."Type Transation"= 'SALIDACANCEL') OR
          (BufferTablecord."Type Transation"= 'CALIDAD') OR
          (BufferTablecord."Type Transation"='PEDTRANSF')OR
          (BufferTablecord."Type Transation"='LIBERACIONLOTE') OR
          (BufferTablecord."Type Transation"='RECEPCION') ) THEN BEGIN

        //>>etiqueta Generica
        IF (BufferTablecord."Type Label"= 'GENERICA') OR (BufferTablecord."Type Label" = 'RECEPCION') THEN BEGIN
          RtrnOP          := BufferTablecord.EDIField2;
          RtrnItemNo      := BufferTablecord.EDIField3;
          RtrnQty         := BufferTablecord.EDIField4;
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        //>>etiqueta Generica Externa
        IF (BufferTablecord."Type Label"= 'EXTERNA') THEN BEGIN
          RtrnOP          := '';
          RtrnItemNo      := EdiText[3];
          RtrnQty         := FORMAT(BufferTablecord."Quantity Label");
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;



        IF ((BufferTablecord."Label GDC"=TRUE)) THEN BEGIN
          RtrnOP          := '';
          RtrnItemNo      := BufferTablecord.EDIField3;
          RtrnQty         := BufferTablecord.EDIField4;
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        IF ((BufferTablecord."Type Label"= 'GENERICA-PT') AND ((BufferTablecord."Type Transation"= 'SALIDA')OR (BufferTablecord."Type Transation"= 'INVENTARIO') OR
        (BufferTablecord."Type Transation"= 'TRASPASOS')OR  (BufferTablecord."Type Transation"= 'CUARENTENA') OR (BufferTablecord."Type Transation"= 'SALIDACANCEL')
          OR (BufferTablecord."Type Transation"= 'CALIDAD'))) THEN BEGIN
          RtrnOP          := BufferTablecord.EDIField2;
          RtrnItemNo      := BufferTablecord.EDIField3;
          RtrnQty         := BufferTablecord.EDIField4;
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        IF (((BufferTablecord."Type Label"= 'GENERICA-PT') OR (BufferTablecord."Type Label"= 'GENERICA'))
          AND (BufferTablecord."Type Transation"= 'CONSUMO')) THEN BEGIN
          RtrnOP          := '';
          RtrnItemNo      := BufferTablecord.EDIField3;
          RtrnQty         := BufferTablecord.EDIField4;
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        IF ((BufferTablecord."Type Label"= 'GENERICA-PT') AND ((BufferTablecord."Type Transation"= 'LIBERACIONLOTE'))) THEN BEGIN
          RtrnOP          := BufferTablecord.EDIField2;
          RtrnItemNo      := BufferTablecord.EDIField3;
          RtrnQty         := BufferTablecord.EDIField4;
          RtrnLoteNo      := BufferTablecord."Lot No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        IF ((BufferTablecord."Type Label"= 'GENERICA-PT') AND ((BufferTablecord."Type Transation"= 'EMBARQUES')OR (BufferTablecord."Type Transation"= 'CONSIGNACION'))) THEN BEGIN
          RtnMessage      := 'ETIQUETA INCORRECTA';
        END;


        //>> Etiqueta //hella, VW
        IF ((BufferTablecord."Type Label"= 'HELLA') OR (BufferTablecord."Type Label"= 'VW')) THEN BEGIN
          IF BufferTablecord."Type Transation"= 'CONSUMO' THEN
            RtrnOP:=''
          ELSE
            RtrnOP          := LabelLedgerEntry."Document No.";
          RtrnItemNo      := LabelLedgerEntry."Source No.";
          RtrnQty         := FORMAT(LabelLedgerEntry.Quantity);
          RtrnLoteNo      := LabelLedgerEntry."Lot. No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(LabelLedgerEntry."Entry No.");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        //>> Etiqueta GM
        IF (BufferTablecord."Type Label"= 'GENERAL MOTORS') THEN BEGIN
          IF BufferTablecord."Type Transation"= 'CONSUMO' THEN
            RtrnOP:=''
          ELSE
            RtrnOP          := LabelLedgerEntry."Document No.";
          RtrnItemNo      := LabelLedgerEntry."Source No.";
          RtrnQty         := FORMAT(LabelLedgerEntry.Quantity);
          RtrnLoteNo      := LabelLedgerEntry."Lot. No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        //>> Etiqueta Kautex
        IF (BufferTablecord."Type Label"= 'KAUTEX') THEN BEGIN
          IF BufferTablecord."Type Transation"= 'CONSUMO' THEN
            RtrnOP:=''
          ELSE
            RtrnOP          := LabelLedgerEntry."Document No.";
          RtrnItemNo      := LabelLedgerEntry."Source No.";
          RtrnQty         := FORMAT(LabelLedgerEntry.Quantity);
          RtrnLoteNo      := LabelLedgerEntry."Lot. No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        //Etiqueta HBPO
        IF (BufferTablecord."Type Label"= 'HBPO') THEN BEGIN
          IF BufferTablecord."Type Transation"= 'CONSUMO' THEN
            RtrnOP:=''
          ELSE
            RtrnOP          := LabelLedgerEntry."Document No.";
          RtrnItemNo      := LabelLedgerEntry."Source No.";
          RtrnQty         := FORMAT(LabelLedgerEntry.Quantity);
          RtrnLoteNo      := LabelLedgerEntry."Lot. No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;

        //Etiqueta Antolin
        IF (BufferTablecord."Type Label"= 'ANTOLIN') THEN BEGIN
          IF BufferTablecord."Type Transation"= 'CONSUMO' THEN
            RtrnOP:=''
          ELSE
            RtrnOP          := LabelLedgerEntry."Document No.";
          RtrnItemNo      := LabelLedgerEntry."Source No.";
          RtrnQty         := FORMAT(LabelLedgerEntry.Quantity);
          RtrnLoteNo      := LabelLedgerEntry."Lot. No";
          RtnCustNo       := BufferTablecord.Customer;
          RtrnEntryNoLabl := FORMAT(BufferTablecord."Printed Entry No. Label");
          RtnMessage      := '';
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE DiarioConsumo@1102401091(ProdOrdNo@1102401006 : Code[20];ItemNo@1102401005 : Code[30];Qty1@1102401003 : Code[30];NoLot@1102401008 : Code[20];EntryLabel@1102401002 : Code[20];PhysicalLocation@1102401030 : Code[60];CodAuditoria@1102401031 : Code[30];LocationCode@1102401032 : Code[30];BinCode@1102401033 : Code[30]) : Boolean;
    VAR
      TmpItmJrnL@1102401007 : Record 83;
      CodO@1102401004 : Record 82;
      ItmJournalLine@1102401001 : Record 83;
      locat@1102401010 : Code[20];
      Item@1102401011 : Record 27;
      Prod@1102401012 : Text[50];
      Respuesta@1102401013 : Boolean;
      ProducOrder@1102401009 : Record 5405;
      Libro@1102401014 : Code[50];
      Seccion@1102401015 : Code[50];
      ItmJrnline2@1102401016 : Record 83;
      ItmJrnline1@1102401019 : Record 83;
      Line@1102401017 : Integer;
      Qty@1102401018 : Decimal;
      ProdOrderComponent@1102401020 : Record 5407;
      ProdOrderLine@1102401021 : Record 5406;
      RemainingQty@1102401022 : Decimal;
      RemainingQty2@1102401023 : Decimal;
      LabelLedgerEntry@1102401024 : Record 50011;
      EntrLabl@1102401025 : Integer;
      Qty2@1102401026 : Decimal;
      QtyExitsReal@1102401029 : Decimal;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Consuption Jnal Template Name");
      UserSetup.TESTFIELD("Seccion Diario Consumo");
      Libro   :=UserSetup."Consuption Jnal Template Name";
      Seccion :=UserSetup."Seccion Diario Consumo";

      EVALUATE(Qty,Qty1);
      EVALUATE(EntrLabl,EntryLabel);
      LabelLedgerEntry.GET(EntrLabl);

      ProducOrder.RESET;
      ProducOrder.SETFILTER(Status,'=%1|%2',ProducOrder.Status::Released,ProducOrder.Status::"Firm Planned");
      ProducOrder.SETRANGE(ProducOrder."No.",ProdOrdNo);
      ProducOrder.FINDSET;

      ProdOrderLine.RESET;
      ProdOrderLine.SETFILTER(Status,'=%1|%2',ProdOrderLine.Status::Released,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrdNo);
      ProdOrderLine.FINDSET;
      {
      ProdOrderComponent.RESET;
      ProdOrderComponent.SETFILTER(Status,'=%1|%2',ProdOrderComponent.Status::Released,ProdOrderComponent.Status::"Firm Planned");
      ProdOrderComponent.SETRANGE("Prod. Order No."     ,ProducOrder."No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComponent.SETRANGE("Item No."            ,ItemNo);
      IF ProdOrderComponent.FINDSET THEN BEGIN
        LocationCode :=ProdOrderComponent."Location Code";
        BinCode      :=ProdOrderComponent."Bin Code";
      END
      ELSE BEGIN
        Item.GET(ItemNo);
        LocationCode :=Item."Cod. Location Default";
        BinCode      :=Item."Bin Code Default";
      END;}


      IF (Qty > 0) THEN BEGIN
        QtyExitsReal  :=ConsultExistLotNo(ItemNo,NoLot,LocationCode,BinCode);
        IF NOT (QtyExitsReal > 0) THEN
          ERROR('Lote No Disponible %1 %2',NoLot,ItemNo);
      END;

      //desbloquea lote
      IF LocationCode = ManufacturingSetup."Location Cuarenten Code" THEN BEGIN
        EditLotNoInfo(ItemNo,NoLot,FALSE);
      END;

      RemainingQty  :=Qty;
      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
      RemainingQty2 := LabelLedgerEntry."Remaint Quantity Lot"-RemainingQty;
      AjustRemaingQtyLabelEntry(EntryLabel,RemainingQty2);

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJrnline1.RESET;
      ItmJrnline1.SETRANGE("Journal Template Name",Libro);
      ItmJrnline1.SETRANGE("Journal Batch Name"   ,Seccion);
      ItmJrnline1.SETRANGE("Order No."            ,ProducOrder."No.");
      ItmJrnline1.SETRANGE("Item No."             ,ItemNo);
      ItmJrnline1.SETRANGE("Location Code"        ,LocationCode);
      ItmJrnline1.SETRANGE("Bin Code"             ,BinCode);
      IF NOT ItmJrnline1. FINDSET THEN BEGIN
        ItmJournalLine.INIT;
        ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
        ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
        ItmJournalLine."Line No."                       :=Line;
        CodO.GET(Libro);
        ItmJournalLine.VALIDATE("Posting Date"          , TODAY);
        ItmJournalLine.VALIDATE("Entry Type"            , ItmJournalLine."Entry Type" ::Consumption);
        ItmJournalLine.VALIDATE("Order No."             , ProducOrder."No.");
        ItmJournalLine."Source Code"                    :=CodO."Source Code";
        LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
        ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
        ItmJournalLine.VALIDATE("Item No."              , ItemNo);
        ItmJournalLine.VALIDATE(Quantity                , RemainingQty);
        ItmJournalLine.VALIDATE("Location Code"         , LocationCode);
        ItmJournalLine.VALIDATE("Bin Code"              , BinCode);
        ItmJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF (CodAuditoria <> '0-') THEN
          ItmJournalLine.VALIDATE("Reason Code"           , CodAuditoria);
        IF ItmJournalLine.INSERT(TRUE) THEN BEGIN
          AsigStatusLabel(EntryLabel,'CONSUMO');
          ControlTrackingLabel(EntryLabel,'CONSUMO',ItmJournalLine,PhysicalLocation,LocationCode,BinCode,RemainingQty,6);
          IF RemainingQty <> 0 THEN BEGIN
            IF AssignLotJrnalConsumos(ItmJournalLine,NoLot,RemainingQty) THEN BEGIN
              IF (ManufacturingSetup."Posting Consuption Jrnal Aut."= TRUE) THEN BEGIN
                IF PostingJrnalConsumo(ItmJournalLine,EntryLabel) THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE)
              END ELSE
                EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(FALSE);
        END;
      END
      ELSE BEGIN
        Qty2:=0;
        Qty2 :=  ItmJrnline1.Quantity + RemainingQty;
        ItmJrnline1.VALIDATE(Quantity                 ,Qty2);
        ItmJrnline1.VALIDATE("External Document No."  ,EntryLabel);
        IF ItmJrnline1.MODIFY(TRUE) THEN BEGIN
          AsigStatusLabel(EntryLabel,'CONSUMO');
          ControlTrackingLabel(EntryLabel,'CONSUMO',ItmJrnline1,PhysicalLocation,LocationCode,BinCode,RemainingQty,6);
          IF RemainingQty <> 0 THEN BEGIN
            IF AssignLotJrnalConsumos(ItmJrnline1,NoLot,RemainingQty) THEN BEGIN
              IF (ManufacturingSetup."Posting Consuption Jrnal Aut."= TRUE) THEN BEGIN
                IF PostingJrnalConsumo(ItmJrnline1,EntryLabel) THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE)
              END ELSE
                EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE DiarioConsumoCancel@1102401159(ProdOrdNo@1102401006 : Code[20];ItemNo@1102401005 : Code[30];Qty1@1102401003 : Code[30];NoLot@1102401008 : Code[20];EntryLabel@1102401002 : Code[20];PhysicalLocation@1102401030 : Code[60];CodAuditoria@1102401031 : Code[30];LocationCode@1102401032 : Code[30];BinCode@1102401033 : Code[30]) : Boolean;
    VAR
      TmpItmJrnL@1102401007 : Record 83;
      CodO@1102401004 : Record 82;
      ItmJournalLine@1102401001 : Record 83;
      locat@1102401010 : Code[20];
      Item@1102401011 : Record 27;
      Prod@1102401012 : Text[50];
      Respuesta@1102401013 : Boolean;
      ProducOrder@1102401009 : Record 5405;
      Libro@1102401014 : Code[50];
      Seccion@1102401015 : Code[50];
      ItmJrnline2@1102401016 : Record 83;
      ItmJrnline1@1102401019 : Record 83;
      Line@1102401017 : Integer;
      Qty@1102401018 : Decimal;
      ProdOrderComponent@1102401020 : Record 5407;
      ProdOrderLine@1102401021 : Record 5406;
      RemainingQty@1102401022 : Decimal;
      RemainingQty2@1102401023 : Decimal;
      LabelLedgerEntry@1102401024 : Record 50011;
      EntrLabl@1102401025 : Integer;
      Qty2@1102401026 : Decimal;
      QtyExitsReal@1102401029 : Decimal;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Consuption Jnal Template Name");
      UserSetup.TESTFIELD("Seccion Diario Consumo");
      Libro   :=UserSetup."Consuption Jnal Template Name";
      Seccion :=UserSetup."Seccion Diario Consumo";

      EVALUATE(Qty,Qty1);
      EVALUATE(EntrLabl,EntryLabel);
      LabelLedgerEntry.GET(EntrLabl);

      ProducOrder.RESET;
      ProducOrder.SETFILTER(Status,'=%1|%2',ProducOrder.Status::Released,ProducOrder.Status::"Firm Planned");
      ProducOrder.SETRANGE(ProducOrder."No.",ProdOrdNo);
      ProducOrder.FINDSET;

      ProdOrderLine.RESET;
      ProdOrderLine.SETFILTER(Status,'=%1|%2',ProdOrderLine.Status::Released,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrdNo);
      ProdOrderLine.FINDSET;
      {
      ProdOrderComponent.RESET;
      ProdOrderComponent.SETFILTER(Status,'=%1|%2',ProdOrderComponent.Status::Released,ProdOrderComponent.Status::"Firm Planned");
      ProdOrderComponent.SETRANGE("Prod. Order No."     ,ProducOrder."No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComponent.SETRANGE("Item No."            ,ItemNo);
      IF ProdOrderComponent.FINDSET THEN BEGIN
        LocationCode :=ProdOrderComponent."Location Code";
        BinCode      :=ProdOrderComponent."Bin Code";
      END
      ELSE BEGIN
        Item.GET(ItemNo);
        LocationCode :=Item."Cod. Location Default";
        BinCode      :=Item."Bin Code Default";
      END;}

      {
      IF (Qty > 0) THEN BEGIN
        QtyExitsReal  :=ConsultExistLotNo(ItemNo,NoLot,LocationCode,BinCode);
        IF NOT (QtyExitsReal > 0) THEN
          ERROR('Lote No Disponible %1 %2',NoLot,ItemNo);
      END;
      }

      RemainingQty  :=Qty;
      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
      RemainingQty2 := LabelLedgerEntry."Remaint Quantity Lot"-RemainingQty;
      AjustRemaingQtyLabelEntry(EntryLabel,RemainingQty2);

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJrnline1.RESET;
      ItmJrnline1.SETRANGE("Journal Template Name",Libro);
      ItmJrnline1.SETRANGE("Journal Batch Name"   ,Seccion);
      ItmJrnline1.SETRANGE("Order No."            ,ProducOrder."No.");
      ItmJrnline1.SETRANGE("Item No."             ,ItemNo);
      ItmJrnline1.SETRANGE("Location Code"        ,LocationCode);
      ItmJrnline1.SETRANGE("Bin Code"             ,BinCode);
      IF NOT ItmJrnline1. FINDSET THEN BEGIN
        ItmJournalLine.INIT;
        ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
        ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
        ItmJournalLine."Line No."                       :=Line;
        CodO.GET(Libro);
        ItmJournalLine.VALIDATE("Posting Date"          , TODAY);
        ItmJournalLine.VALIDATE("Entry Type"            , ItmJournalLine."Entry Type" ::Consumption);
        ItmJournalLine.VALIDATE("Order No."             , ProducOrder."No.");
        ItmJournalLine."Source Code"                    :=CodO."Source Code";
        LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
        ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
        ItmJournalLine.VALIDATE("Item No."              , ItemNo);
        ItmJournalLine.VALIDATE(Quantity                , RemainingQty);
        ItmJournalLine.VALIDATE("Location Code"         , LocationCode);
        ItmJournalLine.VALIDATE("Bin Code"              , BinCode);
        ItmJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF (CodAuditoria <> '0-') THEN
          ItmJournalLine.VALIDATE("Reason Code"           , CodAuditoria);
        IF ItmJournalLine.INSERT(TRUE) THEN BEGIN
          AsigStatusLabel(EntryLabel,'CONSUMO');
          ControlTrackingLabel(EntryLabel,'CONSUMO',ItmJournalLine,PhysicalLocation,LocationCode,BinCode,RemainingQty,6);
          IF RemainingQty <> 0 THEN BEGIN
            IF AssignLotJrnalConsumos(ItmJournalLine,NoLot,RemainingQty) THEN BEGIN
              IF (ManufacturingSetup."Posting Consuption Jrnal Aut."= TRUE) THEN BEGIN
                IF PostingJrnalConsumo(ItmJournalLine,EntryLabel) THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE)
              END ELSE
                EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(FALSE);
        END;
      END
      ELSE BEGIN
        Qty2:=0;
        Qty2 :=  ItmJrnline1.Quantity + RemainingQty;
        ItmJrnline1.VALIDATE(Quantity                 ,Qty2);
        ItmJrnline1.VALIDATE("External Document No."  ,EntryLabel);
        IF ItmJrnline1.MODIFY(TRUE) THEN BEGIN
          AsigStatusLabel(EntryLabel,'CONSUMO');
          ControlTrackingLabel(EntryLabel,'CONSUMO',ItmJrnline1,PhysicalLocation,LocationCode,BinCode,RemainingQty,6);
          IF RemainingQty <> 0 THEN BEGIN
            IF AssignLotJrnalConsumos(ItmJrnline1,NoLot,RemainingQty) THEN BEGIN
              IF (ManufacturingSetup."Posting Consuption Jrnal Aut."= TRUE) THEN BEGIN
                IF PostingJrnalConsumo(ItmJrnline1,EntryLabel) THEN
                  EXIT(TRUE)
                ELSE
                  EXIT(FALSE)
              END ELSE
                EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END ELSE
            EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE DiarioSalida@1102401103(ProdOrdNo@1102401006 : Code[20];NoPrd@1102401003 : Code[30];Qty1@1102401002 : Code[30];NoLot@1102401001 : Code[30];EntryLabel@1102401018 : Code[20]) : Boolean;
    VAR
      CodO@1102401004 : Record 82;
      TmpItmJrnL@1102401005 : Record 83;
      Libro@1102401009 : Code[50];
      Seccion@1102401008 : Code[50];
      Qty@1102401007 : Decimal;
      ItmJrnline1@1102401019 : Record 83;
      ItmJrnline2@1102401011 : Record 83;
      ItmJrnline3@1102401017 : Record 83;
      ItmJrnline4@1102401026 : Record 83;
      Line@1102401010 : Integer;
      ItmJournalLine@1102401012 : Record 83;
      TmpReservationEntry@1102401013 : Record 337;
      ReservEntry2@1102401014 : Record 337;
      ReservEntry@1102401015 : Record 337;
      MovNo@1102401016 : Integer;
      CodAlmcn@1102401021 : Code[30];
      CodUbic@1102401020 : Code[30];
      ProductionOrder@1102401022 : Record 5405;
      Qty2@1102401023 : Decimal;
      LocationCode@1102401024 : Code[30];
      BinCode@1102401025 : Code[30];
      LabelLedgerEntry1@1102401028 : Record 50011;
      LabelNo@1102401029 : Integer;
      RemainingQty2@1102401030 : Decimal;
      Item6@1102401031 : Code[6];
      ProdOrderLine@1102401032 : Record 5406;
      ProdOrderRoutingLine@1102401033 : Record 5409;
      Items@1102401034 : Record 27;
      ItemLedgerEntry@1102401035 : Record 32;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);

      UserSetup.TESTFIELD("Output Jnal Temp Name Quality");
      UserSetup.TESTFIELD("Seccion Diario Salida Quality");
      Seccion :=  UserSetup."Seccion Diario Salida Quality";
      Libro   :=  UserSetup."Output Jnal Temp Name Quality";

      EVALUATE(Qty,Qty1);

      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrdNo);
      LocationCode:= ProductionOrder."Location Code";
      BinCode     := ProductionOrder."Bin Code";

      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Line No.");
      ProdOrderLine.GET(ProductionOrder.Status,ProductionOrder."No.",10000);

      IF ProdOrderLine."Remaining Quantity" < Qty THEN
        ERROR('La Cantidad a ingresar %1,  es mayor a la cantidad Pendiente de la OP %2',Qty,ProdOrderLine."Remaining Quantity");

      ProdOrderRoutingLine.RESET;
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No."       ,ProdOrdNo);
      ProdOrderRoutingLine.SETRANGE("Routing Reference No." ,10000);
      ProdOrderRoutingLine.SETFILTER("No."                  ,'<>%1','SECADO');
      ProdOrderRoutingLine.FINDSET;

      CLEAR(ItemLedgerEntry);
      ItemLedgerEntry.SETCURRENTKEY("External Document No.","Item No.","Location Code","Lot No.");
      ItemLedgerEntry.SETRANGE("External Document No.",EntryLabel);
      ItemLedgerEntry.SETRANGE("Item No."             ,NoPrd);
      ItemLedgerEntry.SETRANGE("Location Code"        ,LocationCode);
      ItemLedgerEntry.SETRANGE("Lot No."              ,NoLot);
      ItemLedgerEntry.SETFILTER("Entry Type"          ,'=%1',ItemLedgerEntry."Entry Type"::Output);
      IF ItemLedgerEntry.FINDSET THEN
        //ERROR('Ya Fue Registrada la Etiqueta %1!!',EntryLabel);
        EXIT(TRUE);

      // seguimiento etiqueta


      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name",Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJrnline1.RESET;
      ItmJrnline1.SETRANGE("Journal Template Name",Libro);
      ItmJrnline1.SETRANGE("Journal Batch Name"   ,Seccion);
      ItmJrnline1.SETRANGE("Order No."            ,ProdOrdNo);
      ItmJrnline1.SETRANGE("External Document No.",EntryLabel);
      IF NOT ItmJrnline1. FINDSET THEN BEGIN
        ItmJournalLine.RESET;
        ItmJournalLine.INIT;
        ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
        ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
        ItmJournalLine."Line No."                       :=Line;
        CodO.GET(Libro);
        ItmJournalLine.VALIDATE("Posting Date"          ,WORKDATE);
        ItmJournalLine.VALIDATE("Entry Type"            ,ItmJournalLine."Entry Type" ::Output);
        ItmJournalLine.VALIDATE("Order No."             ,ProdOrdNo);
        ItmJournalLine.VALIDATE("Item No."              ,NoPrd);
        ItmJournalLine.VALIDATE("Operation No."         ,ProdOrderRoutingLine."Operation No.");
        ItmJournalLine."Source Code"                    := CodO."Source Code";
        ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
        ItmJournalLine."Location Code"                  :=LocationCode;
        ItmJournalLine."Bin Code"                       :=BinCode;
        ItmJournalLine."External Document No."          :=EntryLabel;
        LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
        ItmJournalLine.INSERT(TRUE);

        //>>Modifica Qty
        ItmJrnline2.RESET;
        ItmJrnline2.GET(ItmJournalLine."Journal Template Name",ItmJournalLine."Journal Batch Name",ItmJournalLine."Line No.");
        ItmJrnline2.VALIDATE("Output Quantity",Qty);
        IF ItmJrnline2.MODIFY(TRUE) THEN BEGIN
          EVALUATE(LabelNo,EntryLabel);
          AssignLotJrnalSalidas(ItmJrnline2,NoLot,Qty);
          LiberateLabelReadedBuffer('CALIDAD',LabelNo);
          IF (ManufacturingSetup."Posting OutPut Jrnal Aut." = TRUE) THEN BEGIN
            ControlTrackingLabel(EntryLabel,'CALIDAD',ItmJrnline2,'',LocationCode,BinCode,Qty,6);
            IF PostingJrnalSalida(ItmJrnline2) THEN BEGIN
              SLEEP(100);
              LabelLedgerEntry1.RESET;
              LabelLedgerEntry1.SETCURRENTKEY("Entry No.");
              LabelLedgerEntry1.GET(LabelNo);
              LabelLedgerEntry1."Quality Control" := LabelLedgerEntry1."Quality Control"::"Liberado Calidad";
              LabelLedgerEntry1.MODIFY;
              EXIT(TRUE)
            END
            ELSE
              EXIT(FALSE)
          END;
        END;
      END
      ELSE BEGIN
        ERROR('YA EXISTE LA ETIQUETA EN EL DIARIO');
      END;
    END;

    PROCEDURE DiarioRechazos@1102401145(ProdOrdNo@1102401006 : Code[20];Qty1@1102401002 : Code[30];CodAuditoria@1102401001 : Text[100]) : Boolean;
    VAR
      CodO@1102401004 : Record 82;
      TmpItmJrnL@1102401005 : Record 83;
      Libro@1102401009 : Code[50];
      Seccion@1102401008 : Code[50];
      Qty@1102401007 : Decimal;
      ItmJrnline1@1102401019 : Record 83;
      ItmJrnline2@1102401011 : Record 83;
      ItmJrnline3@1102401017 : Record 83;
      ItmJrnline4@1102401026 : Record 83;
      Line@1102401010 : Integer;
      ItmJournalLine@1102401012 : Record 83;
      TmpReservationEntry@1102401013 : Record 337;
      ReservEntry2@1102401014 : Record 337;
      ReservEntry@1102401015 : Record 337;
      MovNo@1102401016 : Integer;
      CodAlmcn@1102401021 : Code[30];
      CodUbic@1102401020 : Code[30];
      ProductionOrder@1102401022 : Record 5405;
      Qty2@1102401023 : Decimal;
      LocationCode@1102401024 : Code[30];
      BinCode@1102401025 : Code[30];
      LabelLedgerEntry1@1102401028 : Record 50011;
      LabelNo@1102401029 : Integer;
      RemainingQty2@1102401030 : Decimal;
      Item6@1102401031 : Code[6];
      ProdOrderLine@1102401032 : Record 5406;
      ProdOrderRoutingLine@1102401033 : Record 5409;
      Items@1102401034 : Record 27;
      ItemLedgerEntry@1102401035 : Record 32;
      ReasonCode@1102401003 : Code[50];
      Pos1@1102401018 : Integer;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);

      Pos1 := STRPOS(CodAuditoria,'-');
      ReasonCode :=COPYSTR(CodAuditoria,1,Pos1-1);

      UserSetup.TESTFIELD(UserSetup."ScrapOutput Jnal Template Name");
      UserSetup.TESTFIELD(UserSetup."Scrap Seccion Diario Salida");
      Seccion :=  UserSetup."Scrap Seccion Diario Salida";
      Libro   :=  UserSetup."ScrapOutput Jnal Template Name";

      EVALUATE(Qty,Qty1);

      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrdNo);
      LocationCode:= ProductionOrder."Location Code";
      BinCode     := ProductionOrder."Bin Code";

      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Line No.");
      ProdOrderLine.GET(ProductionOrder.Status,ProductionOrder."No.",10000);

      ProdOrderRoutingLine.RESET;
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No."       ,ProdOrdNo);
      ProdOrderRoutingLine.SETRANGE("Routing Reference No." ,10000);
      ProdOrderRoutingLine.SETFILTER("No."                  ,'<>%1','SECADO');
      ProdOrderRoutingLine.FINDSET;

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name",Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJournalLine.RESET;
      ItmJournalLine.INIT;
      ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
      ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
      ItmJournalLine."Line No."                       :=Line;
      CodO.GET(Libro);
      ItmJournalLine.VALIDATE("Posting Date"          ,WORKDATE);
      ItmJournalLine.VALIDATE("Entry Type"            ,ItmJournalLine."Entry Type" ::Output);
      ItmJournalLine.VALIDATE("Order No."             ,ProdOrdNo);
      ItmJournalLine.VALIDATE("Item No."              ,ProductionOrder."Source No.");
      ItmJournalLine.VALIDATE("Operation No."         ,ProdOrderRoutingLine."Operation No.");
      ItmJournalLine."Source Code"                    := CodO."Source Code";
      ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
      ItmJournalLine."Location Code"                  :=LocationCode;
      ItmJournalLine."Bin Code"                       :=BinCode;
      //ItmJournalLine."Reason Code"                    :=ReasonCode;
      ItmJournalLine."Scrap Code"                     :=ReasonCode;
      LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
      ItmJournalLine.INSERT(TRUE);

      //>>Modifica Qty
      ItmJrnline2.RESET;
      ItmJrnline2.GET(ItmJournalLine."Journal Template Name",ItmJournalLine."Journal Batch Name",ItmJournalLine."Line No.");
      ItmJrnline2.VALIDATE("Scrap Quantity",Qty);
      ItmJrnline2.MODIFY(TRUE);

      IF (ManufacturingSetup."Posting Scrap Output Jnal") THEN BEGIN
        PostingJrnalSalida(ItmJrnline2);
        SLEEP(100);
      END;
      EXIT(TRUE)
    END;

    PROCEDURE DiarioCapacidad@1102401147(ProdOrdNo@1102401006 : Code[20];Qty1@1102401002 : Code[30];CodAuditoria@1102401001 : Text[100]) : Boolean;
    VAR
      CodO@1102401004 : Record 82;
      TmpItmJrnL@1102401005 : Record 83;
      Libro@1102401009 : Code[50];
      Seccion@1102401008 : Code[50];
      Qty@1102401007 : Decimal;
      ItmJrnline1@1102401019 : Record 83;
      ItmJrnline2@1102401011 : Record 83;
      ItmJrnline3@1102401017 : Record 83;
      ItmJrnline4@1102401026 : Record 83;
      Line@1102401010 : Integer;
      ItmJournalLine@1102401012 : Record 83;
      TmpReservationEntry@1102401013 : Record 337;
      ReservEntry2@1102401014 : Record 337;
      ReservEntry@1102401015 : Record 337;
      MovNo@1102401016 : Integer;
      CodAlmcn@1102401021 : Code[30];
      CodUbic@1102401020 : Code[30];
      ProductionOrder@1102401022 : Record 5405;
      Qty2@1102401023 : Decimal;
      LocationCode@1102401024 : Code[30];
      BinCode@1102401025 : Code[30];
      LabelLedgerEntry1@1102401028 : Record 50011;
      LabelNo@1102401029 : Integer;
      RemainingQty2@1102401030 : Decimal;
      Item6@1102401031 : Code[6];
      ProdOrderLine@1102401032 : Record 5406;
      ProdOrderRoutingLine@1102401033 : Record 5409;
      Items@1102401034 : Record 27;
      ItemLedgerEntry@1102401035 : Record 32;
      ReasonCode@1102401003 : Code[50];
      Pos1@1102401018 : Integer;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);

      Pos1 := STRPOS(CodAuditoria,'-');
      ReasonCode :=COPYSTR(CodAuditoria,1,Pos1-1);

      UserSetup.TESTFIELD(UserSetup."TimeOut Jnal Template Name");
      UserSetup.TESTFIELD(UserSetup."TimeOut Jnal Seccion Diario");
      Seccion :=  UserSetup."TimeOut Jnal Seccion Diario";
      Libro   :=  UserSetup."TimeOut Jnal Template Name";

      EVALUATE(Qty,Qty1);

      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrdNo);
      LocationCode:= ProductionOrder."Location Code";
      BinCode     := ProductionOrder."Bin Code";

      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Line No.");
      ProdOrderLine.GET(ProductionOrder.Status,ProductionOrder."No.",10000);

      ProdOrderRoutingLine.RESET;
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No."       ,ProdOrdNo);
      ProdOrderRoutingLine.SETRANGE("Routing Reference No." ,10000);
      ProdOrderRoutingLine.SETFILTER("No."                  ,'<>%1','SECADO');
      ProdOrderRoutingLine.FINDSET;

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name",Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJournalLine.RESET;
      ItmJournalLine.INIT;
      ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
      ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
      ItmJournalLine."Line No."                       :=Line;
      CodO.GET(Libro);
      ItmJournalLine.VALIDATE("Posting Date"          ,WORKDATE);
      ItmJournalLine.VALIDATE("Entry Type"            ,ItmJournalLine."Entry Type"::Output);
      ItmJournalLine.VALIDATE("Order No."             ,ProdOrdNo);
      ItmJournalLine.VALIDATE("Item No."              ,ProductionOrder."Source No.");
      ItmJournalLine.VALIDATE("Operation No."         ,ProdOrderRoutingLine."Operation No.");
      ItmJournalLine."Source Code"                    := CodO."Source Code";
      ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
      ItmJournalLine."Location Code"                  :=LocationCode;
      ItmJournalLine."Bin Code"                       :=BinCode;
      ItmJournalLine."Stop Code"                      :=ReasonCode;

      LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
      ItmJournalLine.INSERT(TRUE);

      //>>Modifica Qty
      ItmJrnline2.RESET;
      ItmJrnline2.GET(ItmJournalLine."Journal Template Name",ItmJournalLine."Journal Batch Name",ItmJournalLine."Line No.");
      ItmJrnline2.VALIDATE("Stop Time",Qty);
      ItmJrnline2.MODIFY(TRUE);
          {
      IF (ManufacturingSetup."Posting Scrap Output Jnal") THEN BEGIN
        PostingJrnalSalida(ItmJrnline2);
        SLEEP(100);
      END;
      }
      IF ManufacturingSetup."Posting Journal Stop Time" THEN BEGIN
          PostingJrnalSalida(ItmJrnline2);
        SLEEP(100);
      END;

      EXIT(TRUE)
    END;

    PROCEDURE DiarioSalidaCancel@1102401129(ProdOrdNo@1102401006 : Code[20];NoPrd@1102401003 : Code[30];Qty1@1102401002 : Code[30];NoLot@1102401001 : Code[30];EntryLabel@1102401018 : Code[20]) : Boolean;
    VAR
      CodO@1102401004 : Record 82;
      TmpItmJrnL@1102401005 : Record 83;
      Libro@1102401009 : Code[50];
      Seccion@1102401008 : Code[50];
      Qty@1102401007 : Decimal;
      ItmJrnline1@1102401019 : Record 83;
      ItmJrnline2@1102401011 : Record 83;
      ItmJrnline3@1102401017 : Record 83;
      ItmJrnline4@1102401026 : Record 83;
      Line@1102401010 : Integer;
      ItmJournalLine@1102401012 : Record 83;
      TmpReservationEntry@1102401013 : Record 337;
      ReservEntry2@1102401014 : Record 337;
      ReservEntry@1102401015 : Record 337;
      MovNo@1102401016 : Integer;
      CodAlmcn@1102401021 : Code[30];
      CodUbic@1102401020 : Code[30];
      ProductionOrder@1102401022 : Record 5405;
      Qty2@1102401023 : Decimal;
      LocationCode@1102401024 : Code[30];
      BinCode@1102401025 : Code[30];
      LabelLedgerEntry1@1102401028 : Record 50011;
      LabelNo@1102401029 : Integer;
      RemainingQty2@1102401030 : Decimal;
      Item6@1102401031 : Code[6];
      ProdOrderLine@1102401032 : Record 5406;
      ProdOrderRoutingLine@1102401033 : Record 5409;
      Items@1102401034 : Record 27;
      ItemLedgerEntry@1102401035 : Record 32;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      {
      UserSetup.TESTFIELD("Output Jnal Template Name");
      UserSetup.TESTFIELD("Seccion Diario Salida");
      Seccion :=  UserSetup."Seccion Diario Salida";
      Libro   :=  UserSetup."Output Jnal Template Name";
      }
      UserSetup.TESTFIELD("Output Jnal Temp Name Quality");
      UserSetup.TESTFIELD("Seccion Diario Salida Quality");
      Seccion :=  UserSetup."Seccion Diario Salida Quality";
      Libro   :=  UserSetup."Output Jnal Temp Name Quality";



      EVALUATE(Qty,Qty1);

      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrdNo);
      LocationCode:= ProductionOrder."Location Code";
      BinCode     := ProductionOrder."Bin Code";

      ProdOrderLine.SETCURRENTKEY(Status,"Prod. Order No.","Line No.");
      ProdOrderLine.GET(ProductionOrder.Status,ProductionOrder."No.",10000);
      {
      IF ProdOrderLine."Remaining Quantity" < Qty THEN
        ERROR('La Cantidad a ingresar %1,  es mayor a la cantidad Pendiente de la OP %2',Qty,ProdOrderLine."Remaining Quantity");
        }
      ProdOrderRoutingLine.RESET;
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No."       ,ProdOrdNo);
      ProdOrderRoutingLine.SETRANGE("Routing Reference No." ,10000);
      ProdOrderRoutingLine.SETFILTER("No."                  ,'<>%1','SECADO');
      ProdOrderRoutingLine.FINDSET;

      {
      ItemLedgerEntry.SETCURRENTKEY("External Document No.","Item No.","Location Code","Lot No.");
      ItemLedgerEntry.SETRANGE("External Document No.",EntryLabel);
      ItemLedgerEntry.SETRANGE("Item No."             ,NoPrd);
      ItemLedgerEntry.SETRANGE("Location Code"        ,LocationCode);
      ItemLedgerEntry.SETRANGE("Lot No."              ,NoLot);
      ItemLedgerEntry.SETFILTER("Entry Type"          ,'=%1',ItemLedgerEntry."Entry Type"::Output);
      IF ItemLedgerEntry.FINDSET THEN
        ERROR('Ya Fue Registrada la Etiqueta %1!!',EntryLabel);
        }


      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name",Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJrnline1.RESET;
      ItmJrnline1.SETRANGE("Journal Template Name",Libro);
      ItmJrnline1.SETRANGE("Journal Batch Name"   ,Seccion);
      ItmJrnline1.SETRANGE("Order No."            ,ProdOrdNo);
      ItmJrnline1.SETRANGE("External Document No.",EntryLabel);
      IF NOT ItmJrnline1. FINDSET THEN BEGIN
        ItmJournalLine.RESET;
        ItmJournalLine.INIT;
        ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
        ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
        ItmJournalLine."Line No."                       :=Line;
        CodO.GET(Libro);
        ItmJournalLine.VALIDATE("Posting Date"          ,WORKDATE);
        ItmJournalLine.VALIDATE("Entry Type"            ,ItmJournalLine."Entry Type" ::Output);
        ItmJournalLine.VALIDATE("Order No."             ,ProdOrdNo);
        ItmJournalLine.VALIDATE("Item No."              ,NoPrd);
        ItmJournalLine.VALIDATE("Operation No."         ,ProdOrderRoutingLine."Operation No.");
        ItmJournalLine."Source Code"                    := CodO."Source Code";
        ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
        ItmJournalLine."Location Code"                  :=LocationCode;
        ItmJournalLine."Bin Code"                       :=BinCode;
        ItmJournalLine."External Document No."          :=EntryLabel;
        LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
        ItmJournalLine.INSERT(TRUE);

        //>>Modifica Qty
        ItmJrnline2.RESET;
        ItmJrnline2.GET(ItmJournalLine."Journal Template Name",ItmJournalLine."Journal Batch Name",ItmJournalLine."Line No.");
        ItmJrnline2.VALIDATE("Output Quantity",-Qty);
        IF ItmJrnline2.MODIFY(TRUE) THEN BEGIN
          EVALUATE(LabelNo,EntryLabel);
          AssignLotJrnalSalidasCancel(ItmJrnline2,NoLot,-Qty,EntryLabel);
          //LiberateLabelReadedBuffer('CALIDAD',LabelNo);
          //ControlTrackingLabel(EntryLabel,'CANCEL',ItmJrnline2,'',LocationCode,BinCode,-Qty,6);

          IF (ManufacturingSetup."Posting OutPut Jrnal Aut." = TRUE) THEN BEGIN
            ControlTrackingLabel(EntryLabel,'CANCEL',ItmJrnline2,'',LocationCode,BinCode,Qty,6);
            IF PostingJrnalSalida(ItmJrnline2) THEN
              EXIT(TRUE)
            ELSE
              EXIT(FALSE)
          END;

        END;
      END
      ELSE BEGIN
        ERROR('YA EXISTE LA ETIQUETA EN EL DIARIO');
      END;
    END;

    PROCEDURE DiarioConsignacion@1102401010(ItemNo@1102401001 : Code[30];CodAlmDest@1102401004 : Code[30];CodUbiDest@1102401005 : Code[30];NoLot@1102401016 : Code[30];Qty1@1102401006 : Code[30];CodAuditoria@1102401015 : Code[30];EntryLabel@1102401017 : Code[20];PhysicalLocation@1102401024 : Code[60]) : Boolean;
    VAR
      ItemJournalLine@1102401007 : Record 83;
      ItemJrnlLine2@1102401008 : Record 83;
      LineNo@1102401009 : Integer;
      Libro@1102401011 : Code[50];
      Seccion@1102401010 : Code[50];
      Qty@1102401012 : Decimal;
      ItemJrnlBatch@1102401013 : Record 233;
      ItemJnlTemplate@1102401014 : Record 82;
      ItemCrossRef@1102401018 : Record 5717;
      Cust@1102401019 : Record 18;
      ItemJnlLine@1102401021 : Record 83;
      CodAlmOrig@1102401003 : Code[30];
      CodUbiOrig@1102401002 : Code[30];
      LocationCode@1102401020 : Code[30];
      BinCode@1102401022 : Code[30];
      Qty2@1102401023 : Decimal;
      DocNo@1102401027 : Code[30];
      ItemJnlBatch@1102401026 : Record 233;
      NoSeriesMgt@1102401025 : Codeunit 396;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Consign");
      UserSetup.TESTFIELD("Journal Batch Name Consign");
      Libro   :=UserSetup."Journal Template Name Consign";
      Seccion :=UserSetup."Journal Batch Name Consign";
      EVALUATE(Qty,Qty1);


      ItemJnlBatch.GET(Seccion,Libro);
      DocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",WORKDATE,TRUE);
      CLEAR(NoSeriesMgt);





      //>>ATX                                                                                                 |
      ItemCrossRef.RESET;
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
      ItemCrossRef.SETRANGE("Item No.",ItemNo);
      IF ItemCrossRef.FINDSET THEN;

      Cust.RESET;
      Cust.GET(ItemCrossRef."Cross-Reference Type No.");
      IF Cust.Consignation= FALSE THEN
        ERROR('Producto %1 No Configurado para Consignacion',ItemNo);

      ItemJnlPost.CheckItemsPTCons(ItemNo,ItemCrossRef."Cross-Reference Type No.");
      //<<ATX

      ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlmOrig,CodUbiOrig);

      ItemJnlTemplate.GET(Libro);
      ItemJrnlLine2.RESET;
      ItemJrnlLine2.SETRANGE("Journal Template Name",Libro);
      ItemJrnlLine2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJrnlLine2.FINDLAST THEN
        LineNo:= ItemJrnlLine2."Line No."+10000
      ELSE
        LineNo :=10000;



      ItemJrnlBatch.GET(Libro,Seccion);
      ItemJrnlBatch.TESTFIELD("Default Location Code");
      ItemJrnlBatch.TESTFIELD("Default Bin Code");

      ItemJnlLine.RESET;
      ItemJnlLine.SETRANGE("Journal Template Name",Libro);
      ItemJnlLine.SETRANGE("Journal Batch Name"   ,Seccion);
      ItemJnlLine.SETFILTER("Item No."            ,ItemNo);
      ItemJnlLine.SETRANGE("Location Code"        ,ItemJrnlBatch."Default Location Code");
      ItemJnlLine.SETRANGE("Bin Code"             ,ItemJrnlBatch."Default Bin Code");
      //ItemJnlLine.SETFILTER("Line No.",'<>%1',LineNo);
      IF NOT ItemJnlLine.FINDSET THEN BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name"  ,Libro);
        ItemJournalLine.VALIDATE("Journal Batch Name"     ,Seccion);
        ItemJournalLine.VALIDATE("Line No."               ,LineNo);
        ItemJournalLine."Entry Type"                      :=ItemJournalLine."Entry Type"::Transfer;
        ItemJournalLine.VALIDATE("Source Code"            ,ItemJnlTemplate."Source Code");
        ItemJournalLine."Document No."                    :=ValidateNextDocNo(ItemJournalLine);

        ItemJournalLine.VALIDATE("Posting Date"           ,WORKDATE);
        ItemJournalLine.VALIDATE("Item No."               ,ItemNo);
        ItemJournalLine.VALIDATE("Location Code"          ,ItemJrnlBatch."Default Location Code");
        ItemJournalLine.VALIDATE("Bin Code"               ,ItemJrnlBatch."Default Bin Code");
        ItemJournalLine.VALIDATE("New Location Code"      ,CodAlmDest);
        ItemJournalLine.VALIDATE("New Bin Code"           ,CodUbiDest);
        ItemJournalLine.VALIDATE(Quantity                 ,Qty);
        ItemJournalLine.VALIDATE("Reason Code"            ,CodAuditoria);
        LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
        ItemJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJournalLine.INSERT THEN BEGIN
          //COMMIT;
          AsigStatusLabel(EntryLabel,'CONSIGNACION');
          ControlTrackingLabel(EntryLabel,'CONSIGNACION',ItemJournalLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,8);
          IF AssignLotJrnalConsign(ItemJournalLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Consign Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalConsign(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        Qty2 :=0;
        Qty2 :=ItemJnlLine.Quantity+Qty;
        ItemJnlLine.VALIDATE(Quantity ,Qty2);
        ItemJnlLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJnlLine.MODIFY THEN BEGIN
          //COMMIT;
          AsigStatusLabel(EntryLabel,'CONSIGNACION');
          ControlTrackingLabel(EntryLabel,'CONSIGNACION',ItemJnlLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,8);
          IF AssignLotJrnalConsign(ItemJnlLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Consign Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalConsign(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE DiarioConsignacionInt@1102401082(ItemNo@1102401001 : Code[30];CodAlmDest@1102401004 : Code[30];CodUbiDest@1102401005 : Code[30];NoLot@1102401016 : Code[30];Qty1@1102401006 : Code[30];CodAuditoria@1102401015 : Code[30];EntryLabel@1102401017 : Code[20];PhysicalLocation@1102401024 : Code[60];VAR ItemJournalLineRtn@1102401025 : Record 83) : Boolean;
    VAR
      ItemJournalLine@1102401007 : Record 83;
      ItemJrnlLine2@1102401008 : Record 83;
      LineNo@1102401009 : Integer;
      Libro@1102401011 : Code[50];
      Seccion@1102401010 : Code[50];
      Qty@1102401012 : Decimal;
      ItemJrnlBatch@1102401013 : Record 233;
      ItemJnlTemplate@1102401014 : Record 82;
      ItemCrossRef@1102401018 : Record 5717;
      Cust@1102401019 : Record 18;
      ItemJnlLine@1102401021 : Record 83;
      CodAlmOrig@1102401003 : Code[30];
      CodUbiOrig@1102401002 : Code[30];
      LocationCode@1102401020 : Code[30];
      BinCode@1102401022 : Code[30];
      Qty2@1102401023 : Decimal;
      DocNo@1102401028 : Code[30];
      ItemJnlBatch@1102401027 : Record 233;
      NoSeriesMgt@1102401026 : Codeunit 396;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Consign");
      UserSetup.TESTFIELD("Journal Batch Name Consign");
      Libro   :=UserSetup."Journal Template Name Consign";
      Seccion :=UserSetup."Journal Batch Name Consign";
      EVALUATE(Qty,Qty1);

      CLEAR(DocNo);
      CLEAR(NoSeriesMgt);
      ItemJnlBatch.GET(Libro,Seccion);
      DocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",WORKDATE,FALSE);



      //>>ATX
      ItemCrossRef.RESET;
      ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
      ItemCrossRef.SETRANGE("Item No.",ItemNo);
      IF ItemCrossRef.FINDSET THEN;

      Cust.RESET;
      Cust.GET(ItemCrossRef."Cross-Reference Type No.");
      IF Cust.Consignation= FALSE THEN
        ERROR('Producto %1 No Configurado para Consignacion',ItemNo);

      ItemJnlPost.CheckItemsPTCons(ItemNo,ItemCrossRef."Cross-Reference Type No.");
      //<<ATX

      ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlmOrig,CodUbiOrig);

      ItemJnlTemplate.GET(Libro);
      ItemJrnlLine2.RESET;
      ItemJrnlLine2.SETRANGE("Journal Template Name",Libro);
      ItemJrnlLine2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJrnlLine2.FINDLAST THEN
        LineNo:= ItemJrnlLine2."Line No."+10000
      ELSE
        LineNo :=10000;

      ItemJrnlBatch.GET(Libro,Seccion);
      ItemJrnlBatch.TESTFIELD("Default Location Code");
      ItemJrnlBatch.TESTFIELD("Default Bin Code");

      ItemJnlLine.RESET;
      ItemJnlLine.SETRANGE("Journal Template Name",Libro);
      ItemJnlLine.SETRANGE("Journal Batch Name"   ,Seccion);
      ItemJnlLine.SETFILTER("Item No."            ,ItemNo);
      ItemJnlLine.SETRANGE("Location Code"        ,ItemJrnlBatch."Default Location Code");
      ItemJnlLine.SETRANGE("Bin Code"             ,ItemJrnlBatch."Default Bin Code");
      //ItemJnlLine.SETFILTER("Line No.",'<>%1',LineNo);
      IF NOT ItemJnlLine.FINDSET THEN BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name"  ,Libro);
        ItemJournalLine.VALIDATE("Journal Batch Name"     ,Seccion);
        ItemJournalLine.VALIDATE("Line No."               ,LineNo);
        ItemJournalLine."Entry Type"                      :=ItemJournalLine."Entry Type"::Transfer;
        ItemJournalLine.VALIDATE("Source Code"            ,ItemJnlTemplate."Source Code");
        //ItemJournalLine."Document No."                    :=ValidateNextDocNo(ItemJournalLine);
        ItemJournalLine."Document No."                    :=DocNo;
        ItemJournalLine.VALIDATE("Posting Date"           ,WORKDATE);
        ItemJournalLine.VALIDATE("Item No."               ,ItemNo);
        ItemJournalLine.VALIDATE("Location Code"          ,ItemJrnlBatch."Default Location Code");
        ItemJournalLine.VALIDATE("Bin Code"               ,ItemJrnlBatch."Default Bin Code");
        ItemJournalLine.VALIDATE("New Location Code"      ,CodAlmDest);
        ItemJournalLine.VALIDATE("New Bin Code"           ,CodUbiDest);
        ItemJournalLine.VALIDATE(Quantity                 ,Qty);
        ItemJournalLine.VALIDATE("Reason Code"            ,CodAuditoria);
        LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
        ItemJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJournalLine.INSERT THEN BEGIN
          ItemJournalLineRtn :=ItemJournalLine;
          //COMMIT;
          AsigStatusLabel(EntryLabel,'CONSIGNACION');
          ControlTrackingLabel(EntryLabel,'CONSIGNACION',ItemJournalLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,8);
          IF AssignLotJrnalConsign(ItemJournalLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Consign Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalConsign(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        Qty2 :=0;
        Qty2 :=ItemJnlLine.Quantity+Qty;
        ItemJnlLine.VALIDATE(Quantity ,Qty2);
        ItemJnlLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJnlLine.MODIFY THEN BEGIN
      //    COMMIT;
          ItemJournalLineRtn :=ItemJnlLine;
          AsigStatusLabel(EntryLabel,'CONSIGNACION');
          ControlTrackingLabel(EntryLabel,'CONSIGNACION',ItemJnlLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,8);
          IF AssignLotJrnalConsign(ItemJnlLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Consign Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalConsign(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE DiarioInventarios@1102401040(PostingDate@1102401027 : Date;NextDocNo@1102401018 : Code[30];NoPrd@1102401003 : Code[30];CodAlm@1102401021 : Code[30];CodUbic@1102401020 : Code[30];PhysInvQuantity@1102401006 : Decimal;Qty1@1102401002 : Decimal;VAR TrnItemJournalLine@1102401001 : Record 83) : Boolean;
    VAR
      CodO@1102401004 : Record 82;
      TmpItmJrnL@1102401005 : Record 83;
      Libro@1102401009 : Code[50];
      Seccion@1102401008 : Code[50];
      Qty@1102401007 : Decimal;
      ItmJrnline1@1102401019 : Record 83;
      ItmJrnline2@1102401011 : Record 83;
      ItmJrnline3@1102401017 : Record 83;
      Line@1102401010 : Integer;
      ItmJournalLine@1102401012 : Record 83;
      TmpReservationEntry@1102401013 : Record 337;
      ReservEntry2@1102401014 : Record 337;
      ReservEntry@1102401015 : Record 337;
      MovNo@1102401016 : Integer;
      BinContent@1102401022 : Record 7302;
      SourceCodeSetup@1102401023 : Record 242;
      ItemJnlTemplate@1102401024 : Record 82;
      ItemJnlBatch@1102401025 : Record 233;
      ItemLedgEntry@1102401026 : Record 32;
      Qty2@1102401028 : Decimal;
    BEGIN
      SourceCodeSetup.GET('');
      ManufacturingSetup.GET('');
      ManufacturingSetup.TESTFIELD("Journal Template Name Stock");
      ManufacturingSetup.TESTFIELD("Journal Batch Name Stock");
      Libro     :=  ManufacturingSetup."Journal Template Name Stock";
      Seccion   :=  ManufacturingSetup."Journal Batch Name Stock";

      Qty:=Qty1;

      ItemJnlTemplate.GET(Libro);
      ItemJnlBatch.GET(Libro,Seccion);
      //ConsultLotNo(EntryLabel,NoPrd,NoLot,qty,);

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJournalLine.INIT;
      ItmJournalLine.VALIDATE("Journal Template Name" ,  Libro);
      ItmJournalLine.VALIDATE("Journal Batch Name"    ,  Seccion);
      ItmJournalLine."Line No."                       := Line;
      ItmJournalLine.VALIDATE("Posting Date"          ,  PostingDate);
      IF PhysInvQuantity >= Qty THEN
        ItmJournalLine.VALIDATE("Entry Type"          ,  ItmJournalLine."Entry Type"::"Positive Adjmt.")
      ELSE
        ItmJournalLine.VALIDATE("Entry Type"          ,  ItmJournalLine."Entry Type"::"Negative Adjmt.");
      ItmJournalLine.VALIDATE("Document No."          ,  NextDocNo);
      ItmJournalLine.VALIDATE("Item No."              ,  NoPrd);
      ItmJournalLine.VALIDATE("Location Code"         ,  CodAlm);
      ItmJournalLine.VALIDATE("Bin Code"              ,  CodUbic);
      ItmJournalLine.VALIDATE("Source Code"           ,  SourceCodeSetup."Phys. Inventory Journal");
      ItmJournalLine."Qty. (Phys. Inventory)"         :=  Qty;
      ItmJournalLine."Phys. Inventory"                := TRUE;
      ItmJournalLine.VALIDATE("Qty. (Calculated)"     ,PhysInvQuantity);
      ItmJournalLine."Posting No. Series"             := ItemJnlBatch."Posting No. Series";
      ItmJournalLine."Reason Code"                    := ItemJnlBatch."Reason Code";
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",NoPrd);
      IF ItemLedgEntry.FINDLAST THEN
        ItmJournalLine."Last Item Ledger Entry No." := ItemLedgEntry."Entry No."
      ELSE
        ItmJournalLine."Last Item Ledger Entry No." := 0;
      IF ItmJournalLine.INSERT(TRUE) THEN BEGIN
        TrnItemJournalLine := ItmJournalLine;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DiarioReclass@1102401027(ItemNo@1102401001 : Code[30];CodAlmDest@1102401004 : Code[30];CodUbiDest@1102401005 : Code[30];NoLot@1102401016 : Code[30];Qty1@1102401006 : Code[30];CodAuditoria@1102401015 : Code[30];EntryLabel@1102401017 : Code[20];PhysicalLocation@1102401020 : Code[60];AlmOrigen@1102401024 : Code[30];UbiOrigen@1102401025 : Code[30]) : Boolean;
    VAR
      ItemJournalLine@1102401007 : Record 83;
      ItemJrnlLine2@1102401008 : Record 83;
      LineNo@1102401009 : Integer;
      Libro@1102401011 : Code[50];
      Seccion@1102401010 : Code[50];
      Qty@1102401012 : Decimal;
      ItemJrnlBatch@1102401013 : Record 233;
      ItemJnlTemplate@1102401014 : Record 82;
      CodAlmOrig@1102401003 : Code[30];
      CodUbiOrig@1102401002 : Code[30];
      LocationCode@1102401018 : Code[30];
      BinCode@1102401019 : Code[30];
      ItemJnlLine@1102401021 : Record 83;
      Qty2@1102401022 : Decimal;
      QtyLoteExit@1102401023 : Decimal;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Reclass");
      UserSetup.TESTFIELD("Journal Batch Name Reclass");
      Libro   :=UserSetup."Journal Template Name Reclass";
      Seccion :=UserSetup."Journal Batch Name Reclass";
      EVALUATE(Qty,Qty1);

      IF (AlmOrigen = '') THEN
        ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlmOrig,CodUbiOrig)
      ELSE BEGIN
        CodAlmOrig :=AlmOrigen;
        CodUbiOrig :=UbiOrigen;
      END;

      LocationCode :=CodAlmDest;
      BinCode      :=CodUbiDest;
      QtyLoteExit :=ConsultExistLotNo(ItemNo,NoLot,CodAlmOrig,CodUbiOrig);
      IF QtyLoteExit <= 0 THEN
        ERROR('Lote No Disponible!! %1, %2',NoLot,ItemNo);

      ItemJnlTemplate.GET(Libro);

      ItemJrnlLine2.RESET;
      ItemJrnlLine2.SETRANGE("Journal Template Name",Libro);
      ItemJrnlLine2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJrnlLine2.FINDLAST THEN
        LineNo:= ItemJrnlLine2."Line No."+10000
      ELSE
        LineNo :=10000;

      ItemJnlLine.RESET;
      ItemJnlLine.SETRANGE("Journal Template Name",Libro);
      ItemJnlLine.SETRANGE("Journal Batch Name"   ,Seccion);
      ItemJnlLine.SETFILTER("Item No."            ,ItemNo);
      ItemJnlLine.SETRANGE("Location Code"        ,CodAlmOrig);
      ItemJnlLine.SETRANGE("Bin Code"             ,CodUbiOrig);
      ItemJnlLine.SETRANGE("New Location Code"    ,CodAlmDest);
      ItemJnlLine.SETRANGE("New Bin Code"         ,CodUbiDest);
      IF NOT ItemJnlLine.FINDSET THEN BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name"  ,Libro);
        ItemJournalLine.VALIDATE("Journal Batch Name"     ,Seccion);
        ItemJournalLine.VALIDATE("Line No."               ,LineNo);
        ItemJournalLine."Entry Type"                      :=ItemJournalLine."Entry Type"::Transfer;
        ItemJournalLine.VALIDATE("Source Code"            ,ItemJnlTemplate."Source Code");
        ItemJournalLine."Document No."                    :=ValidateNextDocNo(ItemJournalLine);
        ItemJournalLine.VALIDATE("Posting Date"           ,WORKDATE);
        ItemJournalLine.VALIDATE("Item No."               ,ItemNo);
        ItemJournalLine.VALIDATE("Location Code"          ,CodAlmOrig);
        ItemJournalLine.VALIDATE("Bin Code"               ,CodUbiOrig);
        ItemJournalLine.VALIDATE("New Location Code"      ,CodAlmDest);
        ItemJournalLine.VALIDATE("New Bin Code"           ,CodUbiDest);
        ItemJournalLine.VALIDATE(Quantity                 ,Qty);
        ItemJournalLine.VALIDATE("Reason Code"            ,CodAuditoria);
        LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
        ItemJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJournalLine.INSERT THEN BEGIN
        //  COMMIT;
          AsigStatusLabel(EntryLabel,'TRASPASOS');
          ControlTrackingLabel(EntryLabel,'TRASPASOS',ItemJournalLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,5);
          IF AssignLotJrnalConsign(ItemJournalLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Reclass Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalTransfer(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        Qty2 :=0;
        Qty2 :=ItemJnlLine.Quantity+Qty;
        ItemJnlLine.VALIDATE(Quantity ,Qty2);
        ItemJnlLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJnlLine.MODIFY(TRUE) THEN BEGIN
      //    COMMIT;
          AsigStatusLabel(EntryLabel,'TRASPASOS');
          ControlTrackingLabel(EntryLabel,'TRASPASOS',ItemJnlLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,5);
          IF AssignLotJrnalConsign(ItemJnlLine,NoLot,Qty) THEN BEGIN
            IF (ManufacturingSetup."Posting Reclass Jrnal Aut." = TRUE) THEN BEGIN
              IF PostingJrnalTransfer(EntryLabel) THEN
                EXIT(TRUE)
              ELSE
                EXIT(FALSE)
            END ELSE
              EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE DiarioScrap@1102401143(ItemNo@1102401001 : Code[30];CodAlmDest@1102401004 : Code[30];CodUbiDest@1102401005 : Code[30];NoLot@1102401016 : Code[30];Qty1@1102401006 : Code[30];CodAuditoria@1102401015 : Code[30];EntryLabel@1102401017 : Code[20];PhysicalLocation@1102401020 : Code[60]) : Boolean;
    VAR
      ItemJournalLine@1102401007 : Record 83;
      ItemJrnlLine2@1102401008 : Record 83;
      LineNo@1102401009 : Integer;
      Libro@1102401011 : Code[50];
      Seccion@1102401010 : Code[50];
      Qty@1102401012 : Decimal;
      ItemJrnlBatch@1102401013 : Record 233;
      ItemJnlTemplate@1102401014 : Record 82;
      CodAlmOrig@1102401003 : Code[30];
      CodUbiOrig@1102401002 : Code[30];
      LocationCode@1102401018 : Code[30];
      BinCode@1102401019 : Code[30];
      ItemJnlLine@1102401021 : Record 83;
      Qty2@1102401022 : Decimal;
      QtyLoteExit@1102401023 : Decimal;
    BEGIN

      //>>Desbloqueo Lote
      EditLotNoInfo(ItemNo,NoLot,FALSE);

      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Reclass");
      UserSetup.TESTFIELD("Journal Batch Name Reclass");
      Libro   :=UserSetup."Journal Template Name Reclass";
      Seccion :='SCRAP';
      EVALUATE(Qty,Qty1);

      ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlmOrig,CodUbiOrig);
      LocationCode :=CodAlmDest;
      BinCode      :=CodUbiDest;

      QtyLoteExit :=ConsultExistLotNo(ItemNo,NoLot,CodAlmOrig,CodUbiOrig);
      IF QtyLoteExit <= 0 THEN
        ERROR('Lote No Disponible!! %1, %2',NoLot,ItemNo);

      ItemJnlTemplate.GET(Libro);

      ItemJrnlLine2.RESET;
      ItemJrnlLine2.SETRANGE("Journal Template Name",Libro);
      ItemJrnlLine2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJrnlLine2.FINDLAST THEN
        LineNo:= ItemJrnlLine2."Line No."+10000
      ELSE
        LineNo :=10000;

      ItemJnlLine.RESET;
      ItemJnlLine.SETRANGE("Journal Template Name",Libro);
      ItemJnlLine.SETRANGE("Journal Batch Name"   ,Seccion);
      ItemJnlLine.SETFILTER("Item No."            ,ItemNo);
      ItemJnlLine.SETRANGE("Location Code"        ,CodAlmOrig);
      ItemJnlLine.SETRANGE("Bin Code"             ,CodUbiOrig);
      ItemJnlLine.SETRANGE("New Location Code"    ,CodAlmDest);
      ItemJnlLine.SETRANGE("New Bin Code"         ,CodUbiDest);
      IF NOT ItemJnlLine.FINDSET THEN BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.INIT;
        ItemJournalLine.VALIDATE("Journal Template Name"  ,Libro);
        ItemJournalLine.VALIDATE("Journal Batch Name"     ,Seccion);
        ItemJournalLine.VALIDATE("Line No."               ,LineNo);
        ItemJournalLine."Entry Type"                      :=ItemJournalLine."Entry Type"::Transfer;
        ItemJournalLine.VALIDATE("Source Code"            ,ItemJnlTemplate."Source Code");
        ItemJournalLine."Document No."                    :=ValidateNextDocNo(ItemJournalLine);
        ItemJournalLine.VALIDATE("Posting Date"           ,WORKDATE);
        ItemJournalLine.VALIDATE("Item No."               ,ItemNo);
        ItemJournalLine.VALIDATE("Location Code"          ,CodAlmOrig);
        ItemJournalLine.VALIDATE("Bin Code"               ,CodUbiOrig);
        ItemJournalLine.VALIDATE("New Location Code"      ,CodAlmDest);
        ItemJournalLine.VALIDATE("New Bin Code"           ,CodUbiDest);
        ItemJournalLine.VALIDATE(Quantity                 ,Qty);
        ItemJournalLine.VALIDATE("Reason Code"            ,CodAuditoria);
        LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
        ItemJournalLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJournalLine.INSERT THEN BEGIN
        //  COMMIT;
          AsigStatusLabel(EntryLabel,'TRASPASOS');
          ControlTrackingLabel(EntryLabel,'TRASPASOS',ItemJournalLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,5);
          AssignLotJrnalConsign(ItemJournalLine,NoLot,Qty);
          IF ManufacturingSetup."Posting Journal Scrap" THEN
            PostingJrnalScrap(EntryLabel);
            EXIT(TRUE);
        END ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        Qty2 :=0;
        Qty2 :=ItemJnlLine.Quantity+Qty;
        ItemJnlLine.VALIDATE(Quantity ,Qty2);
        ItemJnlLine.VALIDATE("External Document No." ,EntryLabel);
        IF ItemJnlLine.MODIFY(TRUE) THEN BEGIN
      //    COMMIT;
          AsigStatusLabel(EntryLabel,'TRASPASOS');
          ControlTrackingLabel(EntryLabel,'TRASPASOS',ItemJnlLine,PhysicalLocation,CodAlmDest,CodUbiDest,Qty,5);
          IF AssignLotJrnalConsign(ItemJnlLine,NoLot,Qty) THEN BEGIN
            IF ManufacturingSetup."Posting Journal Scrap" THEN
              PostingJrnalScrap(EntryLabel);
            EXIT(TRUE);
          END ELSE
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE DiarioCuarentena@1102401033(ItemNo@1102401001 : Code[30];NoLot@1102401016 : Code[30];Qty1@1102401006 : Code[30];CodAuditoria@1102401015 : Code[30];EntryLabel@1102401017 : Code[20]) : Boolean;
    VAR
      ItemJournalLine@1102401007 : Record 83;
      ItemJrnlLine2@1102401008 : Record 83;
      LineNo@1102401009 : Integer;
      Libro@1102401011 : Code[50];
      Seccion@1102401010 : Code[50];
      Qty@1102401012 : Decimal;
      ItemJrnlBatch@1102401013 : Record 233;
      ItemJnlTemplate@1102401014 : Record 82;
      CodAlmOrig@1102401003 : Code[30];
      CodUbiOrig@1102401002 : Code[30];
      CodAlmDest@1102401005 : Code[30];
      CodUbiDest@1102401004 : Code[30];
      LocationCode@1102401018 : Code[30];
      BinCode@1102401019 : Code[30];
      LabelNo1@1102401020 : Integer;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Reclass");
      UserSetup.TESTFIELD("Journal Batch Name Reclass");
      Libro   :=UserSetup."Journal Template Name Reclass";
      Seccion :=UserSetup."Journal Batch Name Reclass";
      EVALUATE(Qty,Qty1);

      ManufacturingSetup.GET('');
      ManufacturingSetup.TESTFIELD("Location Cuarenten Code");
      ManufacturingSetup.TESTFIELD("Bin Code Cuarenten");
      CodAlmDest  :=ManufacturingSetup."Location Cuarenten Code";
      CodUbiDest  :=ManufacturingSetup."Bin Code Cuarenten";
      LocationCode:=ManufacturingSetup."Location Cuarenten Code";
      BinCode     :=ManufacturingSetup."Bin Code Cuarenten";

      ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlmOrig,CodUbiOrig);
      ItemJnlTemplate.GET(Libro);

      ItemJrnlLine2.RESET;
      ItemJrnlLine2.SETRANGE("Journal Template Name",Libro);
      ItemJrnlLine2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJrnlLine2.FINDLAST THEN
        LineNo:= ItemJrnlLine2."Line No."+10000
      ELSE
        LineNo :=10000;

      ItemJournalLine.RESET;
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name"  ,Libro);
      ItemJournalLine.VALIDATE("Journal Batch Name"     ,Seccion);
      ItemJournalLine.VALIDATE("Line No."               ,LineNo);
      ItemJournalLine."Entry Type"                      :=ItemJournalLine."Entry Type"::Transfer;
      ItemJournalLine.VALIDATE("Source Code"            ,ItemJnlTemplate."Source Code");
      ItemJournalLine."Document No."                    :=ValidateNextDocNo(ItemJournalLine);
      ItemJournalLine.VALIDATE("Posting Date"           ,WORKDATE);
      ItemJournalLine.VALIDATE("Item No."               ,ItemNo);
      ItemJournalLine.VALIDATE("Location Code"          ,CodAlmOrig);
      ItemJournalLine.VALIDATE("Bin Code"               ,CodUbiOrig);
      ItemJournalLine.VALIDATE("New Location Code"      ,CodAlmDest);
      ItemJournalLine.VALIDATE("New Bin Code"           ,CodUbiDest);
      ItemJournalLine.VALIDATE(Quantity                 ,Qty);
      ItemJournalLine.VALIDATE("Reason Code"            ,CodAuditoria);
      LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
      ItemJournalLine.VALIDATE("External Document No." ,EntryLabel);
      IF ItemJournalLine.INSERT THEN BEGIN
       // COMMIT;
        AsigStatusLabel(EntryLabel,'CUARENTENA');
        ControlTrackingLabel(EntryLabel,'CUARENTENA',ItemJournalLine,'CUARENTENA',CodAlmDest,CodUbiDest,Qty,5);
        AssignLotJrnalConsign(ItemJournalLine,NoLot,Qty);
        IF (ManufacturingSetup."Posting Reclass Jrnal Aut." = TRUE) THEN BEGIN
          IF PostingJrnalTransfer(EntryLabel) THEN BEGIN
            EditLotNoInfo(ItemNo,NoLot,TRUE);
            EVALUATE(LabelNo1,EntryLabel);
            LabelLedgerEntry.RESET;
            LabelLedgerEntry.GET(LabelNo1);
            LabelLedgerEntry."Quality Control" := LabelLedgerEntry."Quality Control"::"Bloqueado Calidad";
            LabelLedgerEntry.MODIFY;
            EXIT(TRUE);
          END
          ELSE
            EXIT(FALSE)
        END
        ELSE
        EXIT(FALSE);
      END;
    END;

    PROCEDURE PreInventario@1102401022(ItemNo@1102401006 : Code[30];Qty1@1102401003 : Code[30];NoLot@1102401002 : Code[30];EntryLabel@1102401001 : Code[20];PhysicalLocation@1102401022 : Code[60];InvPhysCode@1102401026 : Code[50];LocationCode@1102401027 : Code[30];BinCode@1102401028 : Code[30]) : Boolean;
    VAR
      PreInventaryAux@1102401016 : Record 50061;
      Item@1102401010 : Record 27;
      Qty@1102401011 : Decimal;
      NoLabel@1102401012 : Integer;
      LabelLedgerEntry@1102401013 : Record 50011;
      CodAlm@1102401005 : Code[30];
      CodUbic@1102401004 : Code[30];
      LedgerEntryTrackingLotNo@1102401015 : Record 50065;
      LedgerEntryTrackingLotNo2@1102401017 : Record 50065;
      TmpTrackingLotNo@1102401018 : Record 50065;
      WarehouseEntry@1102401020 : Record 7312;
      PhysInvQuantity@1102401021 : Decimal;
      PreInventary@1102401023 : Record 50066;
      InventaryRec@1102401014 : Record 50066;
      InventatyTmp@1102401025 : Record 50066;
      EntryNo2@1102401024 : Integer;
      QtyPhysic@1102401007 : Decimal;
      BinContent@1102401008 : Record 7302;
      BufferTableLabel@1102401009 : Record 50060;
      Item2@1102401019 : Record 27;
    BEGIN
      EVALUATE(Qty,Qty1);
      EVALUATE(NoLabel,EntryLabel);
      LabelLedgerEntry.GET(NoLabel);

      IF PhysicalLocation = '' THEN
      ERROR('Debe Especificar Ubicacion Fisica');

      CodAlm :=LocationCode;
      CodUbic :=BinCode;

      //inserta registros preinventario
      InsertPreInventaryCompl(InvPhysCode,ItemNo);


      WarehouseEntry.SETRANGE("Item No."      ,ItemNo);
      WarehouseEntry.SETRANGE("Location Code" ,CodAlm);
      WarehouseEntry.SETRANGE("Bin Code"      ,CodUbic);
      IF WarehouseEntry.FINDSET THEN BEGIN
        WarehouseEntry.CALCSUMS("Qty. (Base)");
        PhysInvQuantity:=WarehouseEntry."Qty. (Base)";
      END;

      PreInventary.RESET;
      PreInventary.SETRANGE("Item No"       ,ItemNo);
      PreInventary.SETRANGE("Cod. Location" ,CodAlm);
      PreInventary.SETRANGE("Bin Code"      ,CodUbic);
      PreInventary.SETRANGE("Inventory Code",InvPhysCode);
      IF NOT PreInventary.FINDSET THEN BEGIN
        InventatyTmp.RESET;
        IF InventatyTmp.FINDLAST THEN
          EntryNo2 := InventatyTmp."Entry No"+1
        ELSE
          EntryNo2:=1;
        InventaryRec.INIT;
        InventaryRec.VALIDATE("Entry No"      ,EntryNo2);
        InventaryRec.VALIDATE("Item No"       ,ItemNo);
        InventaryRec.VALIDATE("Cod. Location" ,CodAlm);
        InventaryRec.VALIDATE("Bin Code"      ,CodUbic);
        Item.GET(ItemNo);
        InventaryRec.Description              := Item.Description;
        InventaryRec."Posting Date"           := TODAY;
        InventaryRec."User ID"                := USERID;
        InventaryRec."Qty Calculated NAV"     := PhysInvQuantity;
        InventaryRec."Quantity Scan"          := Qty;
        InventaryRec."DataTime Capture"       := CREATEDATETIME(TODAY,TIME);
        InventaryRec."Inventory Code"         := InvPhysCode;
        InventaryRec.INSERT;

        //>>busca lotes en sistema
        SearchLotNo(InventaryRec,ItemNo,CodAlm,CodUbic,InvPhysCode);

        //>>inserta Ubicacion fisica
        PreInventaryAux.RESET;
        PreInventaryAux.SETRANGE("Item No"           ,ItemNo);
        PreInventaryAux.SETRANGE("Cod. Location"     ,CodAlm);
        PreInventaryAux.SETRANGE("Bin Code"          ,CodUbic);
        PreInventaryAux.SETRANGE("Physical Location" ,PhysicalLocation);
        PreInventaryAux.SETRANGE("Label No."         ,NoLabel);
        IF NOT PreInventaryAux.FINDSET THEN BEGIN
          InsertInventaryPhys(EntryNo2,ItemNo,Qty,CodAlm,CodUbic,NoLot,PhysicalLocation,NoLabel,InvPhysCode);
        END
        ELSE BEGIN
          PreInventaryAux."Quantity Scan" += Qty;
          PreInventaryAux.MODIFY;
        END;
        //<<

        //>> inserta Lote Escaneado
        LedgerEntryTrackingLotNo.RESET;
        LedgerEntryTrackingLotNo.SETRANGE("Entry No. Pre-Inventory"     ,InventaryRec."Entry No");
        LedgerEntryTrackingLotNo.SETRANGE("Lot. No."                     ,NoLot);
        LedgerEntryTrackingLotNo.SETFILTER("Sent to Journal Inventary"  ,'=%1',FALSE);
        IF LedgerEntryTrackingLotNo.FINDSET THEN BEGIN
          LedgerEntryTrackingLotNo."Qty Physical" += Qty;
          LedgerEntryTrackingLotNo."Lot  Found Physical":=TRUE;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" = LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=TRUE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=FALSE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=FALSE;
          END;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" > LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=FALSE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=TRUE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=FALSE;
          END;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" < LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=FALSE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=FALSE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=TRUE;
          END;
          LedgerEntryTrackingLotNo.MODIFY;
        END
        ELSE BEGIN
          InsertNoLotInventaty(InventaryRec,Qty,NoLot); //Inserta Lote No encontrado

        END;
        //<<
      END
      ELSE BEGIN
        PreInventary."Quantity Scan" +=Qty;
        PreInventary.MODIFY;

        //>>inserta Ubicacion fisica
        PreInventaryAux.RESET;
        PreInventaryAux.SETRANGE("Item No"           ,ItemNo);
        PreInventaryAux.SETRANGE("Cod. Location"     ,CodAlm);
        PreInventaryAux.SETRANGE("Bin Code"          ,CodUbic);
        PreInventaryAux.SETRANGE("Physical Location" ,PhysicalLocation);
        PreInventaryAux.SETRANGE("Label No."         ,NoLabel);
        IF NOT PreInventaryAux.FINDSET THEN BEGIN
          InsertInventaryPhys(PreInventary."Entry No",ItemNo,Qty,CodAlm,CodUbic,NoLot,PhysicalLocation,NoLabel,InvPhysCode);
        END
        ELSE BEGIN
          PreInventaryAux."Quantity Scan" += Qty;
          PreInventaryAux.MODIFY;
        END;
        //<<

        LedgerEntryTrackingLotNo.RESET;
        LedgerEntryTrackingLotNo.SETRANGE("Entry No. Pre-Inventory"     ,PreInventary."Entry No");
        LedgerEntryTrackingLotNo.SETRANGE("Lot. No."                     ,NoLot);
        LedgerEntryTrackingLotNo.SETFILTER("Sent to Journal Inventary"  ,'=%1',FALSE);
        IF LedgerEntryTrackingLotNo.FINDSET THEN BEGIN
          LedgerEntryTrackingLotNo."Qty Physical" += Qty;
          LedgerEntryTrackingLotNo."Lot  Found Physical":=TRUE;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" = LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=TRUE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=FALSE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=FALSE;
          END;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" > LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=FALSE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=TRUE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=FALSE;
          END;
          IF LedgerEntryTrackingLotNo."Calculated Quantity" < LedgerEntryTrackingLotNo."Qty Physical" THEN BEGIN
            LedgerEntryTrackingLotNo."Full Lot"       :=FALSE;
            LedgerEntryTrackingLotNo."Incomplete Lot"  :=FALSE;
            LedgerEntryTrackingLotNo."Higher Lot"      :=TRUE;
          END;
          LedgerEntryTrackingLotNo.MODIFY;
        END
        ELSE BEGIN
          InsertNoLotInventaty(PreInventary,Qty,NoLot);
        END;
      END;
      LiberateLabelReadedBuffer('INVENTARIO',NoLabel);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InsertLotNoInfo@1102401105(ItemNo@1102401001 : Code[30];LotNo@1102401002 : Code[50]) : Boolean;
    VAR
      LotNoInformation@1102401003 : Record 6505;
      LotNoInformationTmp@1102401004 : Record 6505;
    BEGIN
      LotNoInformationTmp.RESET;
      LotNoInformationTmp.SETRANGE("Item No.",ItemNo);
      LotNoInformationTmp.SETRANGE("Lot No.",LotNo);
      IF NOT LotNoInformationTmp.FINDSET THEN BEGIN
        LotNoInformation.INIT;
        LotNoInformation."Item No." := ItemNo;
        LotNoInformation."Lot No."  := LotNo;
        LotNoInformation.INSERT(TRUE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE BlockedLotNo@1102401113(ProdOrder@1102401009 : Code[30];ItemNo@1102401001 : Code[50];LotNo@1102401002 : Code[50];QtyStr@1102401007 : Code[30];LabelNo@1102401003 : Code[50];Blocked@1102401004 : Boolean) : Boolean;
    VAR
      LabelLedgerEntry@1102401005 : Record 50011;
      LotNoInformation@1102401006 : Record 6505;
      Qty@1102401008 : Decimal;
      LabelNo1@1102401010 : Integer;
    BEGIN
      EVALUATE(LabelNo1,LabelNo);
      //>>entrada de lote a sistema
      IF DiarioSalida(ProdOrder,ItemNo,QtyStr,LotNo,LabelNo) THEN BEGIN

        LabelLedgerEntry.RESET;
        LabelLedgerEntry.GET(LabelNo1);
        IF Blocked THEN BEGIN

          //>>Transferir a Cuarentena
          DiarioCuarentena(LabelLedgerEntry."Source No.",LabelLedgerEntry."Lot. No",FORMAT(LabelLedgerEntry.Quantity),
                           '',FORMAT(LabelLedgerEntry."Entry No."));
          //>>Bloqueo Lotes
          EditLotNoInfo(ItemNo,LotNo,Blocked);
        END
        ELSE BEGIN
          LabelLedgerEntry."Quality Control":= LabelLedgerEntry."Quality Control"::"Liberado Calidad";
          LabelLedgerEntry.MODIFY(TRUE);
        END;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DesBlockedLotNo@1102401123(ProdOrder@1102401009 : Code[30];ItemNo@1102401001 : Code[50];LotNo@1102401002 : Code[50];QtyStr@1102401007 : Code[30];LabelNo@1102401003 : Code[50];Blocked@1102401004 : Boolean;LocationCodeDest@1102401014 : Code[30];BinCodeDest@1102401013 : Code[30];PhysicalLocation@1102401012 : Text[50]) : Boolean;
    VAR
      LabelLedgerEntry@1102401005 : Record 50011;
      LotNoInformation@1102401006 : Record 6505;
      Qty@1102401008 : Decimal;
      LabelNo1@1102401010 : Integer;
      Item@1102401011 : Record 27;
      LastEntry@1102401015 : Integer;
      LabelLedgerEntryTracking@1102401016 : Record 50064;
    BEGIN
      //>>Desbloqueo Lote
      EditLotNoInfo(ItemNo,LotNo,Blocked);

      //>>reclasifica lote de cuarentena
      Item.RESET;
      Item.GET(ItemNo);
      IF DiarioReclass(ItemNo,LocationCodeDest,BinCodeDest,LotNo,QtyStr,'',LabelNo,PhysicalLocation,'','') THEN BEGIN
        EXIT(TRUE);
      END;
    END;

    PROCEDURE EditLotNoInfo@1102401122(ItemNo@1102401002 : Code[30];LotNo@1102401001 : Code[50];Blocked@1102401004 : Boolean);
    VAR
      LotNoInformation@1102401003 : Record 6505;
    BEGIN
      LotNoInformation.RESET;
      LotNoInformation.SETRANGE("Item No."  ,ItemNo);
      LotNoInformation.SETRANGE("Lot No."   ,LotNo);
      IF LotNoInformation.FINDSET THEN BEGIN
        LotNoInformation.Blocked:=Blocked;
        LotNoInformation.MODIFY(TRUE);
      END;
    END;

    PROCEDURE AjustNegtPackingCode@1102401107(ProdOrdNo@1102401007 : Code[20];ItemPackingNo@1102401006 : Code[30];Qty@1102401005 : Decimal;EntryLabel@1102401003 : Integer;CodAuditoria@1102401017 : Code[10];LotNo@1102401018 : Code[30]) : Boolean;
    VAR
      CodO@1102401008 : Record 82;
      ItmJournalLine@1102401004 : Record 83;
      Libro@1102401002 : Code[50];
      Seccion@1102401001 : Code[50];
      ProducOrder@1102401010 : Record 5405;
      ProdOrderLine@1102401011 : Record 5406;
      Item@1102401012 : Record 27;
      LocationCode@1102401013 : Code[30];
      BinCode@1102401014 : Code[30];
      ItmJrnline2@1102401009 : Record 83;
      Line@1102401015 : Integer;
      ItmJrnline1@1102401016 : Record 83;
    BEGIN
      ManufacturingSetup.GET('');
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Jnal Template Name Cons Packi");
      UserSetup.TESTFIELD("Jnal Batch Name Cons Packin");
      Libro   :=UserSetup."Jnal Template Name Cons Packi";
      Seccion :=UserSetup."Jnal Batch Name Cons Packin";

      LabelLedgerEntry.GET(EntryLabel);

      ProducOrder.RESET;
      ProducOrder.SETFILTER(Status,'=%1|%2',ProducOrder.Status::Released,ProducOrder.Status::"Firm Planned");
      ProducOrder.SETRANGE(ProducOrder."No.",ProdOrdNo);
      ProducOrder.FINDSET;

      ProdOrderLine.RESET;
      ProdOrderLine.SETFILTER(Status,'=%1|%2',ProdOrderLine.Status::Released,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrdNo);
      ProdOrderLine.FINDSET;

      Item.GET(ItemPackingNo);
      LocationCode :=Item."Cod. Location Default";
      BinCode      :=Item."Bin Code Default";

      ItmJrnline2.RESET;
      ItmJrnline2.SETRANGE("Journal Template Name",Libro);
      ItmJrnline2.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItmJrnline2.FINDLAST THEN
        Line := ItmJrnline2."Line No." +10000
      ELSE
        Line := 10000;

      ItmJrnline1.RESET;
      ItmJrnline1.SETRANGE("Journal Template Name",Libro);
      ItmJrnline1.SETRANGE("Journal Batch Name"   ,Seccion);
      ItmJrnline1.SETRANGE("Order No."            ,ProducOrder."No.");
      ItmJrnline1.SETRANGE("Item No."             ,Item."No.");
      ItmJrnline1.SETRANGE("Location Code"        ,LocationCode);
      ItmJrnline1.SETRANGE("Bin Code"             ,BinCode);
      IF NOT ItmJrnline1. FINDSET THEN BEGIN
        ItmJournalLine.INIT;
        ItmJournalLine.VALIDATE("Journal Template Name" , Libro);
        ItmJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
        ItmJournalLine."Line No."                       :=Line;
        CodO.GET(Libro);
        ItmJournalLine.VALIDATE("Posting Date"          , TODAY);
        ItmJournalLine.VALIDATE("Entry Type"            , ItmJournalLine."Entry Type" ::Consumption);
        ItmJournalLine.VALIDATE("Order No."             , ProducOrder."No.");
        ItmJournalLine."Source Code"                    :=CodO."Source Code";
        LabelMtg.GeneraTurno(ItmJournalLine."Work Shift Code");
        //ItmJournalLine."Document No."                   :=ValidateNextDocNo(ItmJournalLine);
        ItmJournalLine."Document No."                   :='CONSUMO'+FORMAT(WORKDATE,0,'<day,2>-<Month,2>-<YEAR4>');
        ItmJournalLine.VALIDATE("Item No."              , Item."No.");
        ItmJournalLine.VALIDATE(Quantity                , Qty);
        ItmJournalLine.VALIDATE("Location Code"         , LocationCode);
        ItmJournalLine.VALIDATE("Bin Code"              , BinCode);
        ItmJournalLine.VALIDATE("External Document No." ,FORMAT(EntryLabel));
        IF (CodAuditoria <> '0-') THEN
          ItmJournalLine.VALIDATE("Reason Code"           , CodAuditoria);
        IF ItmJournalLine.INSERT(TRUE) THEN BEGIN
          AssignLotJrnalConsumos(ItmJournalLine,LotNo,Qty);
          IF PostingJrnalConsumo(ItmJournalLine,FORMAT(EntryLabel)) THEN
            EXIT(TRUE)

          ELSE
            EXIT(FALSE);

        END
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE SearchLotNo@1102401047(PreInventaryHH@1102401005 : Record 50066;ItemNo@1102401007 : Code[30];CodAlm@1102401002 : Code[30];CodUbi@1102401001 : Code[30];InventoryCode@1102401006 : Code[50]) : Boolean;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedgerEntry@1102401004 : Record 50011;
      LabelLedEntryTracking@1102401008 : Record 50064;
      EntryNo@1102401009 : Integer;
      LedgerEntryTrackingLotNo@1102401011 : Record 50065;
      TmpTrackingLotNo@1102401012 : Record 50065;
      LedgerEntryTrackingLotNo2@1102401003 : Record 50065;
    BEGIN
      Query1.SETRANGE(Item_No       ,ItemNo);
      Query1.SETRANGE(Location_Code ,CodAlm);
      Query1.SETRANGE(Bin_Code      ,CodUbi);
      Query1.OPEN;
      WHILE Query1.READ DO BEGIN
        LedgerEntryTrackingLotNo2.RESET;
        LedgerEntryTrackingLotNo2.SETRANGE("Entry No. Pre-Inventory",PreInventaryHH."Entry No");
        LedgerEntryTrackingLotNo2.SETRANGE("Lot. No."                ,Query1.Lot_No);
        LedgerEntryTrackingLotNo2.SETRANGE("Calculated Quantity"     ,Query1.Sum_Qty_Base);
        LedgerEntryTrackingLotNo2.SETFILTER("Lot  Found Physical"   ,'=%1',TRUE);
        IF NOT LedgerEntryTrackingLotNo2.FINDSET THEN BEGIN
          TmpTrackingLotNo.RESET;
          IF TmpTrackingLotNo.FINDLAST THEN
            EntryNo := TmpTrackingLotNo."Entry No."+1
          ELSE
            EntryNo :=1;
          LedgerEntryTrackingLotNo.INIT;
          LedgerEntryTrackingLotNo.VALIDATE("Entry No."               ,EntryNo);
          LedgerEntryTrackingLotNo.VALIDATE("Entry No. Pre-Inventory" ,PreInventaryHH."Entry No");
          LedgerEntryTrackingLotNo.VALIDATE("Calculated Quantity"      ,Query1.Sum_Qty_Base);
          LedgerEntryTrackingLotNo.VALIDATE("Lot. No."                 ,Query1.Lot_No);
          LedgerEntryTrackingLotNo.VALIDATE("Posting Date"          ,CREATEDATETIME(WORKDATE,TIME));
          LedgerEntryTrackingLotNo.VALIDATE("User ID"                 ,USERID);
          LedgerEntryTrackingLotNo.VALIDATE("Location Code"           ,PreInventaryHH."Cod. Location");
          LedgerEntryTrackingLotNo.VALIDATE("Bin Code"                ,PreInventaryHH."Bin Code");
          LedgerEntryTrackingLotNo.VALIDATE("Item No."                 ,PreInventaryHH."Item No");
          LedgerEntryTrackingLotNo.VALIDATE("Inventory Code"          ,InventoryCode);
          LedgerEntryTrackingLotNo.INSERT;
        END;
      END;
      Query1.CLOSE;
      EXIT(TRUE);
    END;

    PROCEDURE GetProdOrder@1102401054() : Text[1024];
    VAR
      ProductionOrder@1102401001 : Record 5405;
      RtnOP@1102401002 : Text;
    BEGIN
      CLEAR(RtnOP);
      ProductionOrder.RESET;
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      IF ProductionOrder.FINDSET THEN
        REPEAT
          RtnOP:=RtnOP+ProductionOrder."No."+'|';
        UNTIL ProductionOrder.NEXT=0;
      EXIT(RtnOP);
    END;

    PROCEDURE UpdateStatusDiarioSalida@1102401059(EntryLabel@1102401001 : Code[20];PhysicalLocation@1102401003 : Text[50]) : Boolean;
    VAR
      LabelNo@1102401002 : Integer;
      ItmJrnline2@1102401004 : Record 83;
      ProductionOrder@1102401005 : Record 5405;
      SegLotEntry@1102401006 : Integer;
      LabelLedgerEntryTracking@1102401007 : Record 50064;
      IdItem@1102401008 : Code[10];
    BEGIN
      EVALUATE(LabelNo,EntryLabel);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(LabelNo);
      LabelLedgerEntry."Physical Location":=PhysicalLocation;

      CLEAR(IdItem);
      IdItem:= COPYSTR(LabelLedgerEntry."Source No.",1,1);

      //IF (IdItem = '2') THEN
      //  LabelLedgerEntry."Remaining Quantity Label":=0;
      LabelLedgerEntry."Label Status" :=LabelLedgerEntry."Label Status"::Almacen;
      LabelLedgerEntry.MODIFY(TRUE);
      ItmJrnline2.RESET;

      CLEAR(SegLotEntry);

      ProductionOrder.RESET;
      IF NOT ProductionOrder.GET(ProductionOrder.Status::Released,LabelLedgerEntry."Document No.") THEN
        ProductionOrder.GET(ProductionOrder.Status::Finished,LabelLedgerEntry."Document No.");

      SegLotEntry:=ControlTrackingLabel(EntryLabel,'SALIDA',ItmJrnline2,'',ProductionOrder."Location Code",
                    ProductionOrder."Bin Code",LabelLedgerEntry.Quantity,6);

      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.GET(SegLotEntry);
      LabelLedgerEntryTracking."Journal Register"   :=TRUE;
      LabelLedgerEntryTracking."Physical Location"  :=PhysicalLocation;
      LabelLedgerEntryTracking.MODIFY;

      EXIT(TRUE);
    END;

    PROCEDURE CreateOrderTransfer@1102401115(MaterialRequestHeader@1102401001 : Record 50000) : Text[1024];
    VAR
      MaterialRequestLine@1102401002 : Record 50021;
      TransferHeader@1102401003 : Record 5740;
      TransferLine@1102401004 : Record 5741;
      Location@1102401005 : Record 14;
      TransferLine2@1102401006 : Record 5741;
      ProductionOrder@1102401007 : Record 5405;
      ProdOrderComponent@1102401008 : Record 5407;
      OrderCreated@1102401009 : Boolean;
      TransferHeaderTmp@1102401013 : Record 5740;
      Item@1102401012 : Record 27;
      TransferHeaderNo@1102401011 : Code[30];
      LocationTransfetoCode@1102401010 : Code[30];
      TransferNoCreated@1102401014 : Text;
      TransferToBinCode@1102401015 : Code[30];
    BEGIN

      //MaterialRequestHeader.TESTFIELD("Sended Doc",FALSE);
      Location.RESET;
      Location.SETRANGE("Use As In-Transit",TRUE);
      Location.FINDSET;

      CLEAR(TransferNoCreated);
      MaterialRequestLine.RESET;
      MaterialRequestLine.SETRANGE("Send to Transfer Order"   ,TRUE);
      MaterialRequestLine.SETRANGE("Document No."             ,MaterialRequestHeader."Document No.");
      MaterialRequestLine.SETRANGE("Sended To Order Transfer" ,FALSE);
      IF MaterialRequestLine.FINDSET THEN BEGIN
        REPEAT
          ProdOrderComponent.RESET;
          ProdOrderComponent.SETRANGE("Prod. Order No.",MaterialRequestLine."Document Source");
          ProdOrderComponent.SETRANGE(Status           ,MaterialRequestLine."Status OP");
          ProdOrderComponent.SETFILTER("Remaining Quantity",'<>%1',0);
          IF ProdOrderComponent.FINDSET THEN BEGIN
            REPEAT
              CLEAR(Item);
              CLEAR(LocationTransfetoCode);
              Item.GET(ProdOrderComponent."Item No.");
              Item.TESTFIELD("Cod. Location Default");
              Item.TESTFIELD("Bin Code Default");
              LocationTransfetoCode := Item."Cod. Location Default";
              TransferToBinCode     := Item."Bin Code Default";

              CLEAR(TransferHeaderNo);
              TransferHeaderTmp.RESET;
              TransferHeaderTmp.SETRANGE("Transfer-from Code"  ,MaterialRequestHeader."Location Transfer-from Code");
              TransferHeaderTmp.SETRANGE("Document Reference"  ,MaterialRequestHeader."Document No.");
              TransferHeaderTmp.SETRANGE("Transfer-to Code"    ,LocationTransfetoCode);
              IF NOT TransferHeaderTmp.FINDSET THEN BEGIN
                TransferHeader.INIT;
                TransferHeader."No." :='';
                TransferHeader.INSERT(TRUE);
                TransferHeader.VALIDATE("Transfer-from Code"  ,MaterialRequestHeader."Location Transfer-from Code");
                TransferHeader.VALIDATE("Transfer-to Code"    ,LocationTransfetoCode);
                TransferHeader.VALIDATE("In-Transit Code"     ,Location.Code);
                TransferHeader.VALIDATE("Assigned User ID"    ,USERID);
                TransferHeader.VALIDATE("Document Reference"  ,MaterialRequestHeader."Document No.");
                TransferHeader.MODIFY(TRUE);
                TransferHeaderNo:=TransferHeader."No.";

                TransferNoCreated :=TransferNoCreated+' '+TransferHeaderNo;
              END
              ELSE BEGIN
                TransferHeaderNo := TransferHeaderTmp."No.";
              END;

              //crea lineas
              TransferLine2.RESET;
              TransferLine2.SETRANGE("Document No." ,TransferHeaderNo);
              TransferLine2.SETRANGE("Item No."     ,ProdOrderComponent."Item No.");
              IF NOT TransferLine2.FINDSET THEN BEGIN
                TransferLine.INIT;
                TransferLine.VALIDATE("Document No."        ,TransferHeaderNo);
                TransferLine.VALIDATE("Line No."            ,GetLastTransferLine(TransferHeaderNo));
                TransferLine.VALIDATE("Item No."            ,ProdOrderComponent."Item No.");
                TransferLine.VALIDATE(Quantity              ,ProdOrderComponent."Remaining Quantity");
                TransferLine.VALIDATE("Transfer-to Code"    ,LocationTransfetoCode);
                TransferLine.VALIDATE("Transfer-To Bin Code",TransferToBinCode);
                TransferLine.INSERT(TRUE);
              END
              ELSE BEGIN
                TransferLine2.VALIDATE(Quantity ,TransferLine2.Quantity+ProdOrderComponent."Remaining Quantity");
                TransferLine2.MODIFY;
              END;
            UNTIL ProdOrderComponent.NEXT=0;
          END;

          MaterialRequestLine."Sended To Order Transfer"  := TRUE;
          MaterialRequestLine."Send to Transfer Order"    := FALSE;
          MaterialRequestLine.MODIFY;
        UNTIL MaterialRequestLine.NEXT=0;
        MaterialRequestHeader."Order Transfer Created" :=TransferNoCreated;
        MaterialRequestHeader.MODIFY;
        EXIT(TransferNoCreated);
      END
      ELSE
        ERROR('No hay nada que enviar');

    END;

    PROCEDURE OrderTransfer@1102401110(DocNo@1102401007 : Code[30];ItemNo@1102401006 : Code[30];QtyStr@1102401003 : Code[30];LotNo@1102401002 : Code[20];LabelNo@1102401001 : Code[30];Ship@1102401011 : Boolean;Receipt@1102401012 : Boolean) : Boolean;
    VAR
      TransferHeader@1102401008 : Record 5740;
      TransferLine@1102401009 : Record 5741;
      Location@1102401010 : Record 14;
      Qty@1102401004 : Decimal;
    BEGIN
      EVALUATE(Qty,QtyStr);
      Location.RESET;
      Location.SETRANGE("Use As In-Transit",TRUE);
      IF Location.FINDSET THEN

      TransferHeader.RESET;
      TransferHeader.SETRANGE("No.",DocNo);
      IF TransferHeader.FINDSET THEN;

      TransferLine.RESET;
      TransferLine.SETRANGE("Document No.",DocNo);
      TransferLine.SETRANGE("Item No."    ,ItemNo);
      IF TransferLine.FINDSET THEN BEGIN
        IF Ship THEN BEGIN
          TransferLine.VALIDATE("Qty. to Ship",Qty);
        END;
        IF Receipt THEN BEGIN
          TransferLine.VALIDATE("Qty. to Receive",Qty);
        END;
        TransferLine.MODIFY(TRUE);
        AssignLotNoOrderTransfer(TransferLine,LotNo,Qty,Ship,Receipt);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetOrderTransfer@1102401108() : Text;
    VAR
      TransferHeader@1102401002 : Record 5740;
      RtnTransfH@1102401003 : Text;
    BEGIN
      CLEAR(RtnTransfH);
      TransferHeader.RESET;
      IF TransferHeader.FINDSET THEN BEGIN
        REPEAT
          RtnTransfH:=RtnTransfH +TransferHeader."No."+'|';
        UNTIL TransferHeader.NEXT=0;
      END;
      EXIT(RtnTransfH);
    END;

    LOCAL PROCEDURE GetLastTransferLine@1102401120(TransferNo@1102401002 : Code[30]) : Integer;
    VAR
      TransferLineTmp@1102401001 : Record 5741;
    BEGIN
      TransferLineTmp.RESET;
      TransferLineTmp.SETRANGE("Document No.",TransferNo);
      IF TransferLineTmp.FINDLAST THEN
        EXIT(TransferLineTmp."Line No." +10000)
      ELSE
        EXIT(10000);
    END;

    LOCAL PROCEDURE GetLastReservEntry@1102401116() : Integer;
    VAR
      ReservationEntry@1102401001 : Record 337;
    BEGIN
      ReservationEntry.RESET;
      IF ReservationEntry.FINDLAST THEN
        EXIT(ReservationEntry."Entry No." + 1)
      ELSE
        EXIT(1);
    END;

    LOCAL PROCEDURE AssignLotNoOrderTransfer@1102401114(TransferLine@1102401001 : Record 5741;LotNo@1102401003 : Code[30];Qty@1102401002 : Decimal;Ship@1102401007 : Boolean;Receipt@1102401008 : Boolean);
    VAR
      Item@1102401004 : Record 27;
      RrsrvEntry@1102401005 : Record 337;
      Mov@1102401006 : Integer;
    BEGIN
      Item.RESET;
      Item.GET(TransferLine."Item No.");
      IF (Item."Item Tracking Code" <> '') THEN BEGIN
        IF Ship THEN BEGIN
          //negativo
          RrsrvEntry.INIT;
          RrsrvEntry."Entry No."                     :=GetLastReservEntry;
          RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Surplus);
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"1");
          RrsrvEntry.VALIDATE(Positive               , FALSE);
          RrsrvEntry.VALIDATE("Item No."             , TransferLine."Item No.");
          RrsrvEntry.VALIDATE("Creation Date"        , TODAY);
          RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Transfer Line");
          RrsrvEntry.VALIDATE("Source Subtype"       ,  RrsrvEntry."Source Subtype"::"0");
          RrsrvEntry.VALIDATE("Source ID"            , TransferLine."Document No.");
          RrsrvEntry.VALIDATE("Location Code"        , TransferLine."Transfer-from Code");
          RrsrvEntry."Source Ref. No."               :=TransferLine."Line No.";
          RrsrvEntry.VALIDATE("Shipment Date"         ,TransferLine."Shipment Date");
          RrsrvEntry."Created By"                    :=USERID;
          IF (Item."Item Tracking Code" = 'SEGLOTE') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Lot No.");
            RrsrvEntry.VALIDATE("Lot No."             , LotNo);
          END;
          IF (Item."Item Tracking Code" = 'SEGSERIE') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Serial No.");
            RrsrvEntry.VALIDATE("Serial No."          , LotNo);
          END;
          RrsrvEntry.INSERT(TRUE);
          RrsrvEntry."Quantity (Base)"               :=-Qty;
          RrsrvEntry.VALIDATE("Quantity (Base)");
          RrsrvEntry.MODIFY(TRUE);

          //positivo
          RrsrvEntry.INIT;
          RrsrvEntry."Entry No."                     :=GetLastReservEntry;
          RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Surplus);
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"1");
          RrsrvEntry.VALIDATE(Positive               , TRUE);
          RrsrvEntry.VALIDATE("Item No."             , TransferLine."Item No.");
          RrsrvEntry.VALIDATE("Creation Date"        , TODAY);
          RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Transfer Line");
          RrsrvEntry.VALIDATE("Source Subtype"       ,  RrsrvEntry."Source Subtype"::"1");
          RrsrvEntry.VALIDATE("Source ID"            , TransferLine."Document No.");
          RrsrvEntry.VALIDATE("Location Code"        , TransferLine."Transfer-to Code");
          RrsrvEntry."Source Ref. No."               :=TransferLine."Line No.";
          RrsrvEntry."Created By"                    :=USERID;
          RrsrvEntry.VALIDATE("Expected Receipt Date",TransferLine."Receipt Date");
          IF (Item."Item Tracking Code" = 'LOTEFAB') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Lot No.");
            RrsrvEntry.VALIDATE("Lot No."             , LotNo);
          END;

          IF (Item."Item Tracking Code" = 'LOTEFAB') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Serial No.");
            RrsrvEntry.VALIDATE("Serial No."          , LotNo);
          END;
          RrsrvEntry.INSERT(TRUE);
          RrsrvEntry."Quantity (Base)"               :=Qty;
          RrsrvEntry.VALIDATE("Quantity (Base)");
          RrsrvEntry.MODIFY(TRUE);
        END;
        IF Receipt THEN BEGIN
          RrsrvEntry.RESET;
          RrsrvEntry.SETRANGE("Source ID"         , TransferLine."Document No.");
          RrsrvEntry.SETRANGE("Source Ref. No."   , TransferLine."Line No.");
          RrsrvEntry.SETRANGE("Item No."          , TransferLine."Item No.");
          RrsrvEntry.SETRANGE("Source Type"       , DATABASE::"Transfer Line");
          IF RrsrvEntry.FINDSET THEN BEGIN
            RrsrvEntry.VALIDATE("Qty. to Handle (Base)",TransferLine."Qty. to Receive");
            RrsrvEntry.MODIFY;
          END;
        END;
      END;
    END;

    PROCEDURE SendToJournalInventary@1102401035(InventoryScan@1102401002 : Record 50066;ItemNo@1102401008 : Code[30];PostingDate@1102401005 : Date;NextDocNo@1102401004 : Code[30];InventoryCode@1102401007 : Code[30]);
    VAR
      InventaryScan@1102401001 : Record 50066;
      ItemJournalLine@1102401003 : Record 83;
      ItmJurnlLin@1102401006 : Record 83;
      TmpLedgerEntryTrackingLotNo@1102401021 : Record 50065;
      AjustPos@1102401024 : Boolean;
      AjustPos1@1102401023 : Boolean;
      AjustNeg@1102401022 : Boolean;
      QtyNAVAjsPos@1102401020 : Decimal;
      QtyNAVAjsPos1@1102401017 : Decimal;
      QtyNAVAjsNeg@1102401016 : Decimal;
      QtyAjstPos@1102401015 : Decimal;
      QtyAjstPos1@1102401014 : Decimal;
      QtyAjstNeg@1102401012 : Decimal;
      "******************"@1102401025 : Text[1];
    BEGIN
      ManufacturingSetup.GET('');

      InventaryScan.RESET;
      //InventaryScan.COPYFILTERS(InventoryScan);
      InventaryScan.SETRANGE("Item No"          ,ItemNo);
      InventaryScan.SETRANGE("Inventory Code"  ,InventoryCode);
      InventaryScan.SETFILTER("Reg. Sended"    ,'=%1',FALSE);
      InventaryScan.SETFILTER("Cod. Location"  ,'<>%1','100');
      IF InventaryScan.FINDSET THEN BEGIN
        Windows.OPEN(TextProcess+'#######1#');
        REPEAT
          InventaryScan.TESTFIELD("Cod. Location");
          InventaryScan.TESTFIELD("Bin Code");
          AjustPos    :=FALSE;
          AjustNeg    :=FALSE;
          AjustPos1   :=FALSE;
          QtyAjstPos  :=0;
          QtyAjstNeg  :=0;
          QtyNAVAjsPos:=0;
          QtyNAVAjsNeg:=0;
          QtyAjstPos1 :=0;
          QtyNAVAjsPos1 :=0;

          Windows.UPDATE(1,InventaryScan."Item No");

          TmpLedgerEntryTrackingLotNo.RESET;
          TmpLedgerEntryTrackingLotNo.SETRANGE("Entry No. Pre-Inventory",InventaryScan."Entry No");
          IF TmpLedgerEntryTrackingLotNo.FINDSET THEN BEGIN
            REPEAT
              IF (TmpLedgerEntryTrackingLotNo."Calculated Quantity" > TmpLedgerEntryTrackingLotNo."Qty Physical") THEN BEGIN
                QtyAjstNeg    += TmpLedgerEntryTrackingLotNo."Qty Physical";
                QtyNAVAjsNeg  += TmpLedgerEntryTrackingLotNo."Calculated Quantity";
                AjustNeg      := TRUE;
              END;
              IF (TmpLedgerEntryTrackingLotNo."Calculated Quantity" < TmpLedgerEntryTrackingLotNo."Qty Physical") THEN BEGIN
                QtyAjstPos    += TmpLedgerEntryTrackingLotNo."Qty Physical";
                QtyNAVAjsPos  += TmpLedgerEntryTrackingLotNo."Calculated Quantity";
                AjustPos      := TRUE;
              END;
              IF (TmpLedgerEntryTrackingLotNo."Calculated Quantity" = TmpLedgerEntryTrackingLotNo."Qty Physical") THEN BEGIN
                QtyAjstPos1    += TmpLedgerEntryTrackingLotNo."Qty Physical";
                QtyNAVAjsPos1  += TmpLedgerEntryTrackingLotNo."Calculated Quantity";
                AjustPos1      := TRUE;
              END;
            UNTIL TmpLedgerEntryTrackingLotNo.NEXT=0;
          END;

          //>>Cantidades Iguales
          IF (AjustPos1 = TRUE) THEN BEGIN
            DiarioInventarios(PostingDate,NextDocNo,InventaryScan."Item No",InventaryScan."Cod. Location",InventaryScan."Bin Code",QtyNAVAjsPos1,QtyAjstPos1,ItemJournalLine);
          END;

          //>>Ajuste Positivo
          IF (AjustPos = TRUE) THEN BEGIN
            DiarioInventarios(PostingDate,NextDocNo,InventaryScan."Item No",InventaryScan."Cod. Location",InventaryScan."Bin Code",QtyNAVAjsPos,QtyAjstPos,ItemJournalLine);
            InsertLotPosJrnalInv(InventaryScan,ItemJournalLine);
          END;

          //>>Ajuste Negativo
          IF (AjustNeg=TRUE) THEN BEGIN
            DiarioInventarios(PostingDate,NextDocNo,InventaryScan."Item No",InventaryScan."Cod. Location",InventaryScan."Bin Code",QtyNAVAjsNeg,QtyAjstNeg,ItemJournalLine);
            InsertLotNegJrnalInv(InventaryScan,ItemJournalLine);
          END;

          InventaryScan."Reg. Sended":=TRUE;
          InventaryScan.MODIFY;

          //>>Actualiza pre-status etiquetas
          UpdateStatusLabelInventory(InventaryScan);

          //Elimina Registro
         IF ManufacturingSetup."Delete Reg InventaryPhys" THEN
         DeleteRegPreInventary(InventaryScan);

        UNTIL InventaryScan.NEXT=0;
          //Elimina Registros
         IF ManufacturingSetup."Delete Reg InventaryPhys" THEN
          DeleteRegNoSendtoJornal();

         Windows.CLOSE;
        //MESSAGE('Envio Completado!!');
      END
      {
      ELSE
        MESSAGE('No hay Registros Pendientes por Enviar!!');
        }
    END;

    LOCAL PROCEDURE InsertLotPosJrnalInv@1102401066(InventaryScan@1102401001 : Record 50066;ItemJournalLine@1102401003 : Record 83);
    VAR
      LedgerEntryTrackingLotNo@1102401002 : Record 50065;
      LedgerEntryTrackingLotNo2@1102401013 : Record 50065;
      LedgerEntryTrackingLotNo6@1102401010 : Record 50065;
      LabelLedgerEntry@1102401007 : Record 50011;
      QtyIncompl@1102401004 : Decimal;
      QtySuperior@1102401005 : Decimal;
    BEGIN
      //lote superior
      LedgerEntryTrackingLotNo6.RESET;
      LedgerEntryTrackingLotNo6.SETRANGE("Entry No. Pre-Inventory"    ,InventaryScan."Entry No");
      LedgerEntryTrackingLotNo6.SETFILTER("Sent to Journal Inventary" ,'=%1',FALSE);
      LedgerEntryTrackingLotNo6.SETFILTER("Qty Physical"              ,'<>%1',0);
      IF LedgerEntryTrackingLotNo6.FINDSET THEN BEGIN
        REPEAT
          QtySuperior:=0;
          IF LedgerEntryTrackingLotNo6."Calculated Quantity" < LedgerEntryTrackingLotNo6."Qty Physical" THEN BEGIN
            QtySuperior :=((LedgerEntryTrackingLotNo6."Qty Physical"-LedgerEntryTrackingLotNo6."Calculated Quantity")*-1);
            AssignLotJrnalInventaryPhys(ItemJournalLine,LedgerEntryTrackingLotNo6."Lot. No.",QtySuperior);
            CtrlTracking_LotNo_Label(ItemJournalLine,LedgerEntryTrackingLotNo6);
          END;
        UNTIL LedgerEntryTrackingLotNo6.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE InsertLotNegJrnalInv@1102401062(InventaryScan@1102401001 : Record 50066;ItemJournalLine@1102401003 : Record 83);
    VAR
      LedgerEntryTrackingLotNo@1102401002 : Record 50065;
      LedgerEntryTrackingLotNo2@1102401013 : Record 50065;
      LedgerEntryTrackingLotNo6@1102401010 : Record 50065;
      LabelLedgerEntry@1102401007 : Record 50011;
      QtyIncompl@1102401004 : Decimal;
      QtySuperior@1102401005 : Decimal;
    BEGIN
      //>>asigna Lotes no encontrados
      LedgerEntryTrackingLotNo.RESET;
      LedgerEntryTrackingLotNo.SETRANGE("Entry No. Pre-Inventory"   ,InventaryScan."Entry No");
      LedgerEntryTrackingLotNo.SETFILTER("Sent to Journal Inventary",'=%1',FALSE);
      LedgerEntryTrackingLotNo.SETFILTER("Qty Physical"             ,'=%1',0);
      LedgerEntryTrackingLotNo.SETFILTER("Calculated Quantity"       ,'<>%1',0);
      IF LedgerEntryTrackingLotNo.FINDSET THEN BEGIN
        REPEAT
         AssignLotJrnalInventaryPhys(ItemJournalLine,LedgerEntryTrackingLotNo."Lot. No.",LedgerEntryTrackingLotNo."Calculated Quantity");
         CtrlTracking_LotNo_Label(ItemJournalLine,LedgerEntryTrackingLotNo);
        UNTIL LedgerEntryTrackingLotNo.NEXT=0;
      END;

      //Cantidad incompleta
      LedgerEntryTrackingLotNo2.RESET;
      LedgerEntryTrackingLotNo2.SETRANGE("Entry No. Pre-Inventory"    ,InventaryScan."Entry No");
      LedgerEntryTrackingLotNo2.SETFILTER("Sent to Journal Inventary" ,'=%1',FALSE);
      LedgerEntryTrackingLotNo2.SETFILTER("Qty Physical"              ,'<>%1',0);
      LedgerEntryTrackingLotNo2.SETFILTER("Calculated Quantity"       ,'<>%1',0);
      IF LedgerEntryTrackingLotNo2.FINDSET THEN BEGIN
        REPEAT
          IF LedgerEntryTrackingLotNo2."Calculated Quantity" > LedgerEntryTrackingLotNo2."Qty Physical" THEN BEGIN
            QtyIncompl :=0;
            QtyIncompl :=LedgerEntryTrackingLotNo2."Calculated Quantity"-LedgerEntryTrackingLotNo2."Qty Physical";
            AssignLotJrnalInventaryPhys(ItemJournalLine,LedgerEntryTrackingLotNo2."Lot. No.",QtyIncompl);
            CtrlTracking_LotNo_Label(ItemJournalLine,LedgerEntryTrackingLotNo2);
          END;
        UNTIL LedgerEntryTrackingLotNo2.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE DeleteRegPreInventary@1102401064(InventaryScan@1102401001 : Record 50066);
    VAR
      InventaryScan2@1102401002 : Record 50066;
      EntryTrackingLotNo@1102401003 : Record 50065;
      PreInventaryHH@1102401004 : Record 50061;
    BEGIN
      //elimina preinventario
      InventaryScan2.RESET;
      InventaryScan2.GET(InventaryScan."Entry No");
      InventaryScan2.DELETE;

      //elimina etiqueta leida
      PreInventaryHH.RESET;
      PreInventaryHH.SETRANGE("Entry No. Pre-Inventary", InventaryScan."Entry No");
      IF PreInventaryHH.FINDSET THEN BEGIN
        REPEAT
          PreInventaryHH.DELETE;
        UNTIL PreInventaryHH.NEXT=0;
      END;

      //elimina lotes encontrados
      EntryTrackingLotNo.RESET;
      EntryTrackingLotNo.SETRANGE("Entry No. Pre-Inventory",InventaryScan."Entry No");
      IF EntryTrackingLotNo.FINDSET THEN BEGIN
        REPEAT
          EntryTrackingLotNo.DELETE;
        UNTIL EntryTrackingLotNo.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE DeleteRegNoSendtoJornal@1102401069();
    VAR
      InventaryScan3@1102401002 : Record 50066;
      LedgerEntryTrackingLotNo5@1102401003 : Record 50065;
    BEGIN
      //elimina almacen calculados
      InventaryScan3.RESET;
      IF InventaryScan3.FINDSET THEN
        InventaryScan3.DELETEALL;

      LedgerEntryTrackingLotNo5.RESET;
      IF LedgerEntryTrackingLotNo5.FINDSET THEN
        LedgerEntryTrackingLotNo5.DELETEALL;
    END;

    LOCAL PROCEDURE CtrlTracking_LotNo_Label@1102401074(ItemJournalLine@1102401003 : Record 83;LedgerEntryTrackingLotNo@1102401004 : Record 50065);
    VAR
      PreInventaryHH@1102401001 : Record 50061;
      EntryType@1102401002 : Integer;
      PreInventaryLabel@1102401005 : Record 50061;
    BEGIN
      //>> agregar Seguimiento en Etiquetas
      //inserta Typo Movimiento

      IF (LedgerEntryTrackingLotNo."Calculated Quantity" > LedgerEntryTrackingLotNo."Qty Physical") THEN
        EntryType:=4 //ajuste Neg
      ELSE
        EntryType:=3; //Ajust Pos

        PreInventaryHH.RESET;
        PreInventaryHH.SETRANGE("Entry No. Pre-Inventary" ,LedgerEntryTrackingLotNo."Entry No. Pre-Inventory");
        PreInventaryHH.SETRANGE("Item No"                 ,LedgerEntryTrackingLotNo."Item No.");
        PreInventaryHH.SETRANGE("No. Lot"                 ,LedgerEntryTrackingLotNo."Lot. No.");
        PreInventaryHH.SETRANGE("Cod. Location"           ,LedgerEntryTrackingLotNo."Location Code");
        PreInventaryHH.SETRANGE("Bin Code"                ,LedgerEntryTrackingLotNo."Bin Code");
        IF PreInventaryHH.FINDSET THEN BEGIN
          REPEAT
            ControlTrackingLabel(FORMAT(PreInventaryHH."Label No."),'INVENTARIO',ItemJournalLine,PreInventaryHH."Physical Location",PreInventaryHH."Cod. Location",PreInventaryHH."Bin Code",PreInventaryHH."Quantity Scan",EntryType);
            {
            LabelLedgerEntry.RESET;
            LabelLedgerEntry.GET(PreInventaryHH."Label No.");
            LabelLedgerEntry."Journal Template Name"  :=ItemJournalLine."Journal Template Name";
            LabelLedgerEntry."Journal Batch Name"     :=ItemJournalLine."Journal Batch Name";
            LabelLedgerEntry."Journal Line No."       :=ItemJournalLine."Line No.";

            IF (ItemJournalLine."Entry Type" =ItemJournalLine."Entry Type"::"Positive Adjmt.") THEN BEGIN
              LabelLedgerEntry."Pre-Label Status"         := LabelLedgerEntry."Pre-Label Status"::Almacen;
              LabelLedgerEntry."Pre Remaining Quantity"   := LabelLedgerEntry."Pre Remaining Quantity";
            END;
            IF (ItemJournalLine."Entry Type" =ItemJournalLine."Entry Type"::"Negative Adjmt.") THEN BEGIN
              LabelLedgerEntry."Pre-Label Status"       := LabelLedgerEntry."Pre-Label Status"::Terminada;
              LabelLedgerEntry."Pre Remaining Quantity" := 0;
            END;

            LabelLedgerEntry.MODIFY;
            }
          UNTIL PreInventaryHH.NEXT=0;
        END
        ELSE BEGIN //Ajust Neg
          LabelLedgerEntry.RESET;
          LabelLedgerEntry.SETRANGE("Source No."  ,LedgerEntryTrackingLotNo."Item No.");
          LabelLedgerEntry.SETRANGE("Lot. No"     ,LedgerEntryTrackingLotNo."Lot. No.");
         IF LabelLedgerEntry.FINDSET THEN BEGIN
            REPEAT
              //PreInventaryLabel.RESET;
              PreInventaryLabel.RESET;
              PreInventaryLabel.SETCURRENTKEY("Item No","Label No.","No. Lot");
              PreInventaryLabel.SETRANGE("Item No"    , LabelLedgerEntry."Source No.");
              PreInventaryLabel.SETRANGE("Label No."  , LabelLedgerEntry."Entry No.");
              PreInventaryLabel.SETRANGE("No. Lot"    , LabelLedgerEntry."Lot. No");
              IF NOT PreInventaryLabel.FINDSET THEN BEGIN

                ControlTrackingLabelAjusNeg(FORMAT(LabelLedgerEntry."Entry No."),'INVENTARIO',ItemJournalLine,'',ItemJournalLine."Location Code",ItemJournalLine."Bin Code",LabelLedgerEntry.Quantity,EntryType);
                {
                LabelLedgerEntry."Physical Location"      :=LabelLedgerEntry."Physical Location";
                LabelLedgerEntry."Pre-Label Status"       :=LabelLedgerEntry."Pre-Label Status"::Almacen;
                LabelLedgerEntry."Journal Template Name"  :=ItemJournalLine."Journal Template Name";
                LabelLedgerEntry."Journal Batch Name"     :=ItemJournalLine."Journal Batch Name";
                LabelLedgerEntry."Journal Line No."       :=ItemJournalLine."Line No.";
      //          LabelLedgerEntry."Label Status"         := LabelLedgerEntry."Label Status"::Terminada;
                LabelLedgerEntry."Pre-Label Status"       := LabelLedgerEntry."Pre-Label Status"::Terminada;
                LabelLedgerEntry."Remaining Quantity"     := 0;
                LabelLedgerEntry.MODIFY;
                }
              END;
            UNTIL LabelLedgerEntry.NEXT=0;
          END;
      END;
    END;

    PROCEDURE AuditShipment@1102401028(DocumentNo@1102401008 : Code[30];ItemNo@1102401006 : Code[30];Qty1@1102401003 : Code[30];NoLot@1102401002 : Code[30];EntryLabel@1102401001 : Code[20];CustNo@1102401024 : Code[30]) : Boolean;
    VAR
      Qty@1102401007 : Decimal;
      AuditShipmentHeader@1102401009 : Record 50062;
      AuditShipmentLines@1102401010 : Record 50063;
      AuditShipmentLines2@1102401022 : Record 50063;
      Customer@1102401011 : Record 18;
      LineNo@1102401012 : Integer;
      TmpAuditShipLines@1102401013 : Record 50063;
      SalesHeader@1102401014 : Record 36;
      AuditShipHeader@1102401015 : Record 50062;
      CodAlm@1102401005 : Code[30];
      CodUbic@1102401004 : Code[30];
      ItemCrossRef@1102401016 : Record 5717;
      LabelLedgerEntry@1102401017 : Record 50011;
      LablNo@1102401018 : Integer;
      LocationCode@1102401019 : Code[30];
      BinCode@1102401020 : Code[30];
      AuditShipmentLinesDetall@1102401021 : Record 50067;
      Item3@1102401023 : Code[1];
      AuditShipmentDetallPacking@1102401025 : Record 50068;
      AuditShipmentDetallPacking2@1102401026 : Record 50068;
      Lin@1102401027 : Integer;
      AuditShipmentDetallPacking3@1102401028 : Record 50068;
      QtyNAV@1102401029 : Decimal;
      Location@1102401030 : Record 14;
      ItemJournalLine@1102401031 : Record 83;
      SegLotNo@1102401032 : Integer;
      LabelLedgerEntryTracking@1102401033 : Record 50064;
      vTest@1102401034 : Boolean;
    BEGIN
      //>>Embarques
      CLEAR(Item3);
      Item3 := COPYSTR(ItemNo,1,1);
      IF (Item3 <> '3') THEN BEGIN
        EVALUATE(LablNo,EntryLabel);
        LabelLedgerEntry.GET(LablNo);
      END;

      EVALUATE(Qty,Qty1);
      Customer.RESET;
      Customer.GET(CustNo);

      ConsultLotNo(EntryLabel,ItemNo,NoLot,Qty,CodAlm,CodUbic);
      LocationCode :=CodAlm;
      BinCode      :=CodUbic;

      //>>ConsultaExistenciasEnNAV
      QtyNAV :=0;
      Location.RESET;
      Location.SETFILTER("Calculate Exist Item",'=%1',TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          QtyNAV += ConsultExistItemNAV(ItemNo,NoLot,Location.Code);
        UNTIL Location.NEXT=0;
      END;
      IF QtyNAV <=0 THEN
        ERROR('No Hay Existencias Disponibles del Producto %1 en Sistema',ItemNo);


      AuditShipHeader.RESET;
      AuditShipHeader.SETRANGE("No.",DocumentNo);
      IF NOT AuditShipHeader.FINDSET THEN BEGIN
        AuditShipmentHeader.INIT;
        AuditShipmentHeader.VALIDATE("No.",DocumentNo);
        AuditShipmentHeader.INSERT(TRUE);
        AuditShipmentHeader.VALIDATE("Customer No."           ,Customer."No.");
        AuditShipmentHeader.VALIDATE("External Document No."  ,FORMAT(TODAY)+'-'+FORMAT(USERID));
        CLEAR(TurnCode);
        LabelMtg.GeneraTurno(TurnCode);
        AuditShipmentHeader.VALIDATE("Turn Code"              ,TurnCode);
        IF AuditShipmentHeader.MODIFY(TRUE) THEN BEGIN
          IF (Item3 <> '3') THEN BEGIN    //valida si es empaque
            AuditShipmentLines.RESET;
            AuditShipmentLines.SETRANGE("Document No."  , AuditShipmentHeader."No.");
            AuditShipmentLines.SETRANGE("Customer No."  , AuditShipmentHeader."Customer No.");
            AuditShipmentLines.SETFILTER("No."          , '=%1',ItemNo);
            IF NOT AuditShipmentLines.FINDSET THEN BEGIN
              TmpAuditShipLines.RESET;
              TmpAuditShipLines.SETRANGE("Document No.",AuditShipmentHeader."No.");
              IF TmpAuditShipLines.FINDLAST THEN
                LineNo:= TmpAuditShipLines."Line No."+10000
              ELSE
                LineNo:=10000;
              AuditShipmentLines2.INIT;
              AuditShipmentLines2.VALIDATE("Document No."  ,AuditShipmentHeader."No.");
              AuditShipmentLines2.VALIDATE("Line No."      ,LineNo);
              AuditShipmentLines2."Customer No."           :=AuditShipmentHeader."Customer No.";
              AuditShipmentLines2."Posting Date"           :=TODAY;
              AuditShipmentLines2."Posting Time"           :=FORMAT(TIME);
              AuditShipmentLines2."Shipment Date"          :=TODAY;
              AuditShipmentLines2.VALIDATE("No."           ,ItemNo);
              AuditShipmentLines2."Location Code"          :=LocationCode;
              AuditShipmentLines2."Bin Code"               :=BinCode;
              AuditShipmentLines2.INSERT(TRUE);

             //linea detalle
              InsertLineDetallAudit(AuditShipmentHeader."No.",LineNo,ItemNo,LocationCode,BinCode,Qty,NoLot,LablNo);
              AsigStatusLabel(EntryLabel,'EMBARQUES');
            END
            ELSE BEGIN
              InsertLineDetallAudit(AuditShipmentLines."Document No.",AuditShipmentLines."Line No.",ItemNo,LocationCode,BinCode,Qty,NoLot,LablNo);
              AsigStatusLabel(EntryLabel,'EMBARQUES');
            END;
          END
          ELSE BEGIN //item 3
            AuditShipmentDetallPacking3.RESET;
            AuditShipmentDetallPacking3.SETRANGE("Document No. Ref" ,AuditShipmentHeader."No.");
            AuditShipmentDetallPacking3.SETRANGE("Line No. Ref"     ,1);
            AuditShipmentDetallPacking3.SETRANGE("No."              ,ItemNo);
            IF NOT AuditShipmentDetallPacking3.FINDSET THEN BEGIN
              AuditShipmentDetallPacking2.RESET;
              AuditShipmentDetallPacking2.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
              AuditShipmentDetallPacking2.SETRANGE("Line No. Ref"    ,1);
              IF AuditShipmentDetallPacking2.FINDLAST THEN
                Lin := AuditShipmentDetallPacking2."Line No."+1
              ELSE
                Lin :=1;

              AuditShipmentDetallPacking.INIT;
              AuditShipmentDetallPacking.VALIDATE("Document No. Ref",AuditShipmentHeader."No.");
              AuditShipmentDetallPacking.VALIDATE("Line No. Ref",1);
              AuditShipmentDetallPacking.VALIDATE("Line No.",Lin);
              AuditShipmentDetallPacking.VALIDATE("Customer No.",CustNo);
              AuditShipmentDetallPacking.VALIDATE("Posting Date",TODAY);
              AuditShipmentDetallPacking.VALIDATE("Posting Time",FORMAT(TIME));
              AuditShipmentDetallPacking.VALIDATE("No.",ItemNo);
              AuditShipmentDetallPacking.VALIDATE("Location Code",LocationCode);
              AuditShipmentDetallPacking.VALIDATE("Bin Code",BinCode);
              AuditShipmentDetallPacking.VALIDATE(Quantity,1);
              AuditShipmentDetallPacking.VALIDATE("Packing Compl",TRUE);
              AuditShipmentDetallPacking.INSERT(TRUE);
            END
            ELSE BEGIN
              AuditShipmentDetallPacking3.VALIDATE(Quantity,(AuditShipmentDetallPacking3.Quantity+1));
              AuditShipmentDetallPacking3.MODIFY;
            END;
          END;
        END;
      END
      ELSE BEGIN
        AuditShipHeader.TESTFIELD(Status,AuditShipHeader.Status::Open);
        //inserta Linea nueva
        IF (Item3 <> '3') THEN BEGIN    //valida si es empaque
          AuditShipmentLines.RESET;
          AuditShipmentLines.SETRANGE("Document No."  , AuditShipHeader."No.");
          AuditShipmentLines.SETRANGE("Customer No."  , AuditShipHeader."Customer No.");
          AuditShipmentLines.SETFILTER("No."          , '=%1',ItemNo);
          IF NOT AuditShipmentLines.FINDSET THEN BEGIN
            TmpAuditShipLines.RESET;
            TmpAuditShipLines.SETRANGE("Document No.",AuditShipHeader."No.");
            IF TmpAuditShipLines.FINDLAST THEN
              LineNo:= TmpAuditShipLines."Line No."+10000
            ELSE
              LineNo:=10000;

            AuditShipmentLines2.INIT;
            AuditShipmentLines2.VALIDATE("Document No."  ,AuditShipHeader."No.");
            AuditShipmentLines2.VALIDATE("Line No."      ,LineNo);
            AuditShipmentLines2."Customer No."           :=AuditShipHeader."Customer No.";
            AuditShipmentLines2."Posting Date"           :=TODAY;
            AuditShipmentLines2."Posting Time"           :=FORMAT(TIME);
            AuditShipmentLines2."Shipment Date"          :=TODAY;
            AuditShipmentLines2.VALIDATE("No."           ,ItemNo);
            AuditShipmentLines2."Location Code"          :=CodAlm;
            AuditShipmentLines2."Bin Code"               :=CodUbic;
            //AuditShipmentLines2.Quantity                 :=Qty;
            AuditShipmentLines2.INSERT(TRUE);

            InsertLineDetallAudit(AuditShipHeader."No.",LineNo,ItemNo,CodAlm,CodUbic,Qty,NoLot,LablNo);
            AsigStatusLabel(EntryLabel,'EMBARQUES');
          //ControlTrackingLabel(EntryLabel,'EMBARQUES',LocationCode,BinCode);
          END
          ELSE BEGIN
            InsertLineDetallAudit(AuditShipmentLines."Document No.",AuditShipmentLines."Line No.",ItemNo,CodAlm,CodUbic,Qty,NoLot,LablNo);
            AsigStatusLabel(EntryLabel,'EMBARQUES');
          END;
        END
        ELSE BEGIN
          AuditShipmentDetallPacking3.RESET;
          AuditShipmentDetallPacking3.SETRANGE("Document No. Ref" ,AuditShipHeader."No.");
          AuditShipmentDetallPacking3.SETRANGE("Line No. Ref"     ,1);
          AuditShipmentDetallPacking3.SETRANGE("No."              ,ItemNo);
          IF NOT AuditShipmentDetallPacking3.FINDSET THEN BEGIN
            AuditShipmentDetallPacking2.RESET;
            AuditShipmentDetallPacking2.SETRANGE("Document No. Ref",AuditShipHeader."No.");
            AuditShipmentDetallPacking2.SETRANGE("Line No. Ref"    ,1);
            IF AuditShipmentDetallPacking2.FINDLAST THEN
              Lin := AuditShipmentDetallPacking2."Line No."+1
            ELSE
              Lin :=1;
               AuditShipmentDetallPacking.INIT;
            AuditShipmentDetallPacking.VALIDATE("Document No. Ref",AuditShipHeader."No.");
            AuditShipmentDetallPacking.VALIDATE("Line No. Ref",1);
            AuditShipmentDetallPacking.VALIDATE("Line No.",Lin);
            AuditShipmentDetallPacking.VALIDATE("Customer No.",CustNo);
            AuditShipmentDetallPacking.VALIDATE("Posting Date",TODAY);
            AuditShipmentDetallPacking.VALIDATE("Posting Time",FORMAT(TIME));
            AuditShipmentDetallPacking.VALIDATE("No.",ItemNo);
            AuditShipmentDetallPacking.VALIDATE("Location Code",LocationCode);
            AuditShipmentDetallPacking.VALIDATE("Bin Code",BinCode);
            AuditShipmentDetallPacking.VALIDATE(Quantity,1);
            AuditShipmentDetallPacking.VALIDATE("Packing Compl",TRUE);
            AuditShipmentDetallPacking.INSERT(TRUE);
          END
          ELSE BEGIN
            AuditShipmentDetallPacking3.VALIDATE(Quantity,(AuditShipmentDetallPacking3.Quantity+1));
            AuditShipmentDetallPacking3.MODIFY;
          END;
        END;
      END;

      //>>seguimiento etiqueta
      ItemJournalLine.RESET;
      CLEAR(SegLotNo);
      SegLotNo:=ControlTrackingLabel(EntryLabel,'EMBARQUES',ItemJournalLine,'EMBARQUES',LocationCode,BinCode,Qty,7);

      {
      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.GET(SegLotNo);
      LabelLedgerEntryTracking."Journal Register":=TRUE;
      LabelLedgerEntryTracking.MODIFY;
      }
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AssignLotJrnalConsumos@1102401013(ItmJrnline2@1102401006 : Record 83;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
      Item@1102401008 : Record 27;
    BEGIN
      Item.RESET;
      Item.GET(ItmJrnline2."Item No.");
      IF (Item."Item Tracking Code" <> '') THEN BEGIN
        RrsrvEntry1.RESET;
        RrsrvEntry1.SETRANGE("Item No."           ,ItmJrnline2."Item No.");
        RrsrvEntry1.SETRANGE("Location Code"      ,ItmJrnline2."Location Code");
        RrsrvEntry1.SETRANGE("Lot No."            ,LotNo);
        RrsrvEntry1.SETRANGE("Source ID"          ,ItmJrnline2."Journal Template Name");
        RrsrvEntry1.SETRANGE("Source Batch Name"  ,ItmJrnline2."Journal Batch Name");
        IF NOT RrsrvEntry1.FINDSET THEN BEGIN
          RrsrvEntry.RESET;
          IF RrsrvEntry.FINDLAST THEN
            Mov := RrsrvEntry."Entry No." + 1
          ELSE
            Mov := 1;

          RrsrvEntry.RESET;
          RrsrvEntry.INIT;
          RrsrvEntry."Entry No."                     :=Mov;
          RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Prospect);
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"5");
          RrsrvEntry.VALIDATE(Positive               , FALSE);
          RrsrvEntry.VALIDATE("Item No."             , ItmJrnline2."Item No.");
          RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
          RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Item Journal Line");
          RrsrvEntry.VALIDATE("Source ID"            , ItmJrnline2."Journal Template Name");
          RrsrvEntry.VALIDATE("Source Batch Name"    , ItmJrnline2."Journal Batch Name");
          RrsrvEntry.VALIDATE("Location Code"        , ItmJrnline2."Location Code");
          RrsrvEntry."Source Ref. No."               :=ItmJrnline2."Line No.";
          RrsrvEntry."Created By"                    :=USERID;
          RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
          RrsrvEntry.VALIDATE("Lot No."              , LotNo);
          RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
          RrsrvEntry.INSERT(TRUE);
          RrsrvEntry."Quantity (Base)"               :=-Qty;
          RrsrvEntry.VALIDATE("Quantity (Base)");
          IF RrsrvEntry.MODIFY(TRUE) THEN
            EXIT(TRUE)
        END
        ELSE BEGIN
          RrsrvEntry1."Quantity (Base)" += -Qty;
          RrsrvEntry1.VALIDATE("Quantity (Base)");
          IF RrsrvEntry1.MODIFY(TRUE) THEN
            EXIT(TRUE)
        END;
      END;
    END;

    LOCAL PROCEDURE AssignLotJrnalSalidas@1102401012(ItmJrnline2@1102401006 : Record 83;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."         ,ItmJrnline2."Item No.");
      RrsrvEntry1.SETRANGE("Location Code"    ,ItmJrnline2."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."          ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"        ,ItmJrnline2."Journal Template Name");
      RrsrvEntry1.SETRANGE("Source Batch Name",ItmJrnline2."Journal Batch Name");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        RrsrvEntry.RESET;
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
          Mov := 1;

        RrsrvEntry.RESET;
        RrsrvEntry.INIT;
        RrsrvEntry."Entry No."                     :=Mov;
        RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Prospect);
        RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"6");
        RrsrvEntry.VALIDATE(Positive               , TRUE);
        RrsrvEntry.VALIDATE("Item No."             , ItmJrnline2."Item No.");
        RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
        RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Item Journal Line");
        RrsrvEntry.VALIDATE("Source ID"            , ItmJrnline2."Journal Template Name");
        RrsrvEntry.VALIDATE("Source Batch Name"    , ItmJrnline2."Journal Batch Name");
        RrsrvEntry.VALIDATE("Location Code"        , ItmJrnline2."Location Code");
        RrsrvEntry."Source Ref. No."               :=ItmJrnline2."Line No.";
        RrsrvEntry."Created By"                    :=USERID;
        RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
        RrsrvEntry.VALIDATE("Lot No."              , LotNo);
        RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
        RrsrvEntry.INSERT(TRUE);
        RrsrvEntry."Quantity (Base)"               :=Qty;
        RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN BEGIN
          InsertLotNoInfo(ItmJrnline2."Item No.",LotNo); //insert Lot Information
          EXIT(TRUE)
        END
        ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" += Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN BEGIN
          InsertLotNoInfo(RrsrvEntry1."Item No.",LotNo); //insert Lot Information
          EXIT(TRUE)
        END
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE AssignLotJrnalSalidasCancel@1102401099(ItmJrnline2@1102401006 : Record 83;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal;EtiquetaNo@1102401009 : Code[30]) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
      NoMovLiq@1102401008 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."         ,ItmJrnline2."Item No.");
      RrsrvEntry1.SETRANGE("Location Code"    ,ItmJrnline2."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."          ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"        ,ItmJrnline2."Journal Template Name");
      RrsrvEntry1.SETRANGE("Source Batch Name",ItmJrnline2."Journal Batch Name");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        RrsrvEntry.RESET;
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
          Mov := 1;

        ItmLedgerEntry.RESET;
        ItmLedgerEntry.SETRANGE("Item No."              ,ItmJrnline2."Item No.");
        ItmLedgerEntry.SETRANGE("Lot No."               ,LotNo);
        ItmLedgerEntry.SETRANGE("Entry Type"            ,ItmLedgerEntry."Entry Type"::Output);
        ItmLedgerEntry.SETRANGE(Open                    ,TRUE);
        ItmLedgerEntry.SETRANGE(Positive                ,TRUE);
        ItmLedgerEntry.SETRANGE("External Document No." ,EtiquetaNo);
        ItmLedgerEntry.FINDSET;
          NoMovLiq := ItmLedgerEntry."Entry No.";

        RrsrvEntry.RESET;
        RrsrvEntry.INIT;
        RrsrvEntry."Entry No."                     :=Mov;
        RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Prospect);
        RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"6");
        RrsrvEntry.VALIDATE(Positive               , TRUE);
        RrsrvEntry.VALIDATE("Item No."             , ItmJrnline2."Item No.");
        RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
        RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Item Journal Line");
        RrsrvEntry.VALIDATE("Source ID"            , ItmJrnline2."Journal Template Name");
        RrsrvEntry.VALIDATE("Source Batch Name"    , ItmJrnline2."Journal Batch Name");
        RrsrvEntry.VALIDATE("Location Code"        , ItmJrnline2."Location Code");
        RrsrvEntry."Source Ref. No."               :=ItmJrnline2."Line No.";
        RrsrvEntry."Created By"                    :=USERID;
        RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
        RrsrvEntry.VALIDATE("Lot No."              , LotNo);
        RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
        RrsrvEntry.INSERT(TRUE);
        RrsrvEntry."Quantity (Base)"               :=Qty;
        RrsrvEntry.VALIDATE("Quantity (Base)");
        RrsrvEntry.VALIDATE("Appl.-to Item Entry",NoMovLiq);
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" += Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE AssignLotJrnalConsign@1102401014(ItmJrnline2@1102401006 : Record 83;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."           ,ItmJrnline2."Item No.");
      RrsrvEntry1.SETRANGE("Location Code"      ,ItmJrnline2."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."            ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"          ,ItmJrnline2."Journal Template Name");
      RrsrvEntry1.SETRANGE("Source Batch Name"  ,ItmJrnline2."Journal Batch Name");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        RrsrvEntry.RESET;
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
          Mov := 1;

        RrsrvEntry.RESET;
        RrsrvEntry.INIT;
        RrsrvEntry."Entry No."                     :=Mov;
        RrsrvEntry.VALIDATE("Item No."             , ItmJrnline2."Item No.");
        RrsrvEntry.VALIDATE("Location Code"        , ItmJrnline2."Location Code");
        RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Prospect);
        RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"4");
        RrsrvEntry.VALIDATE(Positive               , FALSE);
        RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
        RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Item Journal Line");
        RrsrvEntry.VALIDATE("Source ID"            , ItmJrnline2."Journal Template Name");
        RrsrvEntry.VALIDATE("Source Batch Name"    , ItmJrnline2."Journal Batch Name");
        RrsrvEntry."Source Ref. No."               :=ItmJrnline2."Line No.";
        RrsrvEntry."Created By"                    :=USERID;
        RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
        RrsrvEntry.VALIDATE("Lot No."              , LotNo);
        RrsrvEntry.VALIDATE("New Lot No."          , LotNo);
        RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
        RrsrvEntry.INSERT(TRUE);

        RrsrvEntry."Quantity (Base)"               :=-Qty;
        RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" += -Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE AssignLotJrnalInventaryPhys@1102401032(ItmJrnline2@1102401006 : Record 83;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."           ,ItmJrnline2."Item No.");
      RrsrvEntry1.SETRANGE("Location Code"      ,ItmJrnline2."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."            ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"          ,ItmJrnline2."Journal Template Name");
      RrsrvEntry1.SETRANGE("Source Batch Name"  ,ItmJrnline2."Journal Batch Name");
      RrsrvEntry1.SETRANGE("Source Ref. No."    ,ItmJrnline2."Line No.");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        RrsrvEntry.RESET;
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
          Mov := 1;

        RrsrvEntry.RESET;
        RrsrvEntry.INIT;
        RrsrvEntry."Entry No."                     :=Mov;
        RrsrvEntry.VALIDATE("Item No."             , ItmJrnline2."Item No.");
        RrsrvEntry.VALIDATE("Location Code"        , ItmJrnline2."Location Code");
        RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Prospect);
        IF ItmJrnline2."Entry Type" = ItmJrnline2."Entry Type"::"Positive Adjmt." THEN
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"2");
        IF ItmJrnline2."Entry Type" = ItmJrnline2."Entry Type"::"Negative Adjmt." THEN
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"3");
        RrsrvEntry.VALIDATE(Positive               , TRUE);
        RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
        RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Item Journal Line");
        RrsrvEntry.VALIDATE("Source ID"            , ItmJrnline2."Journal Template Name");
        RrsrvEntry.VALIDATE("Source Batch Name"    , ItmJrnline2."Journal Batch Name");
        RrsrvEntry."Source Ref. No."               :=ItmJrnline2."Line No.";
        RrsrvEntry."Created By"                    :=USERID;
        RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
        RrsrvEntry.VALIDATE("Lot No."              , LotNo);
        RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
        RrsrvEntry.VALIDATE("Shipment Date"        , ItmJrnline2."Posting Date");
        RrsrvEntry.INSERT(TRUE);

        RrsrvEntry."Quantity (Base)"               :=-Qty;
        RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" += -Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE AssignLotConsumoCompOP@1102401037(ItemNo@1102401008 : Code[30];LocationCode@1102401006 : Code[30];SourceID@1102401009 : Code[30];SourceProdOrderLine@1102401011 : Integer;SourceRefNo@1102401012 : Integer;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."               ,ItemNo);
      RrsrvEntry1.SETRANGE("Location Code"          ,LocationCode);
      RrsrvEntry1.SETRANGE("Lot No."                ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"              ,SourceID);
      RrsrvEntry1.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
      RrsrvEntry1.SETRANGE("Source Ref. No."        ,SourceRefNo);
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        RrsrvEntry.RESET;
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
          Mov := 1;

        RrsrvEntry.RESET;
        RrsrvEntry.INIT;
        RrsrvEntry."Entry No."                     :=Mov;
        RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Surplus);
        RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"2");
        RrsrvEntry.VALIDATE(Positive               , FALSE);
        RrsrvEntry.VALIDATE("Item No."             , ItemNo);
        RrsrvEntry.VALIDATE("Creation Date"        , WORKDATE);
        RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Prod. Order Component");
        RrsrvEntry.VALIDATE("Source ID"            , SourceID);
        RrsrvEntry.VALIDATE("Location Code"        , LocationCode);
        RrsrvEntry."Source Prod. Order Line"       :=SourceProdOrderLine;
        RrsrvEntry."Source Ref. No."               :=SourceRefNo;
        RrsrvEntry."Created By"                    :=USERID;
        RrsrvEntry.VALIDATE("Item Tracking"        , RrsrvEntry."Item Tracking"::"Lot No.");
        RrsrvEntry.VALIDATE("Lot No."              , LotNo);
        RrsrvEntry.VALIDATE("Expected Receipt Date", WORKDATE);
        RrsrvEntry.INSERT(TRUE);
        RrsrvEntry."Quantity (Base)"               :=-Qty;
        RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" += -Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);

      END;
    END;

    PROCEDURE AssignLotSalesOrder@1102401075(SalesLine@1102401006 : Record 37;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."     ,SalesLine."No.");
      RrsrvEntry1.SETRANGE("Location Code",SalesLine."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."      ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"    ,SalesLine."Document No.");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
         Mov := 1;
         RrsrvEntry.RESET;
         RrsrvEntry.INIT;
         RrsrvEntry."Entry No." := Mov;
         RrsrvEntry.VALIDATE("Reservation Status" ,RrsrvEntry."Reservation Status"::Surplus);
         RrsrvEntry.VALIDATE("Source Subtype"     ,RrsrvEntry."Source Subtype"::"1");
         RrsrvEntry.VALIDATE(Positive             ,FALSE);
         RrsrvEntry.VALIDATE("Item No."           ,SalesLine."No.");
         RrsrvEntry.VALIDATE("Creation Date"      ,TODAY);
         RrsrvEntry.VALIDATE("Source Type"        ,DATABASE::"Sales Line");
         RrsrvEntry.VALIDATE("Source ID"          ,SalesLine."Document No.");
         RrsrvEntry.VALIDATE("Location Code"      ,SalesLine."Location Code");
         RrsrvEntry."Source Ref. No."             := SalesLine."Line No.";
         RrsrvEntry."Created By"                  := USERID;
         RrsrvEntry.VALIDATE("Item Tracking"      ,RrsrvEntry."Item Tracking"::"Lot No.");
         RrsrvEntry.VALIDATE("Lot No."            ,LotNo);
         RrsrvEntry.VALIDATE(RrsrvEntry."Shipment Date",TODAY);
         RrsrvEntry.INSERT;
         RrsrvEntry."Quantity (Base)" := -Qty;
         RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);

      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" +=- Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE AssignLotShipWhereHouse@1102401087(WarehouseShipmentLine@1102401006 : Record 7321;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
    BEGIN
      RrsrvEntry1.RESET;
      RrsrvEntry1.SETRANGE("Item No."     ,WarehouseShipmentLine."Item No.");
      RrsrvEntry1.SETRANGE("Location Code",WarehouseShipmentLine."Location Code");
      RrsrvEntry1.SETRANGE("Lot No."      ,LotNo);
      RrsrvEntry1.SETRANGE("Source ID"    ,WarehouseShipmentLine."Source No.");
      IF NOT RrsrvEntry1.FINDSET THEN BEGIN
        IF RrsrvEntry.FINDLAST THEN
          Mov := RrsrvEntry."Entry No." + 1
        ELSE
         Mov := 1;
         RrsrvEntry.RESET;
         RrsrvEntry.INIT;
         RrsrvEntry."Entry No." := Mov;
         RrsrvEntry.VALIDATE("Reservation Status" ,RrsrvEntry."Reservation Status"::Surplus);
         RrsrvEntry.VALIDATE("Source Subtype"     ,RrsrvEntry."Source Subtype"::"1");
         RrsrvEntry.VALIDATE(Positive             ,FALSE);
         RrsrvEntry.VALIDATE("Item No."           ,WarehouseShipmentLine."Item No.");
         RrsrvEntry.VALIDATE("Creation Date"      ,TODAY);
         RrsrvEntry.VALIDATE("Source Type"        ,DATABASE::"Sales Line");
         RrsrvEntry.VALIDATE("Source ID"          ,WarehouseShipmentLine."Source No.");
         RrsrvEntry.VALIDATE("Location Code"      ,WarehouseShipmentLine."Location Code");
         RrsrvEntry."Source Ref. No."             := WarehouseShipmentLine."Source Line No.";
         RrsrvEntry."Created By"                  := USERID;
         RrsrvEntry.VALIDATE("Item Tracking"      ,RrsrvEntry."Item Tracking"::"Lot No.");
         RrsrvEntry.VALIDATE("Lot No."            ,LotNo);
         RrsrvEntry.VALIDATE(RrsrvEntry."Shipment Date",TODAY);
         RrsrvEntry.INSERT;
         RrsrvEntry."Quantity (Base)" := -Qty;
         RrsrvEntry.VALIDATE("Quantity (Base)");
        IF RrsrvEntry.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);

      END
      ELSE BEGIN
        RrsrvEntry1."Quantity (Base)" +=- Qty;
        RrsrvEntry1.VALIDATE("Quantity (Base)");
        IF RrsrvEntry1.MODIFY(TRUE) THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE PostingJrnalConsumo@1102401020(RecItemJournalLine@1102401004 : Record 83;LabelEntry@1102401003 : Code[20]) : Boolean;
    VAR
      ItemJournaLine2@1102401002 : Record 83;
      ItmJnlPost@1102401001 : Codeunit 241;
      LabelNo@1102401005 : Integer;
      LabelLedgerEntry1@1102401006 : Record 50011;
      IdItem@1102401007 : Code[10];
    BEGIN
      //UserSetup.RESET;
      //UserSetup.GET(USERID);

      ItemJournaLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      IF ItemJournaLine2.GET(RecItemJournalLine."Journal Template Name",RecItemJournalLine."Journal Batch Name",RecItemJournalLine."Line No.") THEN BEGIN
        ItemJnlPostBatch.RUN(ItemJournaLine2);
        //COMMIT;
        ConfirmCntrlTrackingJornlLabl(ItemJournaLine2."Journal Template Name",ItemJournaLine2."Journal Batch Name");

        //>>actualiza cantidad pendiente
        EVALUATE(LabelNo,LabelEntry);
        LabelLedgerEntry1.RESET;
        LabelLedgerEntry1.GET(LabelNo);
        CLEAR(IdItem);
        IdItem:= COPYSTR(LabelLedgerEntry1."Source No.",1,1);

        //IF (IdItem <> '2') THEN
          //LabelLedgerEntry1."Remaining Quantity Label" :=LabelLedgerEntry1."Pre Remaining Quantity";

        LabelLedgerEntry1.MODIFY;


      IF RecItemJournalLine."Location Code" = ManufacturingSetup."Location Cuarenten Code" THEN BEGIN
        EditLotNoInfo(LabelLedgerEntry1."Source No.",LabelLedgerEntry1."Lot. No",FALSE);
      END;

        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE PostingJrnalSalida@1102401006(RecItemJournalLine@1102401004 : Record 83) : Boolean;
    VAR
      ItemJournaLine2@1102401002 : Record 83;
      ItmJnlPost@1102401001 : Codeunit 241;
    BEGIN
      ItemJournaLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      IF ItemJournaLine2.GET(RecItemJournalLine."Journal Template Name",RecItemJournalLine."Journal Batch Name",RecItemJournalLine."Line No.") THEN BEGIN

        ItemJnlPostBatch.RUN(ItemJournaLine2);
        //COMMIT;
        ConfirmCntrlTrackingJornlLabl(ItemJournaLine2."Journal Template Name",ItemJournaLine2."Journal Batch Name");

        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostingJrnalConsign@1102401019(LabelEntry@1102401003 : Code[20]) : Boolean;
    VAR
      ItemJournaLine2@1102401002 : Record 83;
      ItemJrnLin@1102401008 : Record 83;
      ItmJnlPost@1102401001 : Codeunit 241;
      CreateASNSalesInvoiceFile@1102401007 : Codeunit 50010;
      UnitPacking@1102401006 : Code[30];
      QtyPacking@1102401005 : Decimal;
      ItemJnPost@1102401009 : Codeunit 241;
      ItemRegNo@1102401011 : Integer;
      ItemWhsNo@1102401010 : Integer;
      WhseReg@1102401004 : Record 7313;
      CreateASN@1102401012 : Codeunit 50010;
      Direccion@1102401013 : Code[10];
    BEGIN
      UserSetup.RESET;
      UserSetup.GET(USERID);
      ItemJournaLine2.RESET;
      ItemJournaLine2.SETRANGE("Journal Template Name"  ,UserSetup."Journal Template Name Consign");
      ItemJournaLine2.SETRANGE("Journal Batch Name"     ,UserSetup."Journal Batch Name Consign");
      IF ItemJournaLine2.FINDSET THEN BEGIN

        CLEAR(UnitPacking);
        CLEAR(QtyPacking);

        //ItemJrnLin:=ItemJournaLine2;
        ItemJrnLin.COPYFILTERS(ItemJournaLine2);// Cambio Jesus 26 Dic 2018

        IF ItemJrnLin.FINDSET THEN
        REPEAT
          CreateASNSalesInvoiceFile.GetPackingItem(ItemJrnLin."Item No.",UnitPacking,QtyPacking);
          {
          IF (UnitPacking='') OR (QtyPacking=0) THEN
            ERROR('Falta empaque en ',ItemJrnLin."Item No.");
            }
        UNTIL ItemJrnLin.NEXT=0;

        CLEAR(ItemJnPost);
        ItemJnlPostBatch.RUN(ItemJournaLine2);
        COMMIT;
        ItemRegNo:=ItemJnPost.GetItemRegNo;
        ItemWhsNo:=ItemJnPost.GetWhseRegNo;
        CLEAR(ItemJnPost);

        IF WhseReg.GET(ItemWhsNo) THEN BEGIN
          WhseReg.SETRECFILTER;
        END;

        // Create a ASN header
        CLEAR(CreateASN);
        CreateASN.CreateASNHellaFromJnl(ItemRegNo,ItemWhsNo,Direccion);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostingJrnalTransfer@1102401025(LabelEntry@1102401003 : Code[20]) : Boolean;
    VAR
      ItemJournaLine2@1102401002 : Record 83;
      ItmJnlPost@1102401001 : Codeunit 241;
      ItemJlLine@1102401004 : Record 83;
    BEGIN
      UserSetup.RESET;
      UserSetup.GET(USERID);
      ItemJournaLine2.RESET;
      ItemJournaLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
      ItemJournaLine2.SETRANGE("Journal Template Name"  ,UserSetup."Journal Template Name Reclass");
      ItemJournaLine2.SETRANGE("Journal Batch Name"     ,UserSetup."Journal Batch Name Reclass");
      ItemJournaLine2.SETFILTER("Line No.",'<>%1',0);
      IF ItemJournaLine2.FINDSET THEN BEGIN
        CLEAR(ItemJnlPostBatch);
        ItemJnlPostBatch.RUN(ItemJournaLine2);
        //COMMIT;
        ConfirmCntrlTrackingJornlLabl(ItemJournaLine2."Journal Template Name",ItemJournaLine2."Journal Batch Name");

        ItemJlLine.RESET;
        ItemJlLine.SETRANGE("Journal Template Name"  ,UserSetup."Journal Template Name Reclass");
        ItemJlLine.SETRANGE("Journal Batch Name"     ,UserSetup."Journal Batch Name Reclass");
        IF ItemJlLine.FINDSET THEN
          ItemJlLine.DELETEALL;

        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE PostingJrnalScrap@1102401144(LabelEntry@1102401003 : Code[20]) : Boolean;
    VAR
      ItemJournaLine2@1102401002 : Record 83;
      ItmJnlPost@1102401001 : Codeunit 241;
      ItemJlLine@1102401004 : Record 83;
    BEGIN
      UserSetup.RESET;
      UserSetup.GET(USERID);
      ItemJournaLine2.RESET;
      ItemJournaLine2.SETRANGE("Journal Template Name"  ,UserSetup."Journal Template Name Reclass");
      ItemJournaLine2.SETRANGE("Journal Batch Name"     ,'SCRAP');
      IF ItemJournaLine2.FINDSET THEN BEGIN
        ItemJnlPostBatch.RUN(ItemJournaLine2);
        //COMMIT;
        ConfirmCntrlTrackingJornlLabl(ItemJournaLine2."Journal Template Name",ItemJournaLine2."Journal Batch Name");

        ItemJlLine.RESET;
        ItemJlLine.SETRANGE("Journal Template Name"  ,UserSetup."Journal Template Name Reclass");
        ItemJlLine.SETRANGE("Journal Batch Name"     ,'SCRAP');
        IF ItemJlLine.FINDSET THEN
          ItemJlLine.DELETEALL;
        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CodigoAuditoria@1102401005() : Code[1024];
    VAR
      ReasonCode@1102401001 : Record 231;
      CodAud@1102401002 : Code[1024];
    BEGIN
      ReasonCode.RESET;
      IF ReasonCode.FINDFIRST THEN BEGIN
        REPEAT
          CodAud:=CodAud+ReasonCode.Code+'|';
        UNTIL ReasonCode.NEXT=0;
      END;
      EXIT(CodAud);
    END;

    PROCEDURE CodigoAuditoriaRechazos@1102401146() : Code[1024];
    VAR
      ReasonCode@1102401001 : Record 231;
      CodAud@1102401002 : Code[1024];
      Scrap@1102401003 : Record 99000762;
    BEGIN
      {


      ReasonCode.RESET;
      ReasonCode.SETFILTER(Scrap,'=%1',TRUE);
      IF ReasonCode.FINDFIRST THEN BEGIN
        REPEAT
          CodAud:=CodAud+ReasonCode.Code+'|';
        UNTIL ReasonCode.NEXT=0;
      END;
      EXIT(CodAud);
      }
      CLEAR(CodAud);

      Scrap.RESET;
      IF Scrap.FINDFIRST THEN BEGIN
        REPEAT
          CodAud:= CodAud+Scrap.Code+'|';
        UNTIL Scrap.NEXT=0;
      END;
      EXIT(CodAud);
    END;

    PROCEDURE CodAuditoriaDescrip@1102401093(CodeA@1102401003 : Code[10]) : Code[100];
    VAR
      ReasonCode@1102401002 : Record 231;
    BEGIN
      ReasonCode.RESET;
      IF ReasonCode.GET(CodeA) THEN
        EXIT(ReasonCode.Description)
      ELSE
        EXIT('');
    END;

    PROCEDURE CodRechazoDescrip@1102401153(CodeA@1102401003 : Code[10]) : Code[100];
    VAR
      Scrap@1102401002 : Record 99000762;
    BEGIN
      Scrap.RESET;
      IF Scrap.GET(CodeA) THEN
        EXIT(Scrap.Description)
      ELSE
        EXIT('');
    END;

    PROCEDURE CodigoParo@1102401150() : Code[1024];
    VAR
      Stop@1102401001 : Record 99000761;
      StopCode@1102401002 : Code[1024];
    BEGIN
      CLEAR(StopCode);
      Stop.RESET;
      IF Stop.FINDSET THEN BEGIN
        REPEAT
          StopCode := StopCode+Stop.Code+'|';
        UNTIL Stop.NEXT=0;
      END;
      EXIT(StopCode);
    END;

    PROCEDURE CodParoDescrip@1102401149(StopCode@1102401003 : Code[10]) : Code[100];
    VAR
      Stop@1102401002 : Record 99000761;
    BEGIN
      Stop.RESET;
      IF Stop.GET(StopCode) THEN
        EXIT(Stop.Description)
      ELSE
        EXIT('');
    END;

    PROCEDURE AllLocation@1102401011() : Code[1024];
    VAR
      SetupManufacturing@1102401001 : Record 99000765;
      Location@1102401002 : Record 14;
      all@1102401003 : Code[1024];
    BEGIN
      ManufacturingSetup.GET();
      Location.RESET;
      IF Location.FINDSET THEN
        REPEAT
          all := all + Location.Code+'|';
        UNTIL Location.NEXT =0;
      EXIT(all);
    END;

    LOCAL PROCEDURE CodUbicacion@1102401016(CodAlmacen@1102401001 : Code[30];ItemNo@1102401004 : Code[30]) : Code[1024];
    VAR
      BinContent@1102401002 : Record 7302;
      Ubic@1102401003 : Code[1024];
      Item@1102401005 : Record 27;
    BEGIN
      BinContent.RESET;
      BinContent.SETRANGE("Item No."      ,ItemNo);
      BinContent.SETRANGE("Location Code" ,CodAlmacen);
      IF BinContent.FINDSET THEN BEGIN
        REPEAT
          Ubic := Ubic + BinContent."Bin Code"+'|';
        UNTIL BinContent.NEXT=0;
      END;
      EXIT(Ubic);
    END;

    PROCEDURE CodUbicDest@1102401008(CodAlmacen@1102401002 : Code[30]) : Code[1024];
    VAR
      Bin@1102401001 : Record 7354;
      CodUbDest@1102401003 : Code[1024];
    BEGIN
      Bin.RESET;
      Bin.SETRANGE("Location Code",CodAlmacen);
      IF Bin.FINDSET THEN BEGIN
        REPEAT
          CodUbDest := CodUbDest+Bin.Code+'|';
        UNTIL Bin.NEXT=0;
      END;
      EXIT(CodUbDest);
    END;

    PROCEDURE CalcDiaFin@1102401001(FechaInicial@1102401001 : Date;HoraInicial@1102401002 : Time;Horas@1102401003 : Decimal;InicioLabores@1102401006 : Time;FinLabores@1102401007 : Time;VAR DiaFinal@1102401004 : Date;VAR HoraFinal@1102401005 : Time);
    VAR
      HrsLaborables@1102401008 : Integer;
      DiasPorLaborar@1102401009 : Integer;
      MinutosPorLaborar@1102401010 : Integer;
    BEGIN

      HrsLaborables:=((FinLabores-InicioLabores)/3600000);

      IF Horas > HrsLaborables THEN BEGIN
        DiasPorLaborar:=ROUND(Horas/HrsLaborables,1,'=');
        MinutosPorLaborar:=(Horas MOD HrsLaborables)*3600000;
      END ELSE BEGIN
        DiasPorLaborar:=0;
        MinutosPorLaborar:=Horas*3600000;
      END;
      DiaFinal:=FechaInicial+DiasPorLaborar;
      HoraFinal:=InicioLabores+MinutosPorLaborar
    END;

    PROCEDURE CalcDiaFin2@1102401002(InicioLabores@1102401006 : Time;FinLabores@1102401007 : Time);
    VAR
      HrsLaborable@1102401008 : Integer;
    BEGIN

      MESSAGE('%1',FORMAT((FinLabores-InicioLabores)/3600000))
    END;

    LOCAL PROCEDURE GetValueField@1102401015(EDIText@1102401002 : Text[500];VAR EDITFields@1102401001 : ARRAY [25] OF Text[100]);
    VAR
      TmpText@1102401003 : Text[100];
      Char1@1102401004 : Text[1];
      Index@1102401005 : Integer;
      ArrayIndex@1102401006 : Integer;
    BEGIN
      ArrayIndex:=1;
      TmpText:='';
      FOR Index:=1 TO STRLEN(EDIText) DO BEGIN
        Char1:=COPYSTR(EDIText,Index,1);
        IF IsX12Delimiter(Char1) THEN  BEGIN
          EDITFields[ArrayIndex]:=TmpText;
          ArrayIndex+=1;
          TmpText:='';
        END ELSE BEGIN
          TmpText+=Char1;
        END;
      END;
      EDITFields[ArrayIndex]:=TmpText;
    END;

    LOCAL PROCEDURE IsX12Delimiter@1102401018(Char1@1102401001 : Text[1]) : Boolean;
    BEGIN
      IF Char1='|' THEN
        EXIT(TRUE);
      IF Char1='_' THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE DeleteDelim@1102401004(TextVar@1102401001 : Code[100]) : Code[250];
    VAR
      TextRetrn@1102401007 : Code[250];
      TextReal@1102401002 : Code[100];
      Delim1@1102401003 : Code[3];
      Delim2@1102401004 : Code[3];
      Delim3@1102401005 : Code[3];
      Long@1102401006 : Integer;
      TextSupplier@1102401011 : Code[100];
      Customer@1102401012 : Record 18;
      Item@1102401008 : Record 27;
    BEGIN
      Delim1    :=  '1D';
      Delim2    :=  '1E';
      Delim3    :=  '04';
      Long      :=  STRLEN(TextVar);
      TextReal  :=  COPYSTR(TextVar,1,2);
      TextRetrn :=  '';

      //busca conicidencias con productos

      IF Long <= 20 THEN  BEGIN
        Item.RESET;
        Item.SETRANGE("No.",TextVar);
        IF Item.FINDSET THEN BEGIN
          TextRetrn:=TextVar;
          EXIT(TextRetrn);
        END;
      END
      ELSE
      EXIT(TextRetrn);


      //>>Elimina Delimitador
      IF (TextReal = Delim1) OR (TextReal = Delim2) OR (TextReal = Delim3) THEN BEGIN
        TextRetrn:=COPYSTR(TextVar,3,Long);
      END
      ELSE BEGIN
        TextRetrn:=TextVar;
      END;
      EXIT(TextRetrn);
    END;

    PROCEDURE AsigStatusLabel@1102401017(EntryLbl@1102401003 : Code[30];TypEntry@1102401004 : Code[30]);
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      EntryNo@1102401001 : Integer;
      ReservationEntry@1102401005 : Record 337;
    BEGIN
      EVALUATE(EntryNo,EntryLbl);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETCURRENTKEY("Entry No.");
      LabelLedgerEntry.SETRANGE("Entry No.",EntryNo);
      IF LabelLedgerEntry.FINDSET THEN BEGIN
      //IF LabelLedgerEntry.GET(EntryNo) THEN BEGIN
        IF ((TypEntry = 'CONSUMO')  OR (TypEntry = 'SALIDA') OR (TypEntry = 'TRASPASOS') OR
            (TypEntry = 'CUARENTENA') OR (TypEntry = 'EMBARQUES') OR (TypEntry = 'LIBERACIONLOTE'))THEN
          LabelLedgerEntry."Label Status" :=  LabelLedgerEntry."Label Status"::Almacen;

        IF ((TypEntry = 'FACTURA') OR (TypEntry = 'ENVIOS')) THEN
          LabelLedgerEntry."Label Status" :=  LabelLedgerEntry."Label Status"::Terminada;

        IF (TypEntry = 'CONSIGNACION') THEN
          LabelLedgerEntry."Label Status" :=  LabelLedgerEntry."Label Status"::Consignacion;

        //>>Bloqueo Etiquetas Calidad
        IF (TypEntry = 'CUARENTENA') THEN
          LabelLedgerEntry."Quality Control":= LabelLedgerEntry."Quality Control"::"Bloqueado Calidad";

        //>>DesBloqueo Etiqueta Calidad
        IF (TypEntry = 'TRASPASOS') THEN BEGIN
          IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Bloqueado Calidad" THEN
            LabelLedgerEntry."Quality Control" := LabelLedgerEntry."Quality Control"::"Liberado Calidad";
        END;

        LabelLedgerEntry.MODIFY(TRUE);
      END;
    END;

    PROCEDURE AsigStatusLabelPre@1102401085(EntryLbl@1102401003 : Code[30];TypEntry@1102401004 : Code[30];IDSOurce@1102401006 : Code[30]);
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      EntryNo@1102401001 : Integer;
      ReservationEntry@1102401005 : Record 337;
    BEGIN
      EVALUATE(EntryNo,EntryLbl);
      LabelLedgerEntry.RESET;
      IF LabelLedgerEntry.GET(EntryNo) THEN BEGIN
        IF ((TypEntry = 'CONSUMO')  OR (TypEntry = 'SALIDA') OR (TypEntry = 'TRASPASOS') OR (TypEntry = 'CUARENTENA') OR (TypEntry = 'EMBARQUES'))THEN
          LabelLedgerEntry."Pre-Label Status" :=  LabelLedgerEntry."Pre-Label Status"::Almacen;

        IF ((TypEntry = 'FACTURA') OR (TypEntry = 'ENVIOS')) THEN BEGIN
          LabelLedgerEntry."Pre-Label Status" :=  LabelLedgerEntry."Pre-Label Status"::Terminada;
          LabelLedgerEntry.IDSourcePostin := IDSOurce;
        END;

        IF (TypEntry = 'CONSIGNACION') THEN
          LabelLedgerEntry."Pre-Label Status" :=  LabelLedgerEntry."Pre-Label Status"::Consignacion;

        LabelLedgerEntry.MODIFY(TRUE);
       END;
    END;

    PROCEDURE CheckDateWeeked@1102401026(PostDate@1102401001 : Date);
    VAR
      WeekNumber@1102401002 : Integer;
      WeekNoWork@1102401003 : Integer;
    BEGIN
      WeekNumber := DATE2DWY(WORKDATE, 2);
      WeekNoWork := DATE2DWY(PostDate, 2);
      IF (WeekNumber <> WeekNoWork) THEN
        ERROR('La Fecha de Registro %1 no corresponde a la Semana Actual',PostDate);
    END;

    PROCEDURE ValidateClosedOP@1102401021(NoProductionOrder@1102401008 : Code[30]) : Boolean;
    VAR
      LabelLedgerEntry@1102401003 : Record 50011;
      QtyLabPrintd@1102401004 : Decimal;
      QtyLblCancel@1102401005 : Decimal;
      ProdOrderComponent@1102401006 : Record 5407;
      ProdOrderLine@1102401002 : Record 5406;
      ActiveError@1102401007 : Boolean;
      ProductionOrder@1102401001 : Record 5405;
    BEGIN
      ///>>Verifica Etiquetas

      ProductionOrder.RESET;
      ProductionOrder.SETCURRENTKEY(Status,"No.");
      ProductionOrder.GET(ProductionOrder.Status::Released,NoProductionOrder);

      ProdOrderLine.RESET;
      ProdOrderLine.SETRANGE(Status             ,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No."  ,ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;

      ActiveError:=FALSE;
      QtyLabPrintd:=0;
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETRANGE("Document No.",ProductionOrder."No.");
      LabelLedgerEntry.SETFILTER(CANCELADO    ,'=%1',FALSE);
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF LabelLedgerEntry."Label Status" = LabelLedgerEntry."Label Status"::Pendiente THEN BEGIN
             ActiveError:=TRUE;
          END;
          QtyLabPrintd :=QtyLabPrintd +LabelLedgerEntry.Quantity;
        UNTIL LabelLedgerEntry.NEXT=0;
      END;
      //<<

      IF (ActiveError) THEN
       ERROR('Error, Hay Etiquetas Pendientes por Registrar!!');

      IF ProdOrderLine.Quantity <> 1 THEN BEGIN
        //>>compara Cant. OP VS. Cant. Label
        IF QtyLabPrintd < ProdOrderLine.Quantity THEN
          IF NOT CONFIRM('La Cantidad Etiquetada %1, es menor que la Cantidad Esperada,Desea Continuar') THEN BEGIN
            ERROR('Favor de Verificar la OP');
          END;

          //MESSAGE('La Cantidad Etiquetada %1, es menor que la Cantidad Esperada %2!!',QtyLabPrintd,ProdOrderLine.Quantity);
        ////<<

        //>>verifica Material de Consumo
        ActiveError:=FALSE;
        ProdOrderComponent.RESET;
        ProdOrderComponent.SETRANGE(Status                  ,ProdOrderLine.Status);
        ProdOrderComponent.SETRANGE("Prod. Order No."       ,ProdOrderLine."Prod. Order No.");
        ProdOrderComponent.SETRANGE("Prod. Order Line No."  ,ProdOrderLine."Line No.");
        ProdOrderComponent.SETFILTER("Item No.",'<>%1','3*');
        IF ProdOrderComponent.FINDSET THEN BEGIN
          REPEAT
            ProdOrderComponent.CALCFIELDS("Act. Consumption (Qty)");
            IF ProdOrderComponent."Flushing Method" <> ProdOrderComponent."Flushing Method"::Manual THEN BEGIN
            IF (ProdOrderComponent."Act. Consumption (Qty)" < ProdOrderComponent."Expected Quantity") THEN BEGIN
              ActiveError:=TRUE;
            END;
            END;
          UNTIL ProdOrderComponent.NEXT=0;
        END;

        IF (ActiveError) THEN
          ERROR('No se puede Cerrar la OP, hay Materiales pendientes por Consumir..');
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateNextDocNo@4(ItemJnlLine@1102401001 : Record 83) : Code[30];
    VAR
      ItemJnlBatch@1102401002 : Record 233;
      NextDocNo@1102401003 : Code[30];
      NoSeriesMgt@1102401005 : Codeunit 396;
    BEGIN
      ItemJnlBatch.GET(ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      IF ItemJnlBatch."No. Series" = '' THEN
        NextDocNo := 'HH-'+FORMAT(WORKDATE,0,'<day,2>-<Month,2>-<YEAR4>')
      ELSE BEGIN
        //NextDocNo :=
        NextDocNo := NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series",WORKDATE,TRUE);
        CLEAR(NoSeriesMgt);
      END;
      EXIT(NextDocNo);
    END;

    PROCEDURE ValidExistOP@1102401024(OP@1102401001 : Code[30];VAR Messg@1102401003 : Code[100]) : Boolean;
    VAR
      ProductionOrder@1102401002 : Record 5405;
      DebHH@1102401004 : Record 50100;
      EntryNoTemp@1102401005 : Integer;
    BEGIN
      //ProductionOrder.RESET;
      //ProductionOrder.SETFILTER(Status,'=%1',ProductionOrder.Status::Finished);
      //ProductionOrder.SETFILTER("No.",OP);

      ProductionOrder.RESET;
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Finished,ProductionOrder.Status::Finished);
      ProductionOrder.SETRANGE("No.",OP,OP);

      IF ProductionOrder.FINDSET THEN BEGIN
        Messg:='Error, La Orden '+OP+' ya fue Cerrada!';
        DebHH.RESET;
        EntryNoTemp:=1;
        IF DebHH.FINDLAST THEN
          EntryNoTemp:=1
        ELSE
          EntryNoTemp:=DebHH."Entry No"+1;
        DebHH.INIT;
        DebHH."Entry No":=EntryNoTemp;
        DebHH."Order Production NO":=OP;
        DebHH."Read Date":=TODAY;
        DebHH."Read Time":=TIME;
        DebHH.INSERT;

        EXIT(FALSE)
      END;

      ProductionOrder.RESET;
      ProductionOrder.SETFILTER(Status,'=%1|=%2|=%3|=%4',ProductionOrder.Status::Simulated,ProductionOrder.Status::Planned,ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);
      ProductionOrder.SETFILTER("No.",OP);
      IF ProductionOrder.FINDSET THEN BEGIN
        Messg:='';
        EXIT(TRUE)
      END
      ELSE BEGIN
        Messg:='No Existe la OP ingresada';
        EXIT(FALSE);
      END
    END;

    PROCEDURE ValidateStatusEntryLabel@1102401048(AuditoriaEmb@1102401002 : Code[50];EntryLabel@1102401004 : Code[30]) : Boolean;
    VAR
      AuditShipmentHeader@1102401001 : Record 50062;
      AuditShipmentLines@1102401003 : Record 50063;
      LabelLedgerEntry@1102401005 : Record 50011;
      EntryL@1102401006 : Integer;
    BEGIN
      EVALUATE(EntryL,EntryLabel);
      AuditShipmentHeader.RESET;
      IF AuditShipmentHeader.GET(AuditoriaEmb) THEN BEGIN
        LabelLedgerEntry.RESET;
        IF LabelLedgerEntry.GET(EntryL) THEN BEGIN
          LabelLedgerEntry."Audit Shipment"    :=TRUE;
          LabelLedgerEntry."Audit Shipment No" :=AuditoriaEmb;
          LabelLedgerEntry.MODIFY;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ValidateQtyNegativeConsumption@1102401053(JournalTemplateName@1102401002 : Code[30];JournalBatchName@1102401001 : Code[30];NoLineJournal@1102401008 : Integer;ItemNo@1102401007 : Code[30]) : Boolean;
    VAR
      ItemJournalLine@1102401003 : Record 83;
      ItemJournalLine2@1102401004 : Record 83;
      QtyJurnal@1102401005 : Decimal;
      LabelLedgerEntry@1102401006 : Record 50011;
    BEGIN
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETRANGE("Journal Template Name" ,JournalTemplateName);
      LabelLedgerEntry.SETRANGE("Journal Batch Name"    ,JournalBatchName);
      LabelLedgerEntry.SETRANGE("Journal Line No."      ,NoLineJournal);
      LabelLedgerEntry.SETRANGE("Source No."            ,ItemNo);
      LabelLedgerEntry.SETFILTER("Selected Label"       ,'=%1',TRUE);
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          QtyJurnal :=0;
          QtyJurnal := LabelLedgerEntry."Consumption Qty";
          IF (QtyJurnal < 0) THEN
            EXIT(TRUE);
        UNTIL LabelLedgerEntry.NEXT=0;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE ConsultUser@1102401023() : Integer;
    VAR
      UserSetup@1102401002 : Record 91;
      OpRole@1102401001 : Integer;
    BEGIN
      CLEAR(OpRole);
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Hand Held Role");
      OpRole:=UserSetup."Hand Held Role";
      EXIT(OpRole);
    END;

    LOCAL PROCEDURE ConsultLotNo@1102401031(EntryLabl@1102401006 : Code[10];ItemNo@1102401007 : Code[30];NoLot@1102401005 : Code[30];Qty@1102401003 : Decimal;VAR CodAlm@1102401002 : Code[30];VAR CodUbi@1102401001 : Code[30]) : Boolean;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedgerEntry@1102401004 : Record 50011;
      LabelLedEntryTracking@1102401008 : Record 50064;
      EntryL@1102401009 : Integer;
      item3@1102401011 : Code[1];
      WarehouseEntry@1102401012 : Record 7312;
      QtyPhysInvNAV@1102401013 : Decimal;
    BEGIN
      CodAlm:='';
      CodUbi :='';

      CLEAR(item3);
      item3 := COPYSTR(ItemNo,1,1);
      IF (item3 <> '3') THEN BEGIN
        EVALUATE(EntryL,EntryLabl);
        LabelLedEntryTracking.RESET;
        LabelLedEntryTracking.SETFILTER("Entry No. Label",'=%1',EntryL);
        LabelLedEntryTracking.SETFILTER("Journal Register",'=%1',TRUE);
        IF LabelLedEntryTracking.FINDLAST THEN BEGIN
          CodAlm  :=LabelLedEntryTracking."Location Code";
          CodUbi  :=LabelLedEntryTracking."Bin Code";
          EXIT(TRUE);
        END
        ELSE BEGIN
          Query1.SETRANGE(Item_No ,ItemNo);
          Query1.SETRANGE(Lot_No  ,NoLot);
          Query1.OPEN;
          //Query1.READ;
          WHILE Query1.READ DO BEGIN
            IF Query1.Sum_Qty_Base >= Qty THEN BEGIN
              CodAlm:=Query1.Location_Code;
              CodUbi:=Query1.Bin_Code;
              Query1.CLOSE;
              EXIT(TRUE);
            END;
          END;
          Query1.CLOSE;
      IF (CodAlm = '') AND (CodUbi= '') THEN BEGIN
          WarehouseEntry.RESET;
          WarehouseEntry.SETRANGE("Item No."      ,ItemNo);
          WarehouseEntry.SETRANGE("Lot No."       ,NoLot);
          IF WarehouseEntry.FINDSET THEN BEGIN
            WarehouseEntry.CALCSUMS("Qty. (Base)");
            QtyPhysInvNAV:=WarehouseEntry."Qty. (Base)";
            IF QtyPhysInvNAV  >= Qty THEN BEGIN
              CodAlm:=WarehouseEntry."Location Code";
              CodUbi:=WarehouseEntry."Bin Code";
            END;
          END;
        END;
        END;
      END
      ELSE BEGIN
        Query1.SETRANGE(Item_No ,ItemNo);
        Query1.OPEN;
        WHILE Query1.READ DO BEGIN
          IF Query1.Sum_Qty_Base >= Qty THEN BEGIN
            CodAlm:=Query1.Location_Code;
            CodUbi:=Query1.Bin_Code;
            Query1.CLOSE;
            EXIT(TRUE);
          END;
        END;
        Query1.CLOSE;
      END;


      IF (CodAlm = '') AND (CodUbi= '') THEN
        ERROR('No se encontro Disponibilidad en Almacen/Ubicacion %1, %2 , %3, %4',CodAlm,CodUbi,ItemNo,NoLot);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ConsultLotNoInventary@1102401051(EntryLabl@1102401006 : Code[10];ItemNo@1102401007 : Code[30];NoLot@1102401005 : Code[30];Qty@1102401003 : Decimal;VAR CodAlm@1102401002 : Code[30];VAR CodUbi@1102401001 : Code[30];VAR QtyPhys@1102401011 : Decimal) : Boolean;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedEntryTracking@1102401008 : Record 50064;
      EntryL@1102401009 : Integer;
    BEGIN
      CodAlm  :='';
      CodUbi  :='';
      QtyPhys :=0;
      EVALUATE(EntryL,EntryLabl);
      LabelLedEntryTracking.RESET;
      LabelLedEntryTracking.SETFILTER("Entry No. Label",'=%1',EntryL);
      LabelLedEntryTracking.SETFILTER("Journal Register",'=%1',TRUE);
      LabelLedEntryTracking.SETFILTER("Location Code",'<>%1','100');
      IF LabelLedEntryTracking.FINDLAST THEN BEGIN
        CodAlm  :=LabelLedEntryTracking."Location Code";
        CodUbi  :=LabelLedEntryTracking."Bin Code";
        QtyPhys :=LabelLedEntryTracking.Quantity;
        EXIT(TRUE);
      END
      ELSE BEGIN
        Query1.SETRANGE(Item_No ,ItemNo);
        Query1.SETRANGE(Lot_No  ,NoLot);
        Query1.OPEN;
        WHILE Query1.READ DO BEGIN
          IF Query1.Sum_Qty_Base >= Qty THEN BEGIN
            CodAlm:=Query1.Location_Code;
            CodUbi:=Query1.Bin_Code;
            QtyPhys:=Query1.Sum_Qty_Base;
            Query1.CLOSE;
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ConsultExistLotNo@1102401036(ItemNo@1102401007 : Code[30];NoLot@1102401005 : Code[30];CodAlm@1102401002 : Code[30];CodUbi@1102401001 : Code[30]) : Decimal;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedgerEntry@1102401004 : Record 50011;
      LabelLedEntryTracking@1102401008 : Record 50064;
      EntryL@1102401009 : Integer;
      Qty@1102401003 : Decimal;
    BEGIN
      Qty :=0;
      Query1.SETRANGE(Item_No       ,ItemNo);
      Query1.SETRANGE(Lot_No        ,NoLot);
      Query1.SETRANGE(Location_Code ,CodAlm);
      Query1.SETRANGE(Bin_Code      ,CodUbi);
      Query1.OPEN;
      IF Query1.READ THEN BEGIN
        //WHILE Query1.READ DO BEGIN
        Qty := Query1.Sum_Qty_Base;
      END;
      Query1.CLOSE;
      EXIT(Qty);
    END;

    LOCAL PROCEDURE ConsultExistItemNAV@1102401101(ItemNo@1102401007 : Code[30];NoLot@1102401005 : Code[30];CodAlm@1102401002 : Code[30]) Qty : Decimal;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedgerEntry@1102401004 : Record 50011;
      LabelLedEntryTracking@1102401008 : Record 50064;
      EntryL@1102401009 : Integer;
      item3@1102401011 : Code[1];
      WarehouseEntry@1102401012 : Record 7312;
      QtyPhysInvNAV@1102401013 : Decimal;
    BEGIN
      Qty:=0;
      WarehouseEntry.RESET;
      WarehouseEntry.SETRANGE("Item No."      ,ItemNo);
      WarehouseEntry.SETRANGE("Lot No."       ,NoLot);
      WarehouseEntry.SETRANGE("Location Code" ,CodAlm);
      IF WarehouseEntry.FINDSET THEN BEGIN
        WarehouseEntry.CALCSUMS("Qty. (Base)");
        Qty:=WarehouseEntry."Qty. (Base)";
      END;
      EXIT(Qty);
    END;

    PROCEDURE ConsultAuditShipment@1102401049() RtnAuditShip : Code[1024];
    VAR
      AuditShipmentHeader@1102401001 : Record 50062;
    BEGIN
      RtnAuditShip:='';
      AuditShipmentHeader.RESET;
      AuditShipmentHeader.SETFILTER(Status,'<>%1',1);
      IF AuditShipmentHeader.FINDSET THEN
      REPEAT
        RtnAuditShip := RtnAuditShip+AuditShipmentHeader."No."+'|';
      UNTIL AuditShipmentHeader.NEXT=0;
      EXIT(RtnAuditShip);
    END;

    PROCEDURE ConsultInvPhysCode@1102401007() : Code[1024];
    VAR
      Location@1102401001 : Record 14;
      RtrnInv@1102401002 : Code[1024];
    BEGIN
      CLEAR(RtrnInv);
      Location.RESET;
      Location.SETFILTER("Activate Inventory",'=%1',TRUE);
      IF Location.FINDSET THEN BEGIN
        REPEAT
          RtrnInv:=RtrnInv+Location."Inventory Physical Code"+'|';
        UNTIL Location.NEXT=0;
      END;
      EXIT(RtrnInv)
    END;

    PROCEDURE ConsultBloqLabel@1102401109(ItemNo@1102401001 : Code[50];LotNo@1102401002 : Code[50]) : Boolean;
    VAR
      LotNoInformation@1102401003 : Record 6505;
    BEGIN
      LotNoInformation.RESET;
      LotNoInformation.SETRANGE("Item No.",ItemNo);
      LotNoInformation.SETRANGE("Lot No.",LotNo);
      IF LotNoInformation.FINDSET THEN BEGIN
        IF LotNoInformation.Blocked THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
      END
      ELSE
        ERROR('No se Encuentr¢ Informacion de Lote!!');
    END;

    PROCEDURE ConsultaLabel@1102401041(EntryLabel@1102401001 : Code[10];VAR OP@1102401002 : Code[30];VAR StatusLabel@1102401003 : Code[20];VAR NoItem@1102401004 : Code[30];VAR Description@1102401005 : Code[50];VAR LotNo@1102401008 : Code[30];VAR Qty@1102401006 : Code[30];VAR NoCopies@1102401007 : Code[30];VAR RemainingQty@1102401009 : Code[30];VAR LocationCode@1102401013 : Code[30];VAR BinCode@1102401014 : Code[30];VAR PhysicalLocation@1102401016 : Code[30];VAR StatusQuality@1102401015 : Code[50]) : Boolean;
    VAR
      LabelLedgerEntry@1102401010 : Record 50011;
      EntrLabl@1102401011 : Integer;
      Item@1102401012 : Record 27;
      LabelLedgerEntryTracking@1102401017 : Record 50064;
    BEGIN
      CLEAR(OP);
      CLEAR(StatusLabel);
      CLEAR(NoItem);
      CLEAR(Description);
      CLEAR(LotNo);
      CLEAR(Qty);
      CLEAR(NoCopies);
      CLEAR(RemainingQty);
      CLEAR(LocationCode);
      CLEAR(BinCode);
      CLEAR(PhysicalLocation);
      CLEAR(StatusQuality);

      EVALUATE(EntrLabl,EntryLabel);
      LabelLedgerEntry.SETCURRENTKEY("Entry No.");
      LabelLedgerEntry.GET(EntrLabl);
      Item.GET(LabelLedgerEntry."Source No.");

      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
      OP            := LabelLedgerEntry."Document No.";
      StatusLabel   := FORMAT(LabelLedgerEntry."Label Status");
      NoItem        := LabelLedgerEntry."Source No.";
      Description   := Item.Description;
      LotNo         := LabelLedgerEntry."Lot. No";
      Qty           := FORMAT(LabelLedgerEntry.Quantity);
      NoCopies      := FORMAT(LabelLedgerEntry."Print Copies");
      RemainingQty  := FORMAT(LabelLedgerEntry."Remaint Quantity Lot");
      StatusQuality := FORMAT(LabelLedgerEntry."Quality Control");
      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.SETRANGE("Entry No. Label",EntrLabl);
      LabelLedgerEntryTracking.SETRANGE("Journal Register",TRUE);
      IF LabelLedgerEntryTracking.FINDLAST THEN BEGIN
        LocationCode := LabelLedgerEntryTracking."Location Code";
        BinCode      :=LabelLedgerEntryTracking."Bin Code";
        PhysicalLocation  :=LabelLedgerEntryTracking."Physical Location";
      END
      ELSE BEGIN

      END;


      EXIT(TRUE);
    END;

    PROCEDURE ConsultQtyRemainLabel@1102401077(EntryLabel@1102401001 : Integer) : Decimal;
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
    BEGIN
      LabelLedgerEntry.GET(EntryLabel);
      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
      EXIT(LabelLedgerEntry."Remaint Quantity Lot");
    END;

    PROCEDURE ConsultLabelReaded@1102401058(SourceType@1102401001 : Code[20];LabelEntry@1102401002 : Code[10]) : Boolean;
    VAR
      NoLabel@1102401003 : Integer;
      BufferTableLabel@1102401004 : Record 50060;
    BEGIN
      EVALUATE(NoLabel,LabelEntry);
      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("Printed Entry No. Label" ,NoLabel);
      BufferTableLabel.SETRANGE("Type Transation"         ,SourceType);
      BufferTableLabel.SETFILTER("Label Readed"           ,'=%1',TRUE);
      IF BufferTableLabel.FINDSET THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ConsultNoCustomerAuditEmb@1102401080(AuditShipHCode@1102401002 : Code[30]) : Code[30];
    VAR
      AuditShipmentHeader@1102401001 : Record 50062;
    BEGIN
      AuditShipmentHeader.GET(AuditShipHCode);
        EXIT(AuditShipmentHeader."Customer No.");
    END;

    PROCEDURE ConsultaLoteEtiquetasSalidas@1102401097(EntryLabl@1102401006 : Integer;ItemNo@1102401007 : Code[30];NoLot@1102401005 : Code[30];Qty@1102401003 : Decimal) : Boolean;
    VAR
      Query1@1102401010 : Query 7300;
      LabelLedEntryTracking@1102401008 : Record 50064;
      LabelLedgerEntryReal@1102401004 : Record 50011;
      CodAlm@1102401009 : Code[30];
      CodUbi@1102401002 : Code[30];
      QtyPhys@1102401001 : Decimal;
      Encontrado@1102401011 : Boolean;
      QtyNAV@1102401012 : Decimal;
      WarehouseEntry@1102401013 : Record 7312;
      ItemLedgerEntry@1102401014 : Record 32;
    BEGIN
      QtyNAV:=0;
      WarehouseEntry.RESET;
      WarehouseEntry.SETRANGE("Item No."  ,ItemNo);
      WarehouseEntry.SETRANGE("Lot No."   ,NoLot);
      IF WarehouseEntry.FINDSET THEN BEGIN
        WarehouseEntry.CALCSUMS("Qty. (Base)");
        QtyNAV:=WarehouseEntry."Qty. (Base)";
        IF (QtyNAV = 0) THEN BEGIN
          LabelLedgerEntryReal.GET(EntryLabl);
          LabelLedgerEntryReal."Label Status"       := LabelLedgerEntryReal."Label Status"::Terminada;
          //LabelLedgerEntryReal."Remaining Quantity Label" := 0;
          LabelLedgerEntryReal."Pre-Label Status"   := LabelLedgerEntryReal."Pre-Label Status"::Terminada;
          LabelLedgerEntryReal.MODIFY;
        END
        ELSE BEGIN
         ItemLedgerEntry.RESET;
         ItemLedgerEntry.SETRANGE("Item No."              ,ItemNo);
         ItemLedgerEntry.SETRANGE("Lot No."               ,NoLot);
         ItemLedgerEntry.SETRANGE("External Document No." ,FORMAT(EntryLabl));
         ItemLedgerEntry.SETRANGE("Entry Type"            ,ItemLedgerEntry."Entry Type"::Output);
         IF ItemLedgerEntry.FINDSET THEN BEGIN
           IF ItemLedgerEntry.Open = FALSE THEN BEGIN
            LabelLedgerEntryReal.GET(EntryLabl);
            LabelLedgerEntryReal."Label Status"       := LabelLedgerEntryReal."Label Status"::Terminada;
            //LabelLedgerEntryReal."Remaining Quantity Label" := 0;
            LabelLedgerEntryReal."Pre-Label Status"   := LabelLedgerEntryReal."Pre-Label Status"::Terminada;
            LabelLedgerEntryReal.MODIFY;
           END;
         END
         ELSE BEGIN
           LabelLedgerEntryReal.GET(EntryLabl);
           {
           IF QtyNAV > Qty THEN
            LabelLedgerEntryReal."Remaining Quantity Label" := LabelLedgerEntryReal.Quantity
           ELSE
             LabelLedgerEntryReal."Remaining Quantity Label" :=QtyNAV;

           IF LabelLedgerEntryReal."Label Type" = LabelLedgerEntryReal."Label Type"::Produccion THEN
             LabelLedgerEntryReal."Remaining Quantity Label" :=0;
             }
           LabelLedgerEntryReal."Label Status"       := LabelLedgerEntryReal."Label Status"::Almacen;
           LabelLedgerEntryReal."Pre-Label Status"   := LabelLedgerEntryReal."Pre-Label Status"::Almacen;
           LabelLedgerEntryReal.MODIFY;
         END;

        END;
      END
      ELSE BEGIN
        LabelLedgerEntryReal.GET(EntryLabl);
        LabelLedgerEntryReal."Label Status" := LabelLedgerEntryReal."Label Status"::Terminada;
        //LabelLedgerEntryReal."Remaining Quantity Label" := 0;
        LabelLedgerEntryReal."Pre-Label Status" := LabelLedgerEntryReal."Pre-Label Status"::Terminada;
        LabelLedgerEntryReal.MODIFY;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ConsultStatusControlCalidad@1102401121(EntryLabel@1102401001 : Code[20]);
    VAR
      LabelNo@1102401003 : Integer;
    BEGIN
      EVALUATE(LabelNo,EntryLabel);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(LabelNo);
      IF (LabelLedgerEntry."Label Status" <> LabelLedgerEntry."Label Status"::Pendiente) THEN
        ERROR('La Etiqueta %1, ya paso por Proceso Inicial de Calidad',LabelNo);

      IF (LabelLedgerEntry."Quality Control" <> LabelLedgerEntry."Quality Control"::"Pendiente Liberacion") THEN
        ERROR('Estatus de Calidad debe estar Pendiente de liberacion');
    END;

    PROCEDURE ConsultStatusControlCalidadLiberacion@1102401118(EntryLabel@1102401001 : Code[20]);
    VAR
      LabelNo@1102401003 : Integer;
    BEGIN
      EVALUATE(LabelNo,EntryLabel);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(LabelNo);

      IF (LabelLedgerEntry."Quality Control" <> LabelLedgerEntry."Quality Control"::"Bloqueado Calidad") THEN
        ERROR('La Etiqueta %1 se encuentra Liberada',LabelNo);
    END;

    LOCAL PROCEDURE ControlTrackingLabel@1102401030(LabelLedEntry@1102401009 : Code[30];SourceDoc@1102401006 : Code[30];ItemJournalLine@1102401010 : Record 83;PhysicalLocation@1102401011 : Code[60];LocationCode1@1102401012 : Code[30];BinCode1@1102401013 : Code[30];Qty@1102401014 : Decimal;EntryType@1102401015 : Option) : Integer;
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      LabelLedgerEntryTrancking@1102401003 : Record 50064;
      EntryNo@1102401004 : Integer;
      TmpLbelLedgerEntryTrancking@1102401005 : Record 50064;
      EntryLabel@1102401001 : Integer;
      CodeLocation@1102401008 : Code[30];
      CodeBin@1102401007 : Code[30];
    BEGIN
      EVALUATE(EntryLabel,LabelLedEntry);
      LabelLedgerEntry.GET(EntryLabel);
      LabelLedgerEntry."Pre Physical Location":=PhysicalLocation;
      LabelLedgerEntry."Pre-Label Status" := LabelLedgerEntry."Pre-Label Status"::Almacen;
      LabelLedgerEntry.MODIFY;

      TmpLbelLedgerEntryTrancking.RESET;
      IF TmpLbelLedgerEntryTrancking.FINDLAST THEN
        EntryNo := TmpLbelLedgerEntryTrancking."Entry No."+2
      ELSE
        EntryNo := 1;
      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");

      LabelLedgerEntryTrancking.INIT;
      LabelLedgerEntryTrancking.VALIDATE("Entry No.",EntryNo);
      LabelLedgerEntryTrancking.INSERT(TRUE);
      LabelLedgerEntryTrancking.VALIDATE("Entry No. Label"        , LabelLedgerEntry."Entry No.");
      LabelLedgerEntryTrancking.VALIDATE("Label Type"             , LabelLedgerEntry."Label Type");
      LabelLedgerEntryTrancking.VALIDATE("Label No"               , LabelLedgerEntry."Label No");
      LabelLedgerEntryTrancking.VALIDATE("Source No."             , LabelLedgerEntry."Source No.");
      LabelLedgerEntryTrancking.VALIDATE("Document No."           , LabelLedgerEntry."Document No.");
      LabelLedgerEntryTrancking.VALIDATE("Source Type"            , LabelLedgerEntry."Source Type");
      LabelLedgerEntryTrancking.VALIDATE("Document Type"          , LabelLedgerEntry."Document Type");
      LabelLedgerEntryTrancking.VALIDATE("Lot. No"                , LabelLedgerEntry."Lot. No");
      LabelLedgerEntryTrancking.VALIDATE("Label Production Type"  , LabelLedgerEntry."Label Production Type");
      LabelLedgerEntryTrancking.VALIDATE("Turn Code"              , LabelLedgerEntry."Turn Code");
      LabelLedgerEntryTrancking.VALIDATE("Fecha Registro"         , CREATEDATETIME(WORKDATE,TIME));
      LabelLedgerEntryTrancking.VALIDATE("User ID"                , USERID);
      LabelLedgerEntryTrancking.VALIDATE(Modified                 , TRUE);
      LabelLedgerEntryTrancking.VALIDATE("Label Status"           , LabelLedgerEntry."Label Status");
      LabelLedgerEntryTrancking.VALIDATE("Physical Location"      , PhysicalLocation);
      LabelLedgerEntryTrancking.VALIDATE("Source Document"        , SourceDoc);
      LabelLedgerEntryTrancking.VALIDATE("Remaining Quantity"     , LabelLedgerEntry."Remaint Quantity Lot");
      LabelLedgerEntryTrancking.VALIDATE("Journal Template Name"  , ItemJournalLine."Journal Template Name");
      LabelLedgerEntryTrancking.VALIDATE("Journal Batch Name"     , ItemJournalLine."Journal Batch Name");
      LabelLedgerEntryTrancking.VALIDATE("Journal Line No."       , ItemJournalLine."Line No.");
      LabelLedgerEntryTrancking.VALIDATE("Location Code"          , LocationCode1);
      LabelLedgerEntryTrancking.VALIDATE("Bin Code"               , BinCode1);
      LabelLedgerEntryTrancking.VALIDATE(Quantity                 , Qty);
      LabelLedgerEntryTrancking."Entry Type"                      :=EntryType;
      LabelLedgerEntryTrancking.MODIFY(TRUE);
      EXIT(LabelLedgerEntryTrancking."Entry No.");
    END;

    LOCAL PROCEDURE ControlTrackingLabelAjusNeg@1102401104(LabelLedEntry@1102401009 : Code[30];SourceDoc@1102401006 : Code[30];ItemJournalLine@1102401010 : Record 83;PhysicalLocation@1102401011 : Code[60];LocationCode1@1102401012 : Code[30];BinCode1@1102401013 : Code[30];Qty@1102401014 : Decimal;EntryType@1102401015 : Option);
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      LabelLedgerEntryTrancking@1102401003 : Record 50064;
      EntryNo@1102401004 : Integer;
      TmpLbelLedgerEntryTrancking@1102401005 : Record 50064;
      EntryLabel@1102401001 : Integer;
      CodeLocation@1102401008 : Code[30];
      CodeBin@1102401007 : Code[30];
    BEGIN
      EVALUATE(EntryLabel,LabelLedEntry);
      LabelLedgerEntry.GET(EntryLabel);

      TmpLbelLedgerEntryTrancking.RESET;
      IF TmpLbelLedgerEntryTrancking.FINDLAST THEN
        EntryNo := TmpLbelLedgerEntryTrancking."Entry No."+1
      ELSE
        EntryNo := 1;


      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
      LabelLedgerEntryTrancking.INIT;
      LabelLedgerEntryTrancking.VALIDATE("Entry No.",EntryNo);
      LabelLedgerEntryTrancking.INSERT(TRUE);
      LabelLedgerEntryTrancking.VALIDATE("Entry No. Label"        , LabelLedgerEntry."Entry No.");
      LabelLedgerEntryTrancking.VALIDATE("Label Type"             , LabelLedgerEntry."Label Type");
      LabelLedgerEntryTrancking.VALIDATE("Label No"               , LabelLedgerEntry."Label No");
      LabelLedgerEntryTrancking.VALIDATE("Source No."             , LabelLedgerEntry."Source No.");
      LabelLedgerEntryTrancking.VALIDATE("Document No."           , LabelLedgerEntry."Document No.");
      LabelLedgerEntryTrancking.VALIDATE("Source Type"            , LabelLedgerEntry."Source Type");
      LabelLedgerEntryTrancking.VALIDATE("Document Type"          , LabelLedgerEntry."Document Type");
      LabelLedgerEntryTrancking.VALIDATE("Lot. No"                , LabelLedgerEntry."Lot. No");
      LabelLedgerEntryTrancking.VALIDATE("Label Production Type"  , LabelLedgerEntry."Label Production Type");
      LabelLedgerEntryTrancking.VALIDATE("Turn Code"              , LabelLedgerEntry."Turn Code");
      LabelLedgerEntryTrancking.VALIDATE("Fecha Registro"         , CREATEDATETIME(WORKDATE,TIME));
      LabelLedgerEntryTrancking.VALIDATE("User ID"                , USERID);
      LabelLedgerEntryTrancking.VALIDATE(Modified                 , TRUE);
      LabelLedgerEntryTrancking.VALIDATE("Label Status"           , LabelLedgerEntry."Label Status");
      LabelLedgerEntryTrancking.VALIDATE("Physical Location"      , PhysicalLocation);
      LabelLedgerEntryTrancking.VALIDATE("Source Document"        , SourceDoc);
      LabelLedgerEntryTrancking.VALIDATE("Remaining Quantity"     , LabelLedgerEntry."Remaint Quantity Lot");
      LabelLedgerEntryTrancking.VALIDATE("Journal Template Name"  , ItemJournalLine."Journal Template Name");
      LabelLedgerEntryTrancking.VALIDATE("Journal Batch Name"     , ItemJournalLine."Journal Batch Name");
      LabelLedgerEntryTrancking.VALIDATE("Journal Line No."       , ItemJournalLine."Line No.");
      LabelLedgerEntryTrancking.VALIDATE("Location Code"          , LocationCode1);
      LabelLedgerEntryTrancking.VALIDATE("Bin Code"               , BinCode1);
      LabelLedgerEntryTrancking.VALIDATE(Quantity                 , Qty);
      LabelLedgerEntryTrancking."Entry Type"                      :=EntryType;
      LabelLedgerEntryTrancking.MODIFY(TRUE);
    END;

    PROCEDURE ConfirmCntrlTrackingJornlLabl@1102401039(JournalTemplateName@1102401010 : Code[30];JournalBatchName@1102401009 : Code[30]) : Boolean;
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      LabelLedgerEntryTrancking@1102401003 : Record 50064;
      EntryNo@1102401004 : Integer;
      TmpLbelLedgerEntryTrancking@1102401005 : Record 50064;
      EntryLabel@1102401001 : Integer;
      CodeLocation@1102401008 : Code[30];
      CodeBin@1102401007 : Code[30];
      ItemJournalLine@1102401011 : Record 83;
      ReservationEntry@1102401006 : Record 337;
    BEGIN
      LabelLedgerEntryTrancking.RESET;
      LabelLedgerEntryTrancking.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
      LabelLedgerEntryTrancking.SETRANGE("Journal Template Name",JournalTemplateName);
      LabelLedgerEntryTrancking.SETRANGE("Journal Batch Name"   ,JournalBatchName);
      LabelLedgerEntryTrancking.SETFILTER("Journal Register",'=%1',FALSE);
      IF LabelLedgerEntryTrancking.FINDSET THEN BEGIN
        REPEAT
          LabelLedgerEntryTrancking.VALIDATE("Journal Register",TRUE);
          LabelLedgerEntryTrancking.MODIFY(TRUE);

          CLEAR(LabelLedgerEntry);
          LabelLedgerEntry.GET(LabelLedgerEntryTrancking."Entry No. Label");
          LabelLedgerEntry."Quality Control" := LabelLedgerEntry."Quality Control"::"Liberado Calidad";

          LabelLedgerEntry.MODIFY;

          COMMIT;
        UNTIL LabelLedgerEntryTrancking.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE AjustRemaingQtyLabelEntry@1102401034(LabelEntry@1102401001 : Code[30];RemaingQty@1102401004 : Decimal);
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
      EntryLabl@1102401003 : Integer;
    BEGIN
      EVALUATE(EntryLabl,LabelEntry);
      LabelLedgerEntry.GET(EntryLabl);
      LabelLedgerEntry."Pre Remaining Quantity" :=RemaingQty;
      LabelLedgerEntry.MODIFY(TRUE);
    END;

    PROCEDURE ImportAudShipJrnalConsing@1102401029();
    VAR
      AuditShipmentHeader@1102401005 : Record 50062;
      ItemJournalLine@1102401002 : Record 83;
      LineNo@1102401003 : Integer;
      TmpItemJournalLin@1102401004 : Record 83;
      ItemCrossRef@1102401006 : Record 5717;
      Location@1102401007 : Record 14;
      CodAlmDest@1102401008 : Code[30];
      CodUbiDest@1102401009 : Code[30];
      AuditShipmentLinesDetall@1102401010 : Record 50067;
      DocConsignaID@1102401001 : Record 83;
    BEGIN
      IF CONFIRM('Desea Importar los Embarques Seleccionados a Diario Consignacion??') THEN BEGIN
        Location.RESET;
        Location.SETFILTER("Location Default Consign",'=%1',TRUE);
        Location.FINDSET;
        CodAlmDest:=Location.Code;

        //funcion validar maximo series hella jhr
        ValidarMaxSeriesHellaDiarConsig();
        //ERROR('Tests');
      //

        AuditShipmentHeader.RESET;
        AuditShipmentHeader.SETFILTER("Selec. Aud. Ship",'=%1',TRUE);
        AuditShipmentHeader.SETFILTER("Sended to Journal Consign",'=%1',FALSE);
        IF AuditShipmentHeader.FINDSET THEN BEGIN
          REPEAT
            AuditShipmentHeader.TESTFIELD(Status,AuditShipmentHeader.Status::Released);
            AuditShipmentLinesDetall.RESET;
            AuditShipmentLinesDetall.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
            IF AuditShipmentLinesDetall.FINDSET THEN
              REPEAT
              //>>ATX
              ItemCrossRef.RESET;
              ItemCrossRef.SETRANGE("Cross-Reference Type",ItemCrossRef."Cross-Reference Type"::Customer);
              ItemCrossRef.SETRANGE("Item No."            ,AuditShipmentLinesDetall."No.");
              ItemCrossRef.SETRANGE("Cross-Reference No." ,AuditShipmentLinesDetall."Cross-Reference No.");
              IF ItemCrossRef.FINDSET THEN
                CodUbiDest:=ItemCrossRef.Anden;
              DiarioConsignacionInt(AuditShipmentLinesDetall."No.",CodAlmDest,CodUbiDest,AuditShipmentLinesDetall."Lot No.",FORMAT(AuditShipmentLinesDetall.Quantity),'',FORMAT(AuditShipmentLinesDetall."Label No."),'CONSIGNACION',DocConsignaID);
              AsigStatusLabel(FORMAT(AuditShipmentLinesDetall."Label No."),'CONSIGNACION');

              AsignLabelLedEntryCons(DocConsignaID,AuditShipmentLinesDetall."Label No.");

              AuditShipmentLinesDetall."Item Status":= AuditShipmentLinesDetall."Item Status"::Enviado;
              AuditShipmentLinesDetall.MODIFY;
            UNTIL AuditShipmentLinesDetall.NEXT=0;
          AuditShipmentHeader."Sended to Journal Consign" :=TRUE;
          AuditShipmentHeader.MODIFY;
          UNTIL AuditShipmentHeader.NEXT=0;
        MESSAGE('Proceso Terminado!!');
        END
        ELSE BEGIN
          MESSAGE('No se ha Seleccionado Embarque!!');
        END;
      END;
    END;

    PROCEDURE ImportAudiShipSalesOrder@1102401070(SalesHeader@1102401001 : Code[30]);
    VAR
      AuditShipmentHeader@1102401005 : Record 50062;
      ItemJournalLine@1102401002 : Record 83;
      LineNo@1102401003 : Integer;
      TmpItemJournalLin@1102401004 : Record 83;
      ItemCrossRef@1102401006 : Record 5717;
      Location@1102401007 : Record 14;
      CodAlmDest@1102401008 : Code[30];
      CodUbiDest@1102401009 : Code[30];
      AuditShipmentLinesDetall@1102401010 : Record 50067;
      SalesLine@1102401013 : Record 37;
      AuditShipmentLines@1102401014 : Record 50063;
      QtyEnviar@1102401011 : Decimal;
      SalesHeaderR@1102401012 : Record 36;
      AuditShipmentLinesDetallTmp@1102401016 : Record 50067;
      Rsp@1102401015 : Integer;
    BEGIN
      IF CONFIRM('Desea Importar los Embarques Seleccionados a Pedido de Venta') THEN BEGIN
        AuditShipmentHeader.RESET;
        AuditShipmentHeader.SETFILTER("Selec. Aud. Ship"      ,'=%1',TRUE);
        AuditShipmentHeader.SETFILTER("Sended to Sales Order" ,'=%1',FALSE);
        IF AuditShipmentHeader.FINDSET THEN BEGIN
          REPEAT
            AuditShipmentHeader.TESTFIELD(Status,AuditShipmentHeader.Status::Released);
            SalesHeaderR.GET(SalesHeaderR."Document Type"::Order,SalesHeader);
            IF SalesHeaderR."Sell-to Customer No." <> AuditShipmentHeader."Customer No." THEN
              ERROR('El Embarque no Corresponde a el Mismo Cliente');

            //>> valida status de control calidad lotes
            AuditShipmentLinesDetallTmp.RESET;
            AuditShipmentLinesDetallTmp.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
            IF AuditShipmentLinesDetallTmp.FINDSET THEN BEGIN
              REPEAT
                CLEAR(Rsp);
                Rsp := ValidaStatusQualityControlLabel(AuditShipmentLinesDetallTmp."Label No.");
                IF (Rsp = 1) THEN
                  ERROR('el Lote %1 de la auditoria de Embarque %2 se encuentra Bloqueado por calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
                IF (Rsp = 3) THEN
                  ERROR('El Lote %1 de la auditoria de embarque %2 no se encuentra Liberado por Calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
              UNTIL AuditShipmentLinesDetallTmp.NEXT=0;
            END;
                  //<<

            AuditShipmentLines.RESET;
            AuditShipmentLines.SETRANGE("Document No."          ,AuditShipmentHeader."No.");
            AuditShipmentLines.SETRANGE("Sended to Sales Order",FALSE);
            IF AuditShipmentLines.FINDSET THEN BEGIN
              REPEAT
                AuditShipmentLines.CALCFIELDS(Quantity);
                SalesLine.RESET;
                SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                SalesLine.SETRANGE("Document No." ,SalesHeader);
                SalesLine.SETRANGE("No."          ,AuditShipmentLines."No.");
                IF SalesLine.FINDSET THEN BEGIN
                  REPEAT
                    IF (SalesLine."Outstanding Quantity" < AuditShipmentLines.Quantity) THEN
                      ERROR('La Cantidad del Embarque %1 es mayor a la Orden Venta %2',FORMAT(AuditShipmentLines.Quantity),SalesLine.Quantity);
                    IF ((SalesLine."Quantity Shipped"+AuditShipmentLines.Quantity) >  SalesLine."Outstanding Quantity") THEN
                      ERROR('La Cantidad enviada mas la Cantidad a enviar %1 sobrepasa la Cantidad Pendiente %2',(SalesLine."Quantity Shipped"+AuditShipmentLines.Quantity),SalesLine."Outstanding Quantity");
                    AuditShipmentLinesDetall.RESET;
                    AuditShipmentLinesDetall.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
                    AuditShipmentLinesDetall.SETRANGE("No."             ,AuditShipmentLines."No.");
                    IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
                      REPEAT
                        AssignLotSalesOrder(SalesLine,AuditShipmentLinesDetall."Lot No.",AuditShipmentLinesDetall.Quantity);
                        AsigStatusLabelPre(FORMAT(AuditShipmentLinesDetall."Label No."),'FACTURA',SalesLine."Document No.");
                        MarkLabels(FORMAT(AuditShipmentLinesDetall."Label No."),SalesLine."Document No.");
                      UNTIL AuditShipmentLinesDetall.NEXT=0;
                    END;
                    SalesLine.VALIDATE("Qty. to Ship",(SalesLine."Qty. to Ship"+AuditShipmentLines.Quantity));
                    SalesLine.MODIFY;

                    AuditShipmentLines."Sended to Sales Order" :=TRUE;
                    AuditShipmentLines.MODIFY;
                  UNTIL SalesLine.NEXT=0;
                END;
              UNTIL AuditShipmentLines.NEXT=0;
            END;
            AuditShipmentHeader."Sended to Sales Order" :=TRUE;
            AuditShipmentHeader."Source No.":=SalesHeader;//ASN LEAR
            AuditShipmentHeader.MODIFY;

            MESSAGE('Proceso Terminado!!');
          UNTIL AuditShipmentHeader.NEXT=0;
        END
        ELSE BEGIN
          MESSAGE('No se ha Seleccionado Embarque!!');
        END;
      END;
    END;

    PROCEDURE ImportAudiShipSalesOrderCompl@1102401086(SalesHeader@1102401001 : Code[30]);
    VAR
      AuditShipmentHeader@1102401005 : Record 50062;
      ItemJournalLine@1102401002 : Record 83;
      LineNo@1102401003 : Integer;
      TmpItemJournalLin@1102401004 : Record 83;
      ItemCrossRef@1102401006 : Record 5717;
      Location@1102401007 : Record 14;
      CodAlmDest@1102401008 : Code[30];
      CodUbiDest@1102401009 : Code[30];
      AuditShipmentLinesDetall@1102401010 : Record 50067;
      SalesLine@1102401013 : Record 37;
      AuditShipmentLines@1102401014 : Record 50063;
      NoLin@1102401011 : Integer;
      SalesLineTmp@1102401012 : Record 37;
      SalesHeaderR@1102401015 : Record 36;
      AuditShipmentLinesDetallTmp@1102401016 : Record 50067;
      Rsp@1102401017 : Integer;
    BEGIN
      IF CONFIRM('Desea Importar los Embarques Seleccionados a Pedido de Venta %1') THEN BEGIN
        AuditShipmentHeader.RESET;
        AuditShipmentHeader.SETFILTER("Selec. Aud. Ship"      ,'=%1',TRUE);
        AuditShipmentHeader.SETFILTER("Sended to Sales Order" ,'=%1',FALSE);
        IF AuditShipmentHeader.FINDSET THEN BEGIN
          REPEAT
            AuditShipmentHeader.TESTFIELD(Status,AuditShipmentHeader.Status::Released);
            SalesHeaderR.GET(SalesHeaderR."Document Type"::Order,SalesHeader);
            IF SalesHeaderR."Sell-to Customer No." <> AuditShipmentHeader."Customer No." THEN
              ERROR('El Embarque es del Cliente %1 no Corresponde al mismo Cliente de la Orden de Venta %2',AuditShipmentHeader."Customer No.",SalesHeaderR."Sell-to Customer No.");

            //>> valida status de control calidad lotes
            AuditShipmentLinesDetallTmp.RESET;
            AuditShipmentLinesDetallTmp.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
            IF AuditShipmentLinesDetallTmp.FINDSET THEN BEGIN
              REPEAT
                CLEAR(Rsp);
                Rsp := ValidaStatusQualityControlLabel(AuditShipmentLinesDetallTmp."Label No.");
                IF (Rsp = 1) THEN
                  ERROR('el Lote %1 de la auditoria de Embarque %2 se encuentra Bloqueado por calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
                IF (Rsp = 3) THEN
                  ERROR('El Lote %1 de la auditoria de embarque %2 no se encuentra Liberado por Calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
              UNTIL AuditShipmentLinesDetallTmp.NEXT=0;
            END;
            //<<
            AuditShipmentLines.RESET;
            AuditShipmentLines.SETRANGE("Document No."          ,AuditShipmentHeader."No.");
            AuditShipmentLines.SETRANGE("Sended to Sales Order",FALSE);
            IF AuditShipmentLines.FINDSET THEN BEGIN
              REPEAT
                AuditShipmentLines.CALCFIELDS(Quantity);
                SalesLineTmp.RESET;
                SalesLineTmp.SETRANGE("Document Type",SalesLineTmp."Document Type"::Order);
                SalesLineTmp.SETRANGE("Document No.",SalesHeaderR."No.");
                IF SalesLineTmp.FINDLAST THEN
                  NoLin :=SalesLineTmp."Line No."+10000
                ELSE
                  NoLin := 10000;

                SalesLine.INIT;
                SalesLine.VALIDATE("Document Type",SalesLine."Document Type"::Order);
                SalesLine.VALIDATE("Document No.",SalesHeaderR."No.");
                SalesLine.VALIDATE("Line No.",NoLin);
                SalesLine.VALIDATE("Sell-to Customer No.",SalesHeaderR."Sell-to Customer No.");
                SalesLine.VALIDATE(Type,SalesLine.Type::Item);
                SalesLine.VALIDATE("No.",AuditShipmentLines."No.");
                // >> atx feb 2020
                SalesLine.VALIDATE("Location Code",AuditShipmentLines."Location Code");
                SalesLine.VALIDATE("Bin Code"     ,AuditShipmentLines."Bin Code");
                // << ATX Feb 2020.
                SalesLine.VALIDATE(Quantity,AuditShipmentLines.Quantity);
                SalesLine.VALIDATE("Qty. to Ship",AuditShipmentLines.Quantity);
                SalesLine.INSERT;

                AuditShipmentLinesDetall.RESET;
                AuditShipmentLinesDetall.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
                AuditShipmentLinesDetall.SETRANGE("No."             ,AuditShipmentLines."No.");
                IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
                  REPEAT
                    AssignLotSalesOrder(SalesLine,AuditShipmentLinesDetall."Lot No.",AuditShipmentLinesDetall.Quantity);
                    AsigStatusLabelPre(FORMAT(AuditShipmentLinesDetall."Label No."),'FACTURA',SalesLine."Document No.");
                  UNTIL AuditShipmentLinesDetall.NEXT=0;
                END;

                AuditShipmentLines."Sended to Sales Order" :=TRUE;
                AuditShipmentLines.MODIFY;
              UNTIL AuditShipmentLines.NEXT=0;
            END;
            AuditShipmentHeader."Sended to Sales Order" :=TRUE;
            AuditShipmentHeader."Source No.":=SalesHeader;//ASN LEAR
            AuditShipmentHeader.MODIFY;

            MESSAGE('Proceso Terminado!!');
          UNTIL AuditShipmentHeader.NEXT=0;
        END
        ELSE BEGIN
          MESSAGE('No se ha Seleccionado Embarque!!');
        END;
      END;
    END;

    PROCEDURE ImportAudiShipSalesShipment@1102401072(WarehouseShipHeadrCode@1102401001 : Code[30]);
    VAR
      AuditShipmentHeader@1102401005 : Record 50062;
      ItemJournalLine@1102401002 : Record 83;
      LineNo@1102401003 : Integer;
      TmpItemJournalLin@1102401004 : Record 83;
      ItemCrossRef@1102401006 : Record 5717;
      Location@1102401007 : Record 14;
      CodAlmDest@1102401008 : Code[30];
      CodUbiDest@1102401009 : Code[30];
      AuditShipmentLinesDetall@1102401010 : Record 50067;
      WarehouseShipmentHeader@1102401011 : Record 7320;
      AuditShipmentLines@1102401012 : Record 50063;
      WarehouseShipmentLine@1102401013 : Record 7321;
      CountAudiShipmentLines@1102401015 : Integer;
      CoutWarehouseShipLines@1102401014 : Integer;
      AuditShipmentLinesDetallTmp@1102401017 : Record 50067;
      Rsp@1102401016 : Integer;
    BEGIN
      IF CONFIRM('Desea Importar los Embarques Seleccionados a Envio Almacen??') THEN BEGIN
        AuditShipmentHeader.RESET;
        AuditShipmentHeader.SETFILTER("Selec. Aud. Ship",'=%1',TRUE);
        AuditShipmentHeader.SETFILTER("Sended to Sales Order" ,'=%1',FALSE);
        IF AuditShipmentHeader.FINDSET THEN BEGIN
          REPEAT
            AuditShipmentHeader.TESTFIELD(Status,AuditShipmentHeader.Status::Released);

            //>> valida status de control calidad lotes
            AuditShipmentLinesDetallTmp.RESET;
            AuditShipmentLinesDetallTmp.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
            IF AuditShipmentLinesDetallTmp.FINDSET THEN BEGIN
              REPEAT
                CLEAR(Rsp);
                Rsp := ValidaStatusQualityControlLabel(AuditShipmentLinesDetallTmp."Label No.");
                IF (Rsp = 1) THEN
                  ERROR('el Lote %1 de la auditoria de Embarque %2 se encuentra Bloqueado por calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
                IF (Rsp = 3) THEN
                  ERROR('El Lote %1 de la auditoria de embarque %2 no se encuentra Liberado por Calidad',AuditShipmentLinesDetallTmp."Lot No.",AuditShipmentHeader."No.");
              UNTIL AuditShipmentLinesDetallTmp.NEXT=0;
            END;
            //<<


            AuditShipmentLines.RESET;
            AuditShipmentLines.SETRANGE("Document No.",AuditShipmentHeader."No.");
            AuditShipmentLines.SETRANGE("Sended to Sales Order",FALSE);
            IF AuditShipmentLines.FINDSET THEN BEGIN
            CountAudiShipmentLines := AuditShipmentLines.COUNT();
              REPEAT
                AuditShipmentLines.CALCFIELDS(Quantity);
                WarehouseShipmentLine.RESET;
                WarehouseShipmentLine.SETRANGE("Source Document"  ,WarehouseShipmentLine."Source Document"::"Sales Order");
                WarehouseShipmentLine.SETRANGE("No."              ,WarehouseShipHeadrCode);
                WarehouseShipmentLine.SETRANGE("Item No."         ,AuditShipmentLines."No.");
                IF WarehouseShipmentLine.FINDSET THEN BEGIN
                  REPEAT
                    IF (WarehouseShipmentLine."Qty. Outstanding" < AuditShipmentLines.Quantity) THEN
                      ERROR('La Cantidad del Embarque %1 es mayor a la Orden Venta %2',FORMAT(AuditShipmentLines.Quantity),WarehouseShipmentLine.Quantity);
                    IF ((WarehouseShipmentLine."Qty. Shipped"+AuditShipmentLines.Quantity) > WarehouseShipmentLine.Quantity) THEN
                      ERROR('La Cantidad enviada mas la Cantidad a enviar %1, sobrepasa la Cantidad Pendiente %2',(WarehouseShipmentLine."Qty. Shipped"+AuditShipmentLines.Quantity),WarehouseShipmentLine."Qty. Outstanding");
                    AuditShipmentLinesDetall.RESET;
                    AuditShipmentLinesDetall.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
                    AuditShipmentLinesDetall.SETRANGE("No."             ,AuditShipmentLines."No.");
                    IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
                      REPEAT
                        AssignLotShipWhereHouse(WarehouseShipmentLine,AuditShipmentLinesDetall."Lot No.",AuditShipmentLinesDetall.Quantity);
                        AsigStatusLabelPre(FORMAT(AuditShipmentLinesDetall."Label No."),'ENVIOS',WarehouseShipmentLine."No.");
                      UNTIL AuditShipmentLinesDetall.NEXT=0;
                    END;
                    WarehouseShipmentLine.VALIDATE("Qty. to Ship",(WarehouseShipmentLine."Qty. to Ship"+AuditShipmentLines.Quantity));
                    WarehouseShipmentLine.MODIFY;

                    AuditShipmentLines."Sended to Sales Order" :=TRUE;
                    AuditShipmentLines.MODIFY;
                  UNTIL WarehouseShipmentLine.NEXT=0;
                END ELSE BEGIN
                  MESSAGE('No se encontro el producto: %1 en el envio de almacen %2',AuditShipmentLines."No.",WarehouseShipHeadrCode);
                END;
              UNTIL AuditShipmentLines.NEXT=0;
            END;

            MESSAGE('Proceso Terminado!!');
          UNTIL AuditShipmentHeader.NEXT=0;
          WarehouseShipmentLine.RESET;
          WarehouseShipmentLine.SETRANGE("Source Document"  ,WarehouseShipmentLine."Source Document"::"Sales Order");
          WarehouseShipmentLine.SETRANGE("No."              ,WarehouseShipHeadrCode);
          IF WarehouseShipmentHeader.FINDSET THEN
            CoutWarehouseShipLines := WarehouseShipmentLine.COUNT();

          IF CoutWarehouseShipLines > CountAudiShipmentLines THEN
            MESSAGE('La cantidad de lineas en el envio son mayores a las de la auditoria')
          ELSE
            MESSAGE('La cantidad de lineas en el envio son menores a las de la auditoria');

          AuditShipmentLines.RESET;
          AuditShipmentLines.SETRANGE("Document No.",AuditShipmentHeader."No.");
          AuditShipmentLines.SETRANGE("Sended to Sales Order",FALSE);
          IF AuditShipmentLines.FINDSET THEN BEGIN
            MESSAGE('Aun quedan Lineas sin enviar en la auditoria de embarque: %1',AuditShipmentHeader."No.")
          END ELSE BEGIN
            AuditShipmentHeader."Sended to Sales Order" :=TRUE;
            AuditShipmentHeader.MODIFY;
          END;
        END
        ELSE BEGIN
          MESSAGE('No se ha Seleccionado Embarque!!');
        END;
      END;
    END;

    LOCAL PROCEDURE InsertInventaryPhys@1102401044(EntryNoPreInv@1102401011 : Integer;ItemNo@1102401002 : Code[30];Qty@1102401003 : Decimal;LocationCode@1102401004 : Code[30];BinCode@1102401005 : Code[30];NoLot@1102401001 : Code[30];PhysicalLocation@1102401006 : Code[30];NoLabel@1102401013 : Integer;InventoryCode@1102401014 : Code[50]) : Boolean;
    VAR
      Item@1102401008 : Record 27;
      InventaryHH3@1102401009 : Record 50061;
      EntryNo@1102401010 : Integer;
      InventaryHH@1102401007 : Record 50061;
      PreInventary@1102401012 : Record 50061;
      LabelLedgerEntry@1102401015 : Record 50011;
    BEGIN
      PreInventary.RESET;
      PreInventary.SETRANGE("Label No.",NoLabel);
      IF PreInventary.FINDSET THEN
        ERROR('Ya ha sido Leida la Etiqueta %1',NoLabel);

      InventaryHH3.RESET;
      IF InventaryHH3.FINDLAST THEN
        EntryNo := InventaryHH3."Entry No"+1
      ELSE
        EntryNo :=1;

      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(NoLabel);

      InventaryHH.INIT;
      InventaryHH.VALIDATE("Entry No",EntryNo);
      InventaryHH.VALIDATE("Item No",ItemNo);
      Item.GET(ItemNo);
      InventaryHH.Description               :=Item.Description;
      InventaryHH."Quantity Scan"           :=Qty;
      InventaryHH."Cod. Location"           :=LocationCode;
      InventaryHH."Bin Code"                :=BinCode;
      InventaryHH."Physical Location"       :=PhysicalLocation;
      InventaryHH."Entry No. Pre-Inventary" :=EntryNoPreInv;
      InventaryHH."Posting Date"            :=TODAY;
      InventaryHH."User ID"                 :=USERID;
      InventaryHH."No. Lot"                 :=NoLot;
      InventaryHH."Label No."               :=NoLabel;
      InventaryHH."Inventory Code"          :=InventoryCode;
      InventaryHH."Label Status"            :=LabelLedgerEntry."Label Status";
      IF InventaryHH.INSERT THEN BEGIN
        EXIT(TRUE);
      END
      ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE InsertNoLotInventaty@1102401045(InventaryHH2@1102401001 : Record 50066;Qty@1102401002 : Decimal;NoLot@1102401004 : Code[30]);
    VAR
      LedgerEntryTrackingLotNo2@1102401003 : Record 50065;
      TmpTrackingLotNo@1102401005 : Record 50065;
      EntryNo@1102401006 : Integer;
    BEGIN
      TmpTrackingLotNo.RESET;
      IF TmpTrackingLotNo.FINDLAST THEN
        EntryNo := TmpTrackingLotNo."Entry No."+1
      ELSE
        EntryNo :=1;

      LedgerEntryTrackingLotNo2.INIT;
      LedgerEntryTrackingLotNo2.VALIDATE("Entry No."               ,EntryNo);
      LedgerEntryTrackingLotNo2.VALIDATE("Entry No. Pre-Inventory" ,InventaryHH2."Entry No");
      LedgerEntryTrackingLotNo2.VALIDATE("Calculated Quantity"      ,0);
      LedgerEntryTrackingLotNo2.VALIDATE("Qty Physical"            ,Qty);
      LedgerEntryTrackingLotNo2.VALIDATE("Lot. No."                 ,NoLot);
      LedgerEntryTrackingLotNo2.VALIDATE("Posting Date"          ,CREATEDATETIME(WORKDATE,TIME));
      LedgerEntryTrackingLotNo2.VALIDATE("User ID"                 ,USERID);
      LedgerEntryTrackingLotNo2.VALIDATE("Location Code"           ,InventaryHH2."Cod. Location");
      LedgerEntryTrackingLotNo2.VALIDATE("Bin Code"                ,InventaryHH2."Bin Code");
      LedgerEntryTrackingLotNo2.VALIDATE("Item No."                 ,InventaryHH2."Item No");
      LedgerEntryTrackingLotNo2.VALIDATE("Lot Not Found System"           ,FALSE);
      LedgerEntryTrackingLotNo2.VALIDATE("Lot Not Found System"           ,TRUE);
      LedgerEntryTrackingLotNo2.VALIDATE("Higher Lot"        ,TRUE);
      LedgerEntryTrackingLotNo2.VALIDATE("Full Lot"         ,FALSE);
      LedgerEntryTrackingLotNo2.VALIDATE("Incomplete Lot"    ,FALSE);
      LedgerEntryTrackingLotNo2.VALIDATE("Inventory Code"           ,InventaryHH2."Inventory Code");
      LedgerEntryTrackingLotNo2.INSERT;
    END;

    PROCEDURE AssignedLotsJournl@1102401038(JournalTemplateName@1102401002 : Code[30];JournalBatchName@1102401001 : Code[30];NoLineJournal@1102401004 : Integer;ItemNo@1102401003 : Code[30];IDDoctoSource@1102401008 : Code[30];Qty@1102401009 : Decimal;PhysicalLocation@1102401026 : Code[50]) : Boolean;
    VAR
      LabelLedgerEntry@1102401005 : Record 50011;
      ReservationEntry@1102401006 : Record 337;
      ItemJournalLine@1102401007 : Record 83;
      LabelLedgerEntry2@1102401010 : Record 50011;
      LabelLedgerEntry3@1102401011 : Record 50011;
      QtyJournal@1102401012 : Decimal;
      QtyJnl@1102401014 : Decimal;
      AuditShipmentHeader@1102401015 : Record 50062;
      AuditShipmentLines@1102401016 : Record 50063;
      AuditShipmentLinesDetall@1102401017 : Record 50067;
      ProducOrder@1102401018 : Record 5405;
      ProdOrderLine@1102401019 : Record 5406;
      ProdOrderComponent@1102401020 : Record 5407;
      LocationCode@1102401021 : Code[30];
      BinCode@1102401022 : Code[30];
      QtyExitsReal@1102401023 : Decimal;
      RemainingQty@1102401024 : Decimal;
      RemainingQty2@1102401025 : Decimal;
      LabelLedgerEntry5@1102401013 : Record 50011;
      Qty2@1102401027 : Decimal;
      QtyLoteExit@1102401028 : Decimal;
      ItemJournalLine5@1102401029 : Record 83;
      ItemJournalLine6@1102401030 : Record 83;
      ItemJournalLine7@1102401031 : Record 83;
    BEGIN
      IF (IDDoctoSource <> 'EMBARQUE') THEN BEGIN
        ItemJournalLine.RESET;
        ItemJournalLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
        ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
        ItemJournalLine.SETRANGE("Journal Batch Name"   ,JournalBatchName);
        ItemJournalLine.SETRANGE("Line No."             ,NoLineJournal);
        ItemJournalLine.SETRANGE("Item No."             ,ItemNo);
        IF ItemJournalLine.FINDSET THEN BEGIN
          IF (IDDoctoSource = 'SALIDA') THEN BEGIN
            IF ItemJournalLine."External Document No." <> '' THEN
              ERROR('ya fue asignada una etiqueta al registro');

            QtyJournal :=0;
            QtyJnl :=0;
            //>>Calcula y modifica Cantidad para asignar a Diario Salidas
            LabelLedgerEntry2.RESET;
            LabelLedgerEntry2.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry2.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry2.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry2.SETFILTER("Selected Label"          , '=%1',TRUE);
            //LabelLedgerEntry2.SETFILTER("Remaining Quantity"      ,'<>%1',0);
            IF LabelLedgerEntry2.FINDSET THEN BEGIN
              REPEAT
                LabelLedgerEntry2.CALCFIELDS("Remaint Quantity Lot");
                QtyJournal:=LabelLedgerEntry2."Remaint Quantity Lot";
              UNTIL LabelLedgerEntry2.NEXT=0;
            QtyJnl := QtyJournal;
            ItemJournalLine.VALIDATE("Output Quantity",QtyJnl);
            ItemJournalLine.MODIFY;
            END;

            // Recorre Tabla
            LabelLedgerEntry.RESET;
            LabelLedgerEntry.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry.SETFILTER("Selected Label" , '=%1',TRUE);
            //LabelLedgerEntry.SETFILTER("Remaining Quantity",'<>%1',0);
            IF LabelLedgerEntry.FINDSET THEN BEGIN
              REPEAT

                //asigna No. Etiqueta
                ItemJournalLine6.RESET;
                ItemJournalLine6.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
                ItemJournalLine6.GET(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",ItemJournalLine."Line No.");
                IF NOT (ItemJournalLine6."External Document No." = '') THEN
                  ERROR('Ya fue asignada una etiqueta al registro');

                AsigStatusLabelPre(FORMAT(LabelLedgerEntry."Entry No."),IDDoctoSource,'');
                LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
                ControlTrackingLabel(FORMAT(LabelLedgerEntry."Entry No."),IDDoctoSource,ItemJournalLine,PhysicalLocation,ItemJournalLine."Location Code",ItemJournalLine."Bin Code",LabelLedgerEntry."Remaint Quantity Lot",7);
                AssignLotJrnalSalidas(ItemJournalLine,LabelLedgerEntry."Lot. No",LabelLedgerEntry.Quantity);
                RemainingQty2 := LabelLedgerEntry.Quantity-LabelLedgerEntry."Remaint Quantity Lot";
                AjustRemaingQtyLabelEntry(FORMAT(LabelLedgerEntry."Entry No."),RemainingQty2);

                //asigna No. Etiqueta
                ItemJournalLine5.RESET;
                ItemJournalLine5.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
                ItemJournalLine5.GET(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",ItemJournalLine."Line No.");
                ItemJournalLine5."External Document No." :=FORMAT(LabelLedgerEntry."Entry No.");
                ItemJournalLine5.MODIFY;

              UNTIL LabelLedgerEntry.NEXT=0;
            END;
          END;

          IF (IDDoctoSource = 'TRASPASO') OR (IDDoctoSource = 'CUARENTENA') THEN BEGIN

            IF ItemJournalLine."External Document No." <> '' THEN
              ERROR('ya se ha ingresado/relacionado una etiqueta previamente');


            QtyJournal :=0;
            QtyJnl :=0;
            //>>Calcula y modifica Cantidad para asignar a DiariO Reclasificacion
            LabelLedgerEntry2.RESET;
            LabelLedgerEntry2.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry2.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry2.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry2.SETFILTER("Selected Label" , '=%1',TRUE);
            IF LabelLedgerEntry2.FINDSET THEN BEGIN
              REPEAT
                QtyJournal+= LabelLedgerEntry2.Quantity;
              UNTIL LabelLedgerEntry2.NEXT=0;
            QtyJnl := ItemJournalLine.Quantity+QtyJournal;


            //busca si ya xiste etiqueta
            ItemJournalLine7.RESET;
            ItemJournalLine7.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Line No.");
            ItemJournalLine7.SETRANGE("Journal Template Name",JournalTemplateName);
            ItemJournalLine7.SETRANGE("Journal Batch Name"   ,JournalBatchName);
            ItemJournalLine7.SETRANGE("Item No."             ,ItemNo);
            ItemJournalLine7.SETRANGE("External Document No.",FORMAT(LabelLedgerEntry2."Entry No."));
            IF ItemJournalLine7.FINDSET THEN BEGIN
              ERROR('ya se ha asignado la etiqueta %1',ItemJournalLine7."External Document No.");
            END;

            ItemJournalLine."External Document No." :=FORMAT(LabelLedgerEntry2."Entry No.");
            ItemJournalLine.VALIDATE(Quantity,QtyJnl);
            ItemJournalLine.MODIFY;
            END;

            // Recorre Tabla
            LabelLedgerEntry.RESET;
            LabelLedgerEntry.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
            LabelLedgerEntry.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry.SETFILTER("Selected Label" , '=%1',TRUE);
            IF LabelLedgerEntry.FINDSET THEN BEGIN
              REPEAT

                QtyLoteExit :=ConsultExistLotNo(ItemNo,LabelLedgerEntry."Lot. No",ItemJournalLine."Location Code",ItemJournalLine."Bin Code");
                IF QtyLoteExit <= 0 THEN
                  ERROR('Lote No Disponible!! %1',LabelLedgerEntry."Lot. No");

                AsigStatusLabelPre(FORMAT(LabelLedgerEntry."Entry No."),IDDoctoSource,'');

                //valida almancen detino
                IF ItemJournalLine."New Location Code" <> '' THEN
                  ControlTrackingLabel(FORMAT(LabelLedgerEntry."Entry No."),IDDoctoSource,ItemJournalLine,PhysicalLocation,ItemJournalLine."New Location Code",ItemJournalLine."New Bin Code",LabelLedgerEntry.Quantity,5)
                ELSE
                  ControlTrackingLabel(FORMAT(LabelLedgerEntry."Entry No."),IDDoctoSource,ItemJournalLine,PhysicalLocation,ItemJournalLine."Location Code",ItemJournalLine."Bin Code",LabelLedgerEntry.Quantity,5);

                 AssignLotJrnalConsign(ItemJournalLine,LabelLedgerEntry."Lot. No",LabelLedgerEntry.Quantity);
                 LabelLedgerEntry5.GET(LabelLedgerEntry."Entry No.");
                 LabelLedgerEntry5."Consumption Qty":=0;
                 LabelLedgerEntry5."Selected Label":=FALSE;
                 //LabelLedgerEntry5."Assigned Journal Transfer" :=TRUE;
                 LabelLedgerEntry5.MODIFY;
              UNTIL LabelLedgerEntry.NEXT=0;
            END;
          END;

          //
          IF (IDDoctoSource = 'CONSUMO') THEN BEGIN
            QtyJournal :=0;
            QtyJnl :=0;
            LabelLedgerEntry2.RESET;
            LabelLedgerEntry.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry2.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry2.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry2.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry2.SETFILTER("Selected Label" , '=%1',TRUE);
            IF LabelLedgerEntry2.FINDSET THEN BEGIN
              REPEAT
                QtyJournal+=LabelLedgerEntry2."Consumption Qty";
              UNTIL LabelLedgerEntry2.NEXT=0;
            QtyJnl := QtyJournal+ItemJournalLine.Quantity;

            ItemJournalLine."External Document No." :=FORMAT(LabelLedgerEntry2."Entry No.");
            ItemJournalLine.VALIDATE(Quantity,QtyJnl);
            ItemJournalLine.MODIFY;
            END;

            LabelLedgerEntry.RESET;
            LabelLedgerEntry.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
            LabelLedgerEntry.SETRANGE("Journal Template Name"    , ItemJournalLine."Journal Template Name");
            LabelLedgerEntry.SETRANGE("Journal Batch Name"       , ItemJournalLine."Journal Batch Name");
            LabelLedgerEntry.SETRANGE("Journal Line No."         , ItemJournalLine."Line No.");
            LabelLedgerEntry.SETRANGE("Source No."               , ItemJournalLine."Item No.");
            LabelLedgerEntry.SETFILTER("Selected Label" , '=%1',TRUE);
            LabelLedgerEntry.SETFILTER("Consumption Qty",'<>%1',0);
            IF LabelLedgerEntry.FINDSET THEN BEGIN
              REPEAT
               Qty :=LabelLedgerEntry."Consumption Qty";

                ProducOrder.RESET;
                ProducOrder.SETFILTER(Status,'=%1|%2',ProducOrder.Status::Released,ProducOrder.Status::"Firm Planned");
                ProducOrder.SETRANGE(ProducOrder."No.",ItemJournalLine."Order No.");
                ProducOrder.FINDSET;

                ProdOrderLine.RESET;
                ProdOrderLine.SETFILTER(Status,'=%1|%2',ProdOrderLine.Status::Released,ProdOrderLine.Status::"Firm Planned");
                ProdOrderLine.SETRANGE("Prod. Order No.",ItemJournalLine."Order No.");
                ProdOrderLine.FINDSET;

                ProdOrderComponent.RESET;
                ProdOrderComponent.SETFILTER(Status,'=%1|%2',ProdOrderComponent.Status::Released,ProdOrderComponent.Status::"Firm Planned");
                ProdOrderComponent.SETRANGE("Prod. Order No."     ,ProducOrder."No.");
                ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                ProdOrderComponent.SETRANGE("Item No."            ,ItemNo);
                ProdOrderComponent.FINDSET;

                LocationCode :=ProdOrderComponent."Location Code";
                BinCode      :=ProdOrderComponent."Bin Code";
                LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
                IF (LabelLedgerEntry."Remaint Quantity Lot" = 0) THEN
                  ERROR('No hay Cantidad Pendiente de Consumir!!');

                IF (Qty > 0) THEN BEGIN
                  QtyExitsReal  :=ConsultExistLotNo(ProdOrderComponent."Item No.",LabelLedgerEntry."Lot. No",LocationCode,BinCode);
                  IF NOT (QtyExitsReal > 0) THEN
                    ERROR('Lote No Disponible %1',LabelLedgerEntry."Lot. No");
                END;
                IF (Qty < 0) THEN BEGIN
                  Qty2:= LabelLedgerEntry."Remaint Quantity Lot"+ABS(Qty);
                  IF Qty2 > LabelLedgerEntry.Quantity THEN
                  ERROR('La Cantidad ingresada Sobrepasa a la Cantidad Original de La Etiqueta %1',LabelLedgerEntry."Entry No.");
                END;

                RemainingQty  :=0;
                RemainingQty2 :=0;

                LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");

                IF (ProdOrderComponent."Remaining Quantity" = 0) THEN BEGIN
                  IF Qty <= LabelLedgerEntry."Remaint Quantity Lot" THEN
                    RemainingQty :=Qty
                  ELSE
                    RemainingQty := LabelLedgerEntry."Remaint Quantity Lot";

                  IF RemainingQty > QtyExitsReal THEN
                    RemainingQty :=QtyExitsReal;
                END
                ELSE BEGIN
                  IF Qty <= ProdOrderComponent."Remaining Quantity" THEN
                    RemainingQty :=Qty
                  ELSE
                    RemainingQty :=  ProdOrderComponent."Remaining Quantity";

                  IF (RemainingQty > LabelLedgerEntry."Remaint Quantity Lot") THEN
                    RemainingQty := LabelLedgerEntry."Remaint Quantity Lot";

                  IF RemainingQty > QtyExitsReal THEN
                    RemainingQty :=QtyExitsReal;
                END;

                AsigStatusLabel(FORMAT(LabelLedgerEntry."Entry No."),'CONSUMO');
                ControlTrackingLabel(FORMAT(LabelLedgerEntry."Entry No."),'CONSUMO',ItemJournalLine,PhysicalLocation,LocationCode,BinCode,RemainingQty,6);
                IF RemainingQty <> 0 THEN BEGIN
                  AssignLotJrnalConsumos(ItemJournalLine,LabelLedgerEntry."Lot. No",RemainingQty);
                  RemainingQty2 := LabelLedgerEntry."Remaint Quantity Lot"-RemainingQty;
                  AjustRemaingQtyLabelEntry(FORMAT(LabelLedgerEntry."Entry No."),RemainingQty2);
                  LabelLedgerEntry5.GET(LabelLedgerEntry."Entry No.");
                  LabelLedgerEntry5."Consumption Qty":=0;
                  LabelLedgerEntry5."Selected Label":=FALSE;
                  LabelLedgerEntry5.MODIFY;
                END;
              UNTIL LabelLedgerEntry.NEXT=0;
            END;
          END;
        END;
      END;
      //EMBARQUE
      IF (IDDoctoSource = 'EMBARQUE') THEN BEGIN
        AuditShipmentHeader.GET(JournalTemplateName);
        LabelLedgerEntry.RESET;
        LabelLedgerEntry.SETCURRENTKEY("Selected Label");
        LabelLedgerEntry.SETFILTER("Selected Label"   , '=%1',TRUE);
        LabelLedgerEntry.SETRANGE("Audit Shipment No" , JournalTemplateName);
        LabelLedgerEntry.SETFILTER("Audit Shipment"   , '=%1',FALSE);
        IF LabelLedgerEntry.FINDSET THEN BEGIN
          REPEAT

            AuditShipment(LabelLedgerEntry."Audit Shipment No",LabelLedgerEntry."Source No.",FORMAT(LabelLedgerEntry.Quantity),LabelLedgerEntry."Lot. No",FORMAT(LabelLedgerEntry."Entry No."),AuditShipmentHeader."Customer No.");
            LabelLedgerEntry."Audit Shipment":=TRUE;
            LabelLedgerEntry.MODIFY;
          UNTIL LabelLedgerEntry.NEXT=0;
        END;
      END;
    END;

    PROCEDURE AssignedPhysicalLocation@1102401042(JournalTemplateName@1102401005 : Code[30];JournalBatchName@1102401004 : Code[30];NoLineJournal@1102401003 : Integer;ItemNo@1102401002 : Code[30]) : Code[100];
    VAR
      inputPhysLoc@1102401001 : Page 50110;
      RespPhysicalLocation@1102401006 : Code[50];
      LabelLedgerEntryTracking@1102401007 : Record 50064;
      LabelLedgerEntry@1102401008 : Record 50011;
    BEGIN
      IF inputPhysLoc.RUNMODAL()= ACTION::Yes THEN  BEGIN
        inputPhysLoc.Get(RespPhysicalLocation);
        LabelLedgerEntryTracking.RESET;
        LabelLedgerEntryTracking.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
        LabelLedgerEntryTracking.SETRANGE("Journal Template Name" ,JournalTemplateName);
        LabelLedgerEntryTracking.SETRANGE("Journal Batch Name"    ,JournalBatchName);
        LabelLedgerEntryTracking.SETRANGE("Journal Line No."      ,NoLineJournal);
        LabelLedgerEntryTracking.SETRANGE("Source No."            ,ItemNo);
        LabelLedgerEntryTracking.SETFILTER("Journal Register"      ,'=%1',FALSE);
        IF LabelLedgerEntryTracking.FINDSET THEN BEGIN
          REPEAT
            LabelLedgerEntryTracking."Physical Location" :=RespPhysicalLocation;
            LabelLedgerEntryTracking.MODIFY;
            LabelLedgerEntry.GET(LabelLedgerEntryTracking."Entry No. Label");
      //      LabelLedgerEntry."Physical Location":=RespPhysicalLocation;
            LabelLedgerEntry."Pre Physical Location" :=RespPhysicalLocation;
            LabelLedgerEntry.MODIFY;
          UNTIL LabelLedgerEntryTracking.NEXT=0;
        END;
      END;
      EXIT(RespPhysicalLocation);
    END;

    PROCEDURE UpdateRegLabel@1102401043(JournalTemplateName@1102401004 : Code[30];JournalBatchName@1102401003 : Code[30];NoLineJournal@1102401002 : Integer;ItemNo@1102401001 : Code[30];IDSource@1102401006 : Code[30]) : Boolean;
    VAR
      LabelLedgerEntry6@1102401005 : Record 50011;
      LabelLedEntry@1102401007 : Record 50011;
    BEGIN
      //diario salida-consumo
      IF IDSource <> 'EMBARQUE' THEN BEGIN
        LabelLedgerEntry6.RESET;
        LabelLedgerEntry6.SETCURRENTKEY("Journal Template Name","Journal Batch Name");
        LabelLedgerEntry6.SETRANGE("Journal Template Name", JournalTemplateName);
        LabelLedgerEntry6.SETRANGE("Journal Batch Name"   , JournalBatchName);
        //LabelLedgerEntry6.SETRANGE("Journal Line No."     , NoLineJournal);
        //LabelLedgerEntry6.SETRANGE("Source No."           , ItemNo);
        IF LabelLedgerEntry6.FINDSET THEN BEGIN
          REPEAT
            LabelLedgerEntry6."Selected Label"         := FALSE;
            LabelLedgerEntry6."Journal Template Name"  := '';
            LabelLedgerEntry6."Journal Batch Name"     := '';
            LabelLedgerEntry6."Journal Line No."       := 0;
            LabelLedgerEntry6.MODIFY;
            LabelLedEntry.RESET;
            LabelLedEntry.GET(LabelLedgerEntry6."Entry No.");
            RenombraLogLectura(FORMAT(LabelLedEntry."Entry No."));

          UNTIL LabelLedgerEntry6.NEXT=0;
        END;
      END;
      //BORRA REGISTRO SELECCIONADO
      IF (IDSource = 'EMBARQUE') THEN BEGIN
        LabelLedgerEntry6.RESET;
        LabelLedgerEntry6.SETRANGE("Audit Shipment No",JournalTemplateName);
        IF LabelLedgerEntry6.FINDSET THEN BEGIN
          REPEAT
            LabelLedgerEntry6."Selected Label"         := FALSE;
            LabelLedgerEntry6."Audit Shipment No"      := '';
            LabelLedgerEntry6.MODIFY;
            LabelLedEntry.RESET;
            LabelLedEntry.GET(LabelLedgerEntry6."Entry No.");
            RenombraLogLectura(FORMAT(LabelLedEntry."Entry No."));

          UNTIL LabelLedgerEntry6.NEXT=0;
        END;
      END;

      IF IDSource <> 'TRASPASO' THEN BEGIN
        LabelLedgerEntry6.RESET;
        LabelLedgerEntry6.SETRANGE("Journal Template Name", JournalTemplateName);
        LabelLedgerEntry6.SETRANGE("Journal Batch Name"   , JournalBatchName);
        //LabelLedgerEntry6.SETRANGE("Journal Line No."     , NoLineJournal);
        IF LabelLedgerEntry6.FINDSET THEN BEGIN
          REPEAT

            LabelLedgerEntry6."Selected Label"         := FALSE;
            LabelLedgerEntry6."Journal Template Name"  := '';
            LabelLedgerEntry6."Journal Batch Name"     := '';
            LabelLedgerEntry6."Journal Line No."       := 0;
            LabelLedgerEntry6."Assigned Journal Transfer":=FALSE;
            LabelLedgerEntry6.MODIFY;
            LabelLedEntry.RESET;
            LabelLedEntry.GET(LabelLedgerEntry6."Entry No.");
            RenombraLogLectura(FORMAT(LabelLedEntry."Entry No."));

          UNTIL LabelLedgerEntry6.NEXT=0;
        END;

      END;
      EXIT(TRUE);
    END;

    PROCEDURE ReadLabelJournal@1102401046(JournalTemplateName@1102401004 : Code[30];JournalBatchName@1102401003 : Code[30];NoLineJournal@1102401002 : Integer;ItemNo@1102401001 : Code[30];IDSource@1102401006 : Code[30]);
    VAR
      BarCode@1102401005 : Text[1024];
      InputReadLabel@1102401014 : Page 50111;
    BEGIN
      IF InputReadLabel.RUNMODAL()= ACTION::OK THEN  BEGIN
        MESSAGE('final');
      END;
    END;

    PROCEDURE InsertLineDetallAudit@1102401052(DoctoNoRef@1102401004 : Code[30];NoLinRef@1102401005 : Integer;ItemNo@1102401006 : Code[30];LocationCode@1102401007 : Code[30];BinCode@1102401008 : Code[30];Qty@1102401009 : Decimal;LotNo@1102401010 : Code[30];EntryLabel@1102401011 : Integer) : Boolean;
    VAR
      AuditShipmentLinesDetall@1102401002 : Record 50067;
      TmpAuditShipmentLinesDetall@1102401003 : Record 50067;
      LineNo@1102401001 : Integer;
      AuditShipmentLinesDetall2@1102401012 : Record 50067;
      Customer@1102401013 : Record 18;
      AuditShipH@1102401014 : Record 50062;
      vTest@1102401015 : Boolean;
    BEGIN
      //JHR MAX SERIES HELLA VALIDAR MAXIMO DE EMPAQUES JHR
      AuditShipH.RESET;
      AuditShipH.GET(DoctoNoRef);
      Customer.RESET;
      Customer.GET(AuditShipH."Customer No.");

      IF Customer."ASN type" = Customer."ASN type"::Hella THEN
          ValidarMaxSeriesHella(DoctoNoRef,ItemNo,Customer."No.",Customer."No. Max Series Hella");
      //>>

      AuditShipmentLinesDetall2.RESET;
      //AuditShipmentLinesDetall2."Document No. Ref",DoctoNoRef);
      AuditShipmentLinesDetall2.SETRANGE("Label No.",EntryLabel);
      IF NOT AuditShipmentLinesDetall2.FINDSET THEN BEGIN
        TmpAuditShipmentLinesDetall.RESET;
        TmpAuditShipmentLinesDetall.SETRANGE("Document No. Ref" ,DoctoNoRef);
        TmpAuditShipmentLinesDetall.SETRANGE("Line No. Ref"     ,NoLinRef);
        IF TmpAuditShipmentLinesDetall.FINDLAST THEN
          LineNo := TmpAuditShipmentLinesDetall."Line No."+1
        ELSE
          LineNo :=1;

        AuditShipmentLinesDetall.INIT;
        AuditShipmentLinesDetall.VALIDATE("Document No. Ref",DoctoNoRef);
        AuditShipmentLinesDetall.VALIDATE("Line No. Ref"    ,NoLinRef);
        AuditShipmentLinesDetall.VALIDATE("Line No."        ,LineNo);
        AuditShipmentLinesDetall.VALIDATE("Posting Date"    ,TODAY);
        AuditShipmentLinesDetall.VALIDATE("Posting Time"    ,FORMAT(TIME));
        AuditShipmentLinesDetall.VALIDATE("No."             ,ItemNo);
        AuditShipmentLinesDetall.VALIDATE("Location Code"   ,LocationCode);
        AuditShipmentLinesDetall.VALIDATE("Bin Code"        ,BinCode);
        AuditShipmentLinesDetall.VALIDATE(Quantity          ,Qty);
        AuditShipmentLinesDetall.VALIDATE("Lot No."         ,LotNo);
        AuditShipmentLinesDetall.VALIDATE("Label No."       ,EntryLabel);
        AuditShipmentLinesDetall.VALIDATE("Item Status"     ,AuditShipmentLinesDetall."Item Status"::Pendiente);
        AuditShipmentLinesDetall.INSERT;
        EXIT(TRUE);
      END
      ELSE BEGIN
        ERROR('Ya existe el No. Etiqueta %1 en la Auditoria %2',EntryLabel,AuditShipmentLinesDetall2."Document No. Ref");
      END;
    END;

    PROCEDURE NewNoAuditShipment@1102401050() : Code[50];
    VAR
      NoSeriesMgt@1102401001 : Codeunit 396;
      NewNo@1102401002 : Code[30];
      NewNoSeriesCode@1102401003 : Code[10];
      OldNoSeriesCode@1102401004 : Code[10];
    BEGIN
      ManufacturingSetup.GET;

      ManufacturingSetup.TESTFIELD(ManufacturingSetup."Audit Shipment Nos.");
      NoSeriesMgt.InitSeries(ManufacturingSetup."Audit Shipment Nos.",OldNoSeriesCode,0D,NewNo,NewNoSeriesCode);
      MESSAGE(NewNo);
      EXIT(NewNo);
    END;

    PROCEDURE ConsultLabelPreInventary@1102401055(EntryLabel@1102401001 : Code[20]) : Boolean;
    VAR
      PreInventaryHH@1102401002 : Record 50061;
      EntryL@1102401003 : Integer;
      InventaryScan@1102401004 : Record 50066;
    BEGIN
      EVALUATE(EntryL,EntryLabel);
      PreInventaryHH.RESET;
      PreInventaryHH.SETRANGE("Label No.",EntryL);
      IF PreInventaryHH.FINDSET THEN BEGIN
        REPEAT
          IF InventaryScan.GET(PreInventaryHH."Entry No. Pre-Inventary") THEN
            IF (InventaryScan."Reg. Sended" = TRUE) THEN
              EXIT(TRUE)  //Continua
            ELSE
              EXIT(FALSE);//Error
        UNTIL PreInventaryHH.NEXT=0;
      END
      ELSE
        EXIT(TRUE); //sigue lectura
    END;

    PROCEDURE ConsultstatusConsignLabel@1102401056(EntryLabel@1102401001 : Code[20]) : Boolean;
    VAR
      EntryL@1102401002 : Integer;
      LabelLedgerEntry@1102401003 : Record 50011;
    BEGIN
      EVALUATE(EntryL,EntryLabel);
      LabelLedgerEntry.GET(EntryL);
      IF (LabelLedgerEntry."Label Status" = LabelLedgerEntry."Label Status"::Consignacion) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE MarkLabelBuffer@1102401061(LabelEntry@1102401001 : Code[10];SourceType@1102401003 : Code[20];LotNo@1102401005 : Code[20]);
    VAR
      NoLabel@1102401002 : Integer;
      BufferTableLabel@1102401006 : Record 50060;
    BEGIN
      EVALUATE(NoLabel,LabelEntry);
      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("Printed Entry No. Label" ,NoLabel);
      BufferTableLabel.SETRANGE("User ID"                 ,USERID);
      BufferTableLabel.SETRANGE("Lot No"                  ,LotNo);
      BufferTableLabel.SETRANGE("Type Transation"         ,SourceType);
      IF BufferTableLabel.FINDLAST THEN BEGIN
        BufferTableLabel."Label Readed":=TRUE;
        BufferTableLabel.MODIFY;
      END;
    END;

    PROCEDURE LiberateMarkLabelBuffer@1102401057(SourceType@1102401003 : Code[20]);
    VAR
      BufferTableLabel@1102401006 : Record 50060;
    BEGIN
      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("User ID"         ,USERID);
      BufferTableLabel.SETRANGE("Type Transation" ,SourceType);
      BufferTableLabel.SETFILTER("Label Readed"   ,'=%1',TRUE);
      IF BufferTableLabel.FINDSET THEN BEGIN
        REPEAT
          BufferTableLabel."Label Readed":=FALSE;
          BufferTableLabel.MODIFY;
        UNTIL BufferTableLabel.NEXT=0;
      END;
    END;

    PROCEDURE LiberateMarkNoLabel@1102401063(SourceType@1102401003 : Code[20];EntryLabel@1102401001 : Code[20]);
    VAR
      BufferTableLabel@1102401006 : Record 50060;
      EntryL@1102401002 : Integer;
    BEGIN
      EVALUATE(EntryL,EntryLabel);
      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("User ID"                 ,USERID);
      BufferTableLabel.SETRANGE("Type Transation"         ,SourceType);
      BufferTableLabel.SETFILTER("Label Readed"           ,'=%1',TRUE);
      BufferTableLabel.SETRANGE("Printed Entry No. Label" ,EntryL);
      IF BufferTableLabel.FINDSET THEN BEGIN
        REPEAT
          BufferTableLabel."Label Readed":=FALSE;
          BufferTableLabel.MODIFY;
        UNTIL BufferTableLabel.NEXT=0;
      END;
    END;

    PROCEDURE InsertPreInventaryCompl@1102401060(InventoryCode@1102401017 : Code[50];ItemNo@1102401001 : Code[30]);
    VAR
      BinContent@1102401002 : Record 7302;
      InventaryScan@1102401003 : Record 50066;
      InventaryScan2@1102401004 : Record 50066;
      PhysQuantity@1102401005 : Decimal;
      WarehouseEntry@1102401006 : Record 7312;
      PreInventary@1102401007 : Record 50066;
      InventatyTmp@1102401008 : Record 50066;
      EntryNo@1102401009 : Integer;
      Item@1102401010 : Record 27;
      InventaryRec@1102401011 : Record 50066;
      InvScan@1102401016 : Record 50066;
      Location@1102401015 : Record 14;
    BEGIN
      Item.GET(ItemNo);

      Location.RESET;
      Location.SETRANGE("Inventory Physical Code",InventoryCode);
        IF Location.FINDSET THEN BEGIN
          REPEAT
            BinContent.RESET;
            BinContent.SETRANGE("Location Code" ,Location.Code);
            BinContent.SETRANGE("Item No."      ,ItemNo);
            IF BinContent.FINDSET THEN BEGIN
              REPEAT
                PhysQuantity  :=0;
                WarehouseEntry.SETRANGE("Item No."      ,Item."No.");
                WarehouseEntry.SETRANGE("Location Code" ,BinContent."Location Code");
                WarehouseEntry.SETRANGE("Bin Code"      ,BinContent."Bin Code");
                IF WarehouseEntry.FINDSET THEN BEGIN
                  WarehouseEntry.CALCSUMS("Qty. (Base)");
                  PhysQuantity:=WarehouseEntry."Qty. (Base)";
                END;

                PreInventary.RESET;
                PreInventary.SETRANGE("Item No"       ,Item."No.");
                PreInventary.SETRANGE("Cod. Location" ,BinContent."Location Code");
                PreInventary.SETRANGE("Bin Code"      ,BinContent."Bin Code");
                PreInventary.SETRANGE("Inventory Code",InventoryCode);
                IF NOT PreInventary.FINDSET THEN BEGIN
                  InventatyTmp.RESET;
                  IF InventatyTmp.FINDLAST THEN
                    EntryNo := InventatyTmp."Entry No"+1
                  ELSE
                    EntryNo:=1;

                  InventaryRec.INIT;
                  InventaryRec.VALIDATE("Entry No"      ,EntryNo);
                  InventaryRec.VALIDATE("Item No"       ,Item."No.");
                  InventaryRec.VALIDATE("Cod. Location" ,BinContent."Location Code");
                  InventaryRec.VALIDATE("Bin Code"      ,BinContent."Bin Code");
                  InventaryRec.Description              := Item.Description;
                  InventaryRec."Posting Date"           := TODAY;
                  InventaryRec."User ID"                := USERID;
                  InventaryRec."Qty Calculated NAV"     := PhysQuantity;
                  InventaryRec."Quantity Scan"          := 0;
                  InventaryRec."Inventory Code"         :=InventoryCode;
                  InventaryRec.INSERT;
                  //>>busca lotes en sistema
                  SearchLotNo(InventaryRec,Item."No.",BinContent."Location Code",BinContent."Bin Code",InventoryCode);
                END;
              UNTIL BinContent.NEXT=0;
            END;
          UNTIL Location.NEXT=0;
        END;
    END;

    PROCEDURE ValidateStatusLabelDiarioSalida@1102401065(LabelEntry@1102401001 : Code[10]) : Code[50];
    VAR
      NoLabel@1102401002 : Integer;
      LabelLedgerEntry@1102401003 : Record 50011;
    BEGIN
      EVALUATE(NoLabel,LabelEntry);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(NoLabel);
      IF NOT (LabelLedgerEntry."Label Status" = LabelLedgerEntry."Label Status"::Pendiente) THEN
        EXIT('La Etiqueta ya se encuentra en sistema!!')
      ELSE BEGIN
        IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Pendiente Liberacion" THEN
          ERROR('La Etiqueta %1, esta pendiente de liberar por Calidad',NoLabel);
        IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Bloqueado Calidad" THEN
          ERROR('La Etiqueta %1, se encuentra Bloqueado por Calidad',NoLabel);
        EXIT('');
      END;
    END;

    PROCEDURE ConfirmStatusLablJrnalInventary@1102401102(JournalTemplateName@1102401005 : Code[50];JournalBatchName@1102401004 : Code[50]) : Code[50];
    VAR
      NoLabel@1102401002 : Integer;
      LabelLedgerEntry@1102401003 : Record 50011;
    BEGIN
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETRANGE("Journal Template Name"  ,JournalTemplateName);
      LabelLedgerEntry.SETRANGE("Journal Batch Name"     ,JournalBatchName);
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          LabelLedgerEntry."Label Status" := LabelLedgerEntry."Pre-Label Status";
          //LabelLedgerEntry."Remaining Quantity Label" := LabelLedgerEntry."Pre Remaining Quantity";
          LabelLedgerEntry."Journal Template Name"  :='';
          LabelLedgerEntry."Journal Batch Name"     :='';
          LabelLedgerEntry."Journal Line No."       :=0;
          LabelLedgerEntry.MODIFY;
        UNTIL LabelLedgerEntry.NEXT=0;
      END;
    END;

    PROCEDURE LiberateLabelReadedBuffer@1102401067(Source@1102401001 : Code[30];NoLabel@1102401002 : Integer);
    VAR
      BufferTableLabel@1102401003 : Record 50060;
    BEGIN
      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("Type Transation"         ,Source);
      BufferTableLabel.SETRANGE("User ID"                 ,USERID);
      BufferTableLabel.SETFILTER("Label Readed"           ,'=%1',TRUE);
      BufferTableLabel.SETRANGE("Printed Entry No. Label" ,NoLabel);
      IF BufferTableLabel.FINDSET THEN BEGIN
        BufferTableLabel."Label Readed" :=FALSE;
        BufferTableLabel.MODIFY;
      END;
    END;

    PROCEDURE ValidateLabelNoAudiEmb@1102401068(LabelNo@1102401002 : Integer);
    VAR
      AuditShipmentLinesDetall@1102401001 : Record 50067;
    BEGIN
      AuditShipmentLinesDetall.RESET;
      AuditShipmentLinesDetall.SETRANGE("Label No.",LabelNo);
      IF AuditShipmentLinesDetall.FINDSET THEN
        ERROR('Ya Existe la Etiqueta No. %1 en la Auditoria %2',LabelNo,AuditShipmentLinesDetall."Document No. Ref");
    END;

    PROCEDURE MessageErrorEmb@1102401071(CustOriginal@1102401001 : Code[30];CustProcess@1102401002 : Code[30]);
    VAR
      ItemR@1102401003 : Record 27;
    BEGIN
      ERROR('Se deben leer Etiquetas del mismo Cliente %1',CustOriginal);
    END;

    PROCEDURE MessageErrorEmpCompl@1102401081();
    BEGIN
      ERROR('No se puede enviar Solo Empaque Complementario a una Auditoria Embarque Nueva');
    END;

    PROCEDURE AjustNegItem3@1102401073(AuditShipmentHeader@1102401001 : Code[30]) : Boolean;
    VAR
      AuditShipmentDetallPacking@1102401008 : Record 50068;
      ItemJournalLine@1102401007 : Record 83;
      Libro@1102401006 : Code[30];
      Seccion@1102401005 : Code[30];
      TmpItemJournalL@1102401004 : Record 83;
      Line@1102401003 : Integer;
      CodO@1102401002 : Record 82;
      ItemJournaLine2@1102401009 : Record 83;
      ItemLedgerEntry@1102401010 : Record 32;
    BEGIN
      ManufacturingSetup.GET('');
      ManufacturingSetup.TESTFIELD("Journal Template Name Item");
      ManufacturingSetup.TESTFIELD("Journal Batch Name Item");
      Libro     :=  ManufacturingSetup."Journal Template Name Item";
      Seccion   :=  ManufacturingSetup."Journal Batch Name Item";

      AuditShipmentDetallPacking.RESET;
      AuditShipmentDetallPacking.SETRANGE("Document No. Ref",AuditShipmentHeader);
      AuditShipmentDetallPacking.SETFILTER("Packing Compl",'%1',TRUE);
      IF AuditShipmentDetallPacking.FINDSET THEN BEGIN
        REPEAT
          TmpItemJournalL.RESET;
          TmpItemJournalL.SETRANGE("Journal Template Name",Libro);
          TmpItemJournalL.SETRANGE("Journal Batch Name",Seccion);
          IF TmpItemJournalL.FINDLAST THEN
            Line:=TmpItemJournalL."Line No."+10000
          ELSE
            Line :=10000;

          ItemJournalLine.INIT;
          ItemJournalLine.VALIDATE("Journal Template Name" , Libro);
          ItemJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
          ItemJournalLine."Line No."                       :=Line;
          CodO.GET(Libro);
          ItemJournalLine.VALIDATE("Posting Date"          , TODAY);
          ItemJournalLine.VALIDATE("Entry Type"            , ItemJournalLine."Entry Type" ::"Negative Adjmt.");
          ItemJournalLine."Source Code"                    :=CodO."Source Code";
          LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
          ItemJournalLine."Document No."                   :=AuditShipmentHeader;
          ItemJournalLine.VALIDATE("Item No."              , AuditShipmentDetallPacking."No.");
          ItemJournalLine.VALIDATE("Location Code"         , AuditShipmentDetallPacking."Location Code");
          ItemJournalLine.VALIDATE("Bin Code"              , AuditShipmentDetallPacking."Bin Code");
          ItemJournalLine.VALIDATE(Quantity                , AuditShipmentDetallPacking.Quantity);
          IF ItemJournalLine.INSERT(TRUE) THEN BEGIN
          CLEAR(ItemJnlPostBatch);
          ItemJournaLine2.RESET;
          ItemJournaLine2.SETRANGE("Journal Template Name"  ,Libro);
          ItemJournaLine2.SETRANGE("Journal Batch Name"     ,Seccion);
          IF ItemJournaLine2.FINDSET THEN BEGIN
            ItemJnlPostBatch.RUN(ItemJournaLine2);

            ItemLedgerEntry.RESET;
            ItemLedgerEntry.SETRANGE("Item No."       , AuditShipmentDetallPacking."No.");
            ItemLedgerEntry.SETRANGE("Entry Type"     , ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
            ItemLedgerEntry.SETRANGE("Document No."   , AuditShipmentHeader);
            ItemLedgerEntry.SETRANGE("Posting Date"   , TODAY);
            IF ItemLedgerEntry.FINDLAST THEN BEGIN
              AuditShipmentDetallPacking."Entry No Ajust" :=ItemLedgerEntry."Entry No.";
              AuditShipmentDetallPacking.MODIFY;
            END;
          END;
          END;
        UNTIL AuditShipmentDetallPacking.NEXT=0;
      END;
    END;

    PROCEDURE AjustPosItem3@1102401076(AuditShipmentHeader@1102401001 : Code[30]) : Boolean;
    VAR
      AuditShipmentDetallPacking@1102401002 : Record 50068;
      ItemJournalLine@1102401003 : Record 83;
      Libro@1102401004 : Code[30];
      Seccion@1102401005 : Code[30];
      TmpItemJournalL@1102401006 : Record 83;
      Line@1102401007 : Integer;
      CodO@1102401008 : Record 82;
      ItemJournaLine2@1102401009 : Record 83;
      ItemLedgerEntry@1102401010 : Record 32;
    BEGIN
      ManufacturingSetup.GET('');
      ManufacturingSetup.TESTFIELD("Journal Template Name Item");
      ManufacturingSetup.TESTFIELD("Journal Batch Name Item");
      Libro     :=  ManufacturingSetup."Journal Template Name Item";
      Seccion   :=  ManufacturingSetup."Journal Batch Name Item";

      AuditShipmentDetallPacking.RESET;
      AuditShipmentDetallPacking.SETRANGE("Document No. Ref",AuditShipmentHeader);
      AuditShipmentDetallPacking.SETFILTER("Packing Compl",'%1',TRUE);
      IF AuditShipmentDetallPacking.FINDSET THEN BEGIN
        REPEAT
          TmpItemJournalL.RESET;
          TmpItemJournalL.SETRANGE("Journal Template Name",Libro);
          TmpItemJournalL.SETRANGE("Journal Batch Name",Seccion);
          IF TmpItemJournalL.FINDLAST THEN
            Line:=TmpItemJournalL."Line No."+10000
          ELSE
            Line :=10000;

          ItemJournalLine.INIT;
          ItemJournalLine.VALIDATE("Journal Template Name" , Libro);
          ItemJournalLine.VALIDATE("Journal Batch Name"    , Seccion);
          ItemJournalLine."Line No."                       :=Line;
          CodO.GET(Libro);
          ItemJournalLine.VALIDATE("Posting Date"          , TODAY);
          ItemJournalLine.VALIDATE("Entry Type"            , ItemJournalLine."Entry Type" ::"Positive Adjmt.");
          ItemJournalLine."Source Code"                    :=CodO."Source Code";
          LabelMtg.GeneraTurno(ItemJournalLine."Work Shift Code");
          ItemJournalLine."Document No."                   :=AuditShipmentHeader;
          ItemJournalLine.VALIDATE("Item No."              , AuditShipmentDetallPacking."No.");
          ItemJournalLine.VALIDATE("Location Code"         , AuditShipmentDetallPacking."Location Code");
          ItemJournalLine.VALIDATE("Bin Code"              , AuditShipmentDetallPacking."Bin Code");
          ItemJournalLine.VALIDATE(Quantity                , AuditShipmentDetallPacking.Quantity);
          IF  ItemJournalLine.INSERT(TRUE) THEN BEGIN
          CLEAR(ItemJnlPostBatch);
          ItemJournaLine2.RESET;
          ItemJournaLine2.SETRANGE("Journal Template Name"  ,Libro);
          ItemJournaLine2.SETRANGE("Journal Batch Name"     ,Seccion);
          IF ItemJournaLine2.FINDSET THEN BEGIN
            ItemJnlPostBatch.RUN(ItemJournaLine2);
            ItemLedgerEntry.RESET;
            ItemLedgerEntry.SETRANGE("Item No."       , AuditShipmentDetallPacking."No.");
            ItemLedgerEntry.SETRANGE("Entry Type"     , ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
            ItemLedgerEntry.SETRANGE("Document No."   , AuditShipmentHeader);
            ItemLedgerEntry.SETRANGE("Posting Date"   , TODAY);
            IF ItemLedgerEntry.FINDLAST THEN BEGIN
              AuditShipmentDetallPacking."Entry No Ajust" :=ItemLedgerEntry."Entry No.";
              AuditShipmentDetallPacking.MODIFY;
            END;
          END;
          END;
        UNTIL AuditShipmentDetallPacking.NEXT=0;
      END;
    END;

    PROCEDURE CalcPackingAuditEmb@1102401078(AuditShipmentHeader@1102401001 : Code[30]);
    VAR
      AuditShipmentLines@1102401002 : Record 50063;
      AuditShipmentDetalPacking@1102401003 : Record 50068;
      TmpAuditShipmentDetalPacking@1102401004 : Record 50068;
      CodeItem3@1102401005 : Code[10];
      ProductionBOMLine@1102401006 : Record 99000772;
      Item@1102401007 : Record 27;
      LineNo@1102401008 : Integer;
      AuditShipmentHeaderR@1102401009 : Record 50062;
      Qty@1102401010 : Decimal;
      LocationCode@1102401011 : Code[30];
      BinCode@1102401012 : Code[30];
      ProdOrderComponent@1102401015 : Record 60800;
      LabelLedgerEntry@1102401014 : Record 50011;
      AuditShipmentLinesDetall@1102401013 : Record 50067;
      ProdOrderComp@1102401016 : Record 5407;
    BEGIN
      {

      // RMA 22-01-19

      AuditShipmentHeaderR.GET(AuditShipmentHeader);

      AuditShipmentLinesDetall.RESET;
      AuditShipmentLinesDetall.SETFILTER("Document No. Ref",'=%1',AuditShipmentHeaderR."No.");
      IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
        REPEAT
          AuditShipmentLines.RESET;
          AuditShipmentLines.SETRANGE("Document No." ,AuditShipmentLinesDetall."Document No. Ref");
          AuditShipmentLines.SETRANGE("No."          ,AuditShipmentLinesDetall."No.");
          AuditShipmentLines.FINDSET;

          LabelLedgerEntry.SETCURRENTKEY("Entry No.");
          LabelLedgerEntry.GET(AuditShipmentLinesDetall."Label No.");

          ProdOrderComponent.RESET;
          ProdOrderComponent.SETRANGE("Prod. Order No.",LabelLedgerEntry."Document No.");
          IF ProdOrderComponent.FINDSET THEN BEGIN
            REPEAT
              CodeItem3 := COPYSTR(ProdOrderComponent."Item No.",1,1);
              IF (CodeItem3 = '3') THEN BEGIN
                Qty:=0;
                Qty := AuditShipmentLinesDetall.Quantity*ProdOrderComponent."Quantity per";
                TmpAuditShipmentDetalPacking.RESET;
                TmpAuditShipmentDetalPacking.SETRANGE("Document No. Ref" ,AuditShipmentLines."Document No.");
                TmpAuditShipmentDetalPacking.SETRANGE("Line No. Ref"     ,AuditShipmentLines."Line No.");
                IF TmpAuditShipmentDetalPacking.FINDLAST THEN
                  LineNo := TmpAuditShipmentDetalPacking."Line No."+1
                ELSE
                  LineNo:=1;
                AuditShipmentDetalPacking.INIT;
                AuditShipmentDetalPacking.VALIDATE("Document No. Ref"   ,AuditShipmentLines."Document No.");
                AuditShipmentDetalPacking.VALIDATE("Line No. Ref"       ,AuditShipmentLines."Line No.");
                AuditShipmentDetalPacking.VALIDATE("Line No."           ,LineNo);
                AuditShipmentDetalPacking.VALIDATE("Customer No."       ,AuditShipmentLines."Customer No.");
                AuditShipmentDetalPacking.VALIDATE("Posting Date"       ,TODAY);
                AuditShipmentDetalPacking.VALIDATE("Posting Time"       ,FORMAT(TIME));
                AuditShipmentDetalPacking.VALIDATE("No."                ,ProdOrderComponent."Item No.");
                AuditShipmentDetalPacking.VALIDATE("Location Code"      ,LocationCode);
                AuditShipmentDetalPacking.VALIDATE("Bin Code"           ,BinCode);
                AuditShipmentDetalPacking.VALIDATE(Quantity             ,Qty);
                AuditShipmentDetalPacking.INSERT;
              END;
            UNTIL ProdOrderComponent.NEXT=0;
          END ELSE BEGIN
            //ERROR('No se encontro orden');   // Jesus ATX 2019-ene-02
            ProdOrderComp.RESET;
            ProdOrderComp.SETRANGE("Prod. Order No.",LabelLedgerEntry."Document No.");
            IF ProdOrderComp.FINDSET THEN BEGIN
            REPEAT
              CodeItem3 := COPYSTR(ProdOrderComp."Item No.",1,1);
              IF (CodeItem3 = '3') THEN BEGIN
                Qty:=0;
                Qty := AuditShipmentLinesDetall.Quantity*ProdOrderComp."Quantity per";
                TmpAuditShipmentDetalPacking.RESET;
                TmpAuditShipmentDetalPacking.SETRANGE("Document No. Ref" ,AuditShipmentLines."Document No.");
                TmpAuditShipmentDetalPacking.SETRANGE("Line No. Ref"     ,AuditShipmentLines."Line No.");
                IF TmpAuditShipmentDetalPacking.FINDLAST THEN
                  LineNo := TmpAuditShipmentDetalPacking."Line No."+1
                ELSE
                  LineNo:=1;
                AuditShipmentDetalPacking.INIT;
                AuditShipmentDetalPacking.VALIDATE("Document No. Ref"   ,AuditShipmentLines."Document No.");
                AuditShipmentDetalPacking.VALIDATE("Line No. Ref"       ,AuditShipmentLines."Line No.");
                AuditShipmentDetalPacking.VALIDATE("Line No."           ,LineNo);
                AuditShipmentDetalPacking.VALIDATE("Customer No."       ,AuditShipmentLines."Customer No.");
                AuditShipmentDetalPacking.VALIDATE("Posting Date"       ,TODAY);
                AuditShipmentDetalPacking.VALIDATE("Posting Time"       ,FORMAT(TIME));
                AuditShipmentDetalPacking.VALIDATE("No."                ,ProdOrderComp."Item No.");
                AuditShipmentDetalPacking.VALIDATE("Location Code"      ,LocationCode);
                AuditShipmentDetalPacking.VALIDATE("Bin Code"           ,BinCode);
                AuditShipmentDetalPacking.VALIDATE(Quantity             ,Qty);
                AuditShipmentDetalPacking.INSERT;
              END;
            UNTIL ProdOrderComp.NEXT=0;
          END
          END;

          IF NOT AuditShipmentLines."Calculated Packing" =TRUE THEN BEGIN
            AuditShipmentLines."Calculated Packing":=TRUE;
            AuditShipmentLines.MODIFY(TRUE);
          END;
        UNTIL AuditShipmentLinesDetall.NEXT=0;
      END;
      }


      AuditShipmentHeaderR.GET(AuditShipmentHeader);

      AuditShipmentLinesDetall.RESET;
      AuditShipmentLinesDetall.SETFILTER("Document No. Ref",'=%1',AuditShipmentHeaderR."No.");
      IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
        REPEAT
          AuditShipmentLines.RESET;
          AuditShipmentLines.SETRANGE("Document No." ,AuditShipmentLinesDetall."Document No. Ref");
          AuditShipmentLines.SETRANGE("No."          ,AuditShipmentLinesDetall."No.");
          AuditShipmentLines.FINDSET;


          LabelLedgerEntry.RESET;
          LabelLedgerEntry.SETRANGE("Entry No.",AuditShipmentLinesDetall."Label No.");
          LabelLedgerEntry.FINDSET;
          //LabelLedgerEntry.GET(AuditShipmentLinesDetall."Label No.");

          Qty := 1;
          TmpAuditShipmentDetalPacking.RESET;
          TmpAuditShipmentDetalPacking.SETRANGE("Document No. Ref" ,AuditShipmentLines."Document No.");
          TmpAuditShipmentDetalPacking.SETRANGE("Line No. Ref"     ,AuditShipmentLines."Line No.");
          IF TmpAuditShipmentDetalPacking.FINDLAST THEN
            LineNo := TmpAuditShipmentDetalPacking."Line No."+1
          ELSE
            LineNo:=1;
          AuditShipmentDetalPacking.INIT;
          AuditShipmentDetalPacking.VALIDATE("Document No. Ref"   ,AuditShipmentLines."Document No.");
          AuditShipmentDetalPacking.VALIDATE("Line No. Ref"       ,AuditShipmentLines."Line No.");
          AuditShipmentDetalPacking.VALIDATE("Line No."           ,LineNo);
          AuditShipmentDetalPacking.VALIDATE("Customer No."       ,AuditShipmentLines."Customer No.");
          AuditShipmentDetalPacking.VALIDATE("Posting Date"       ,TODAY);
          AuditShipmentDetalPacking.VALIDATE("Posting Time"       ,FORMAT(TIME));
          IF LabelLedgerEntry."Packing Code" <> '' THEN
            AuditShipmentDetalPacking.VALIDATE("No."              ,LabelLedgerEntry."Packing Code");
          AuditShipmentDetalPacking.VALIDATE("Location Code"      ,LocationCode);
          AuditShipmentDetalPacking.VALIDATE("Bin Code"           ,BinCode);
          AuditShipmentDetalPacking.VALIDATE(Quantity             ,Qty);
          AuditShipmentDetalPacking.VALIDATE("Label No."          ,LabelLedgerEntry."Entry No.");
          AuditShipmentDetalPacking.INSERT;

          IF NOT AuditShipmentLines."Calculated Packing" =TRUE THEN BEGIN
            AuditShipmentLines."Calculated Packing":=TRUE;
            AuditShipmentLines.MODIFY(TRUE);
          END;
        UNTIL AuditShipmentLinesDetall.NEXT=0;
      END;
    END;

    PROCEDURE DeletePackingAuditEmb@1102401079(AuditShipmentHeader@1102401002 : Code[30]) : Boolean;
    VAR
      AuditShipmentDetallPacking@1102401001 : Record 50068;
      AuditShipmentLines@1102401003 : Record 50063;
    BEGIN
      AuditShipmentLines.RESET;
      AuditShipmentLines.SETRANGE("Document No.",AuditShipmentHeader);
      IF AuditShipmentLines.FINDSET THEN BEGIN
        REPEAT
          AuditShipmentDetallPacking.RESET;
          AuditShipmentDetallPacking.SETRANGE("Document No. Ref",AuditShipmentLines."Document No.");
          AuditShipmentDetallPacking.SETRANGE("Line No. Ref",AuditShipmentLines."Line No.");
          IF AuditShipmentDetallPacking.FINDSET THEN
          REPEAT
            AuditShipmentDetallPacking.DELETE;
          UNTIL AuditShipmentDetallPacking.NEXT=0;
          AuditShipmentLines."Calculated Packing":=FALSE;
          AuditShipmentLines.MODIFY;
        UNTIL AuditShipmentLines.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE AsignLabelLedEntryCons@1102401083(ItemJournalLine@1102401001 : Record 83;EntryLabl@1102401003 : Integer) : Boolean;
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
    BEGIN
      IF LabelLedgerEntry.GET(EntryLabl) THEN BEGIN
        LabelLedgerEntry."ASN No. Generado"   :=ItemJournalLine."Document No.";
        LabelLedgerEntry."ASN Linea Generado" :=ItemJournalLine."Line No.";
        LabelLedgerEntry."Mark Process" :=TRUE;
        LabelLedgerEntry.Mark :=TRUE;
        LabelLedgerEntry.MODIFY(TRUE);
      END;
    END;

    PROCEDURE AsignLabelConsngASN@1102401084(VarASN@1102401002 : Integer);
    VAR
      QtyLabl@1102401004 : Decimal;
      LabelLedgerEntry2@1102401005 : Record 50011;
      Qty@1102401006 : Decimal;
      ASNSalesInvoiceLine@1102401007 : Record 50049;
      ProducOrder@1102401008 : Record 5405;
      DiarioConsig@1102401009 : Record 50031;
      TmpDiarioConsignacion@1102401010 : Record 50031;
      NoMov@1102401011 : Integer;
    BEGIN
      Qty:=0;
      QtyLabl:=0;

      ASNSalesInvoiceLine.RESET;
      ASNSalesInvoiceLine.SETRANGE("Document No." ,FORMAT(VarASN));
      //ASNSalesInvoiceLine.SETRANGE("Line No."     ,VarNoLineASN);
      IF ASNSalesInvoiceLine.FINDSET THEN;
      //  Qty += ASNSalesInvoiceLine.Quantity;

      LabelLedgerEntry2.RESET;
      LabelLedgerEntry2.SETRANGE("ASN No. Generado"   ,FORMAT(ASNSalesInvoiceLine.HellaCustomerReferenceNumber));
      //LabelLedgerEntry2.SETRANGE("ASN Linea Generado" ,VarNoLineASN;
      LabelLedgerEntry2.SETFILTER("Mark Process"      ,'=%1',TRUE);
      IF LabelLedgerEntry2.FINDSET THEN
      REPEAT
        QtyLabl+=LabelLedgerEntry2.Quantity;
      UNTIL LabelLedgerEntry2.NEXT=0;

      //IF (Qty = QtyLabl) THEN
      //  ERROR('ASN Completo..ya fueron Generadas las Series');

      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETFILTER(Mark,'=%1',TRUE);
      LabelLedgerEntry.SETFILTER("Mark Process",'=%1',TRUE);
      LabelLedgerEntry.SETRANGE("ASN No. Generado",FORMAT(ASNSalesInvoiceLine.HellaCustomerReferenceNumber));
      //LabelLedgerEntry.SETRANGE("Source No.",LabelLedgerEntry5."Source No.");
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          IF ProducOrder.GET(ProducOrder.Status::Released,LabelLedgerEntry."Document No.") THEN;

          DiarioConsig.RESET;
          IF DiarioConsig.FINDLAST THEN
            NoMov:= DiarioConsig."No. Entry"+1
          ELSE
            NoMov:= 1;
          TmpDiarioConsignacion.INIT;
          TmpDiarioConsignacion.VALIDATE("No. Entry"              ,NoMov);
          TmpDiarioConsignacion.VALIDATE("No. ASN"                ,FORMAT(ASNSalesInvoiceLine.HellaCustomerReferenceNumber));
          TmpDiarioConsignacion.VALIDATE("Item No."               ,LabelLedgerEntry."Source No.");
          TmpDiarioConsignacion.VALIDATE(Serie                    ,LabelLedgerEntry."Cod Serie Hella");
          TmpDiarioConsignacion.VALIDATE("No. Lote"               ,LabelLedgerEntry."Lot. No");
          TmpDiarioConsignacion.VALIDATE("No. Mov Label"          ,LabelLedgerEntry."Entry No.");
          TmpDiarioConsignacion.VALIDATE("Line No."               ,LabelLedgerEntry."ASN Linea Generado");
          TmpDiarioConsignacion.VALIDATE("Qty Contenedor"         ,LabelLedgerEntry.Quantity);
          TmpDiarioConsignacion.VALIDATE("Qty por Contenedor"     ,ProducOrder."Packing Unit");
          TmpDiarioConsignacion.VALIDATE("Descripcion Contenedor" ,ProducOrder."Part No. Interno Packing");
          TmpDiarioConsignacion.VALIDATE("USER ID"                ,USERID);
          TmpDiarioConsignacion.INSERT;

        UNTIL LabelLedgerEntry.NEXT=0;
      END;
    END;

    PROCEDURE ValidaStutusPosting@1102401088(IDSource@1102401001 : Code[30]);
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
    BEGIN

      LabelLedgerEntry.SETRANGE(IDSourcePostin,IDSource);
      //LabelLedgerEntry.SETFILTER("Pre-Label Status",'<>%1',LabelLedgerEntry."Pre-Label Status"::" ");
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          LabelLedgerEntry."Label Status" :=  LabelLedgerEntry."Pre-Label Status";
          LabelLedgerEntry.MODIFY(TRUE);
        UNTIL LabelLedgerEntry.NEXT=0;
      END;
    END;

    PROCEDURE ValidatQtyCons@1102401089(ProdOrdNo@1102401001 : Code[30];ItemNo@1102401002 : Code[30];EntryL@1102401003 : Integer;NoLot@1102401012 : Code[30];VAR QtyLM@1102401010 : Decimal;VAR QtyLabel@1102401015 : Decimal;VAR QtyNAV@1102401016 : Decimal) : Boolean;
    VAR
      ProducOrder@1102401004 : Record 5405;
      ProdOrderLine@1102401005 : Record 5406;
      ProdOrderComponent@1102401006 : Record 5407;
      LocationCode@1102401007 : Code[30];
      BinCode@1102401008 : Code[30];
      Item@1102401009 : Record 27;
      QtyExitsReal@1102401011 : Decimal;
      RemainingQty@1102401013 : Decimal;
      RemainingQty2@1102401014 : Decimal;
    BEGIN
      ProducOrder.RESET;
      ProducOrder.SETFILTER(Status,'=%1|%2',ProducOrder.Status::Released,ProducOrder.Status::"Firm Planned");
      ProducOrder.SETRANGE(ProducOrder."No.",ProdOrdNo);
      ProducOrder.FINDSET;

      ProdOrderLine.RESET;
      ProdOrderLine.SETFILTER(Status,'=%1|%2',ProdOrderLine.Status::Released,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrdNo);
      ProdOrderLine.FINDSET;

      QtyLM:=0;
      QtyLabel:=0;
      ProdOrderComponent.RESET;
      ProdOrderComponent.SETFILTER(Status,'=%1|%2',ProdOrderComponent.Status::Released,ProdOrderComponent.Status::"Firm Planned");
      ProdOrderComponent.SETRANGE("Prod. Order No."     ,ProducOrder."No.");
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComponent.SETRANGE("Item No."            ,ItemNo);
      IF ProdOrderComponent.FINDSET THEN BEGIN
        LocationCode :=ProdOrderComponent."Location Code";
        BinCode      :=ProdOrderComponent."Bin Code";
        QtyLM := ProdOrderComponent."Remaining Quantity";
      END;

      QtyExitsReal  :=ConsultExistLotNo(ItemNo,NoLot,LocationCode,BinCode);
      IF (QtyExitsReal < 0) THEN
        ERROR('Lote No Disponible %1, en Producto ,%2',NoLot,ItemNo)
      ELSE
        QtyNAV := QtyExitsReal;


      LabelLedgerEntry.GET(EntryL);
      {
      IF (LabelLedgerEntry."Remaining Quantity" = 0) THEN
        ERROR('No hay Cantidad Pendiente de Consumir de la Etiqueta!!')
      ELSE
      }
      LabelLedgerEntry.CALCFIELDS("Remaint Quantity Lot");
        QtyLabel := LabelLedgerEntry."Remaint Quantity Lot";


      EXIT(TRUE);
    END;

    PROCEDURE ValidaPostedPurchReceipt@1102401112(ReceiptNo@1102401001 : Code[30]) : Boolean;
    VAR
      PurchRcptHeader@1102401002 : Record 120;
    BEGIN
      PurchRcptHeader.RESET;
      IF PurchRcptHeader.GET(ReceiptNo) THEN
        EXIT(TRUE)
      ELSE
        ERROR('la Recepcion %1, no se encuentra',ReceiptNo);
    END;

    PROCEDURE MssgErrorQtyCons@1102401092(QtyL@1102401001 : Decimal;QtyGrid@1102401002 : Decimal);
    BEGIN
      ERROR('La Cantidad Disponible de la Etiqueta %1, es Menor a la establecida %2 ',QtyL,QtyGrid);
    END;

    PROCEDURE MssgErrorQtyNoDisponb@1102401094(QtyNAV@1102401002 : Decimal;QtyGrid@1102401001 : Decimal);
    BEGIN
      ERROR('La Cantidad Disponible en Sistema %1 es Menor a la establecida %2',QtyNAV,QtyGrid);
    END;

    PROCEDURE MessageErrorBreak@1102401009();
    BEGIN
      ERROR('Se ha Detenido la Actividad de Envio, Favor de Revisar la Informacion!!');
    END;

    PROCEDURE ValidaDiariosEnVacio@1102401090();
    VAR
      ItemJournalLine@1102401001 : Record 83;
      UserSetup@1102401002 : Record 91;
      Libro@1102401003 : Code[30];
      Seccion@1102401004 : Code[30];
    BEGIN
      UserSetup.RESET;
      UserSetup.GET(USERID);
      UserSetup.TESTFIELD("Journal Template Name Reclass");
      UserSetup.TESTFIELD("Journal Batch Name Reclass");
      Libro   :=UserSetup."Journal Template Name Reclass";
      Seccion :=UserSetup."Journal Batch Name Reclass";

      ItemJournalLine.RESET;
      ItemJournalLine.SETRANGE("Journal Template Name",Libro);
      ItemJournalLine.SETRANGE("Journal Batch Name"   ,Seccion);
      IF ItemJournalLine.FINDSET THEN
        ERROR('El Diario Configurado %1, %2, debe estar vacio antes de enviar Movimientos!!',Libro,Seccion);
    END;

    PROCEDURE MessErrorCodAuditoria@1102401095();
    BEGIN
      ERROR('Favor de seleccionar un Codigo de Auditoria!!');
    END;

    PROCEDURE RenombraLogLectura@1102401096(LabelNo@1102401002 : Code[20]) : Boolean;
    VAR
      BufferTableLabel@1102401001 : Record 50060;
      EtiquetaNo@1102401003 : Integer;
      LabelLedgerEntry@1102401004 : Record 50011;
    BEGIN
      EVALUATE(EtiquetaNo,LabelNo);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETCURRENTKEY("Entry No.");
      LabelLedgerEntry.GET(EtiquetaNo);

      {
      LabelLedgerEntry."Label Status" := LabelLedgerEntry."Pre-Label Status";
      LabelLedgerEntry."Pre-Label Status" :=LabelLedgerEntry."Pre-Label Status"::" ";

      LabelLedgerEntry."Physical Location" := LabelLedgerEntry."Pre Physical Location";
      LabelLedgerEntry."Pre Physical Location" := '';

      LabelLedgerEntry."Remaining Quantity" := LabelLedgerEntry."Pre Remaining Quantity";
      LabelLedgerEntry."Pre Remaining Quantity" :=0;
      LabelLedgerEntry.MODIFY(TRUE);
      }

      BufferTableLabel.RESET;
      BufferTableLabel.SETRANGE("Type Transation"         ,'SALIDA');
      BufferTableLabel.SETRANGE("Printed Entry No. Label" ,EtiquetaNo);
      BufferTableLabel.SETRANGE("User ID"                 ,USERID);
      IF BufferTableLabel.FINDLAST THEN BEGIN
        BufferTableLabel."Status Label Real" :=LabelLedgerEntry."Label Status";
        BufferTableLabel."Label Posting"  := TRUE;
        BufferTableLabel.MODIFY;
      END;
      COMMIT;
    END;

    PROCEDURE ConfirmaStatusDiario@1102401100(EtiquetaNo@1102401001 : Code[20];ID_Origen@1102401002 : Code[20];DocumentNo@1102401004 : Code[30]);
    VAR
      LabelNo@1102401003 : Integer;
    BEGIN
      EVALUATE(LabelNo,EtiquetaNo);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.SETRANGE("Entry No.",LabelNo);
      LabelLedgerEntry.SETRANGE("Document No.",DocumentNo);
      LabelLedgerEntry.SETFILTER("Pre-Label Status",'<>%1',LabelLedgerEntry."Pre-Label Status"::" ");
      IF LabelLedgerEntry.FINDSET THEN BEGIN
        REPEAT
          LabelLedgerEntry."Label Status" :=  LabelLedgerEntry."Pre-Label Status";
          LabelLedgerEntry.MODIFY(TRUE);
          COMMIT;
        UNTIL LabelLedgerEntry.NEXT=0;
      END;
    END;

    PROCEDURE MarkLabels@1102401106(NoLabel@1102401001 : Code[20];SalesDocNo@1102401002 : Code[20]);
    VAR
      LabelsLendgry@1102401003 : Record 50011;
      EntryNo@1102401004 : Integer;
    BEGIN
      EVALUATE(EntryNo,NoLabel);
      LabelLedgerEntry.RESET;
      IF LabelLedgerEntry.GET(EntryNo) THEN BEGIN
          LabelLedgerEntry."Pre Physical Location" := SalesDocNo;
          //MESSAGE(LabelLedgerEntry."Label No");
          LabelLedgerEntry.MODIFY(TRUE);
      END;
    END;

    PROCEDURE ConsultPhysicalInv@1102401117(ItemNo@1102401002 : Code[30];LocationCode@1102401003 : Code[30];BinCode@1102401004 : Code[30]) : Decimal;
    VAR
      WarehouseEntry@1102401001 : Record 7312;
      PhysQuantity@1102401005 : Decimal;
    BEGIN
      PhysQuantity  :=0;
      WarehouseEntry.SETCURRENTKEY("Bin Code","Location Code","Item No.");
      WarehouseEntry.SETRANGE("Bin Code"      ,BinCode);
      WarehouseEntry.SETRANGE("Location Code" ,LocationCode);
      WarehouseEntry.SETRANGE("Item No."      ,ItemNo);
      IF WarehouseEntry.FINDSET THEN BEGIN
        WarehouseEntry.CALCSUMS("Qty. (Base)");
        PhysQuantity:=WarehouseEntry."Qty. (Base)";
      END;
      EXIT(PhysQuantity);
    END;

    PROCEDURE InsertPackingToPrint@1102401119(ItemNo@1102401001 : Code[30]);
    VAR
      PackingCode@1102401002 : Record 50040;
      ProductionBOMHeader@1102401003 : Record 99000771;
      PackingCodeTmp@1102401004 : Record 50040;
      Item@1102401005 : Record 27;
      Cont@1102401006 : Integer;
    BEGIN
      PackingCode.RESET;
      //PackingCode.SETRANGE(UserID,USERID);
      IF PackingCode.FINDSET THEN
        PackingCode.DELETEALL;
      Cont:=1;
      ProductionBOMHeader.RESET;
      ProductionBOMHeader.SETRANGE(Status             ,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.SETRANGE("Item Reference LM",ItemNo);
      IF ProductionBOMHeader.FINDSET THEN BEGIN
        REPEAT
          PackingCodeTmp.RESET;
          PackingCodeTmp.SETRANGE("Item No."      ,ItemNo);
          PackingCodeTmp.SETRANGE("Package Code"  ,ProductionBOMHeader."Part No. Interno Packing");
        //  PackingCodeTmp.SETRANGE(UserID          ,USERID);
          PackingCodeTmp.SETRANGE(Quantity        ,ProductionBOMHeader."Packing Unit");
          IF NOT PackingCodeTmp.FINDSET THEN BEGIN
            Item.GET(ProductionBOMHeader."Part No. Interno Packing");
            PackingCode.INIT;
            PackingCode."Item No."            :=ItemNo;
            PackingCode."Packing Descripcion"           :=Item.Description;
            PackingCode."Unit of Measure Code":=ProductionBOMHeader."Unit of Measure Code";
            PackingCode.Quantity              :=ProductionBOMHeader."Packing Unit";
            PackingCode."Package Code"        :=ProductionBOMHeader."Part No. Interno Packing";
            PackingCode."Starting Date"       :=0D;
            PackingCode.UserID                :=USERID;
            PackingCode."No."                 :=FORMAT(Cont);
            PackingCode.INSERT;
            Cont+=1;
          END;
        UNTIL ProductionBOMHeader.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE ValidaStatusQualityControlLabel@1102401124(LabelNo@1102401001 : Integer) : Integer;
    VAR
      LabelLedgerEntry@1102401002 : Record 50011;
    BEGIN
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(LabelNo);
      IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Bloqueado Calidad" THEN
        EXIT(1);
      IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Liberado Calidad"THEN
        EXIT(2);
      IF LabelLedgerEntry."Quality Control"= LabelLedgerEntry."Quality Control"::"Pendiente Liberacion" THEN
        EXIT(3);

    END;

    LOCAL PROCEDURE GetInfoLastLabelLedgerEntryLiberateLot@1102401125(LabelNo@1102401002 : Integer) : Integer;
    VAR
      LabelLedgerEntryTracking@1102401001 : Record 50064;
    BEGIN
      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.SETRANGE("Entry No. Label" ,LabelNo);
      LabelLedgerEntryTracking.SETFILTER("Source Document",'<>%1','CUARENTENA');
      IF LabelLedgerEntryTracking.FINDLAST THEN
        EXIT(LabelLedgerEntryTracking."Entry No.")
      ELSE
        EXIT(0);
    END;

    PROCEDURE WarehouseReceipt@1102401127(DocNo@1102401001 : Code[30];ItemNo@1102401007 : Code[30];LocationCode@1102401006 : Code[30];BinCode@1102401005 : Code[30];QtyStr@1102401004 : Code[30];LotNo@1102401003 : Code[20];LabelNo@1102401002 : Code[30]) : Boolean;
    VAR
      WarehouseReceiptLine@1102401009 : Record 7317;
      Qty@1102401008 : Decimal;
    BEGIN
      EVALUATE(Qty,QtyStr);
      WarehouseReceiptLine.RESET;
      WarehouseReceiptLine.SETRANGE("No."           ,DocNo);
      WarehouseReceiptLine.SETRANGE("Item No."      ,ItemNo);
      WarehouseReceiptLine.SETRANGE("Location Code" ,LocationCode);
      IF (BinCode <> '') THEN
        WarehouseReceiptLine.SETRANGE("Bin Code"      ,BinCode);
      IF WarehouseReceiptLine.FINDSET THEN BEGIN
        WarehouseReceiptLine.VALIDATE("Qty. to Receive",WarehouseReceiptLine."Qty. to Receive"+Qty);
        WarehouseReceiptLine.MODIFY;
        AssignLotNoWarehouseReceipt(WarehouseReceiptLine,LotNo,Qty);
        UpdateLabelVendorExt(WarehouseReceiptLine,LabelNo);
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE AssignLotNoWarehouseReceipt@1102401126(WarehouseReceiptLine@1102401006 : Record 7317;LotNo@1102401003 : Code[30];Qty@1102401005 : Decimal) : Boolean;
    VAR
      RrsrvEntry@1102401001 : Record 337;
      RrsrvEntry1@1102401004 : Record 337;
      ItmLedgerEntry@1102401002 : Record 32;
      Mov@1102401007 : Integer;
      Item@1102401008 : Record 27;
      TransferLine@1102401009 : Record 5741;
      RrsrvEntry2@1102401010 : Record 337;
      PurchaseLine@1102401011 : Record 39;
    BEGIN
      Item.RESET;
      Item.GET(WarehouseReceiptLine."Item No.");
      IF (Item."Item Tracking Code" <> '') THEN BEGIN
        IF WarehouseReceiptLine."Source Document"=WarehouseReceiptLine."Source Document"::"Purchase Order" THEN BEGIN
          PurchaseLine.RESET;
          PurchaseLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
          PurchaseLine.SETRANGE("Document Type" ,PurchaseLine."Document Type"::Order);
          PurchaseLine.SETRANGE("Document No."  ,WarehouseReceiptLine."Source No.");
          PurchaseLine.SETRANGE(Type            ,PurchaseLine.Type::Item);
          PurchaseLine.SETRANGE("No."           ,WarehouseReceiptLine."Item No.");
          IF PurchaseLine.FINDSET THEN;

          RrsrvEntry.RESET;
          RrsrvEntry.INIT;
          RrsrvEntry."Entry No."                     :=GetLastReservEntry;
          RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Surplus);
          RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"1");
          RrsrvEntry.VALIDATE(Positive               , TRUE);
          RrsrvEntry.VALIDATE("Item No."             , WarehouseReceiptLine."Item No.");
          RrsrvEntry.VALIDATE("Creation Date"        , TODAY);
          RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Purchase Line");
          RrsrvEntry.VALIDATE("Source ID"            , WarehouseReceiptLine."Source No.");
          RrsrvEntry.VALIDATE("Location Code"        , PurchaseLine."Location Code");
          RrsrvEntry."Source Ref. No."               :=WarehouseReceiptLine."Source Line No.";
          RrsrvEntry."Created By"                    :=USERID;

          IF (Item."Item Tracking Code" <> '') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Lot No.");
            RrsrvEntry.VALIDATE("Lot No."             , LotNo);
          END;
          IF (Item."Item Tracking Code" = 'SEGSERIE') THEN BEGIN
            RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Serial No.");
            RrsrvEntry.VALIDATE("Serial No."          , LotNo);
          END;

          RrsrvEntry.INSERT(TRUE);
          RrsrvEntry."Quantity (Base)"               :=Qty;
          RrsrvEntry.VALIDATE("Quantity (Base)");
          RrsrvEntry.MODIFY(TRUE);
        END;

        IF (WarehouseReceiptLine."Source Document" = WarehouseReceiptLine."Source Document"::"Sales Return Order") THEN BEGIN
          TransferLine.RESET;
          TransferLine.SETCURRENTKEY("Item No.");
          TransferLine.SETFILTER("Item No."     ,'=%1',WarehouseReceiptLine."Item No.");
          TransferLine.SETFILTER("Document No." ,'=%1',WarehouseReceiptLine."Source No.");
          TransferLine.FINDSET;

           RrsrvEntry.RESET;
           RrsrvEntry.INIT;
           RrsrvEntry."Entry No."                     :=GetLastReservEntry;
           RrsrvEntry.VALIDATE("Reservation Status"   , RrsrvEntry."Reservation Status"::Surplus);
           RrsrvEntry.VALIDATE("Source Subtype"       , RrsrvEntry."Source Subtype"::"0");
           RrsrvEntry.VALIDATE(Positive               , FALSE);
           RrsrvEntry.VALIDATE("Item No."             , WarehouseReceiptLine."Item No.");
           RrsrvEntry.VALIDATE("Creation Date"        , TODAY);
           RrsrvEntry.VALIDATE("Source Type"          , DATABASE::"Transfer Line");
           RrsrvEntry.VALIDATE("Source ID"            , WarehouseReceiptLine."Source No.");
           RrsrvEntry."Source Ref. No."               :=WarehouseReceiptLine."Source Line No.";
           RrsrvEntry."Created By"                    :=USERID;
           RrsrvEntry.VALIDATE("Location Code"        , TransferLine."Transfer-from Code");
           IF (Item."Item Tracking Code" <> '') THEN BEGIN
             RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Lot No.");
             RrsrvEntry.VALIDATE("Lot No."             , LotNo);
           END;
           IF (Item."Item Tracking Code" = 'SEGSERIE') THEN BEGIN
             RrsrvEntry.VALIDATE("Item Tracking"       , RrsrvEntry."Item Tracking"::"Serial No.");
             RrsrvEntry.VALIDATE("Serial No."          , LotNo);
           END;

           RrsrvEntry.VALIDATE("Shipment Date",TransferLine."Shipment Date");
           RrsrvEntry.INSERT(TRUE);
           RrsrvEntry."Quantity (Base)"               :=-Qty;
           RrsrvEntry.VALIDATE("Quantity (Base)");
           RrsrvEntry.MODIFY(TRUE);

           //>>
           RrsrvEntry2.RESET;
           RrsrvEntry2.INIT;
           RrsrvEntry2."Entry No."                     :=GetLastReservEntry;
           RrsrvEntry2.VALIDATE("Reservation Status"   , RrsrvEntry2."Reservation Status"::Surplus);
           RrsrvEntry2.VALIDATE("Source Subtype"       , RrsrvEntry2."Source Subtype"::"1");
           RrsrvEntry2.VALIDATE(Positive               , TRUE);
           RrsrvEntry2.VALIDATE("Item No."             , WarehouseReceiptLine."Item No.");
           RrsrvEntry2.VALIDATE("Creation Date"        , TODAY);
           RrsrvEntry2.VALIDATE("Source Type"          , DATABASE::"Transfer Line");
           RrsrvEntry2.VALIDATE("Source ID"            , WarehouseReceiptLine."Source No.");
           RrsrvEntry2.VALIDATE("Location Code"        , TransferLine."Transfer-to Code");
           RrsrvEntry2."Source Ref. No."               :=WarehouseReceiptLine."Line No.";
           RrsrvEntry2."Created By"                    :=USERID;

           IF (Item."Item Tracking Code" <> '') THEN BEGIN
             RrsrvEntry2.VALIDATE("Item Tracking"       , RrsrvEntry2."Item Tracking"::"Lot No.");
             RrsrvEntry2.VALIDATE("Lot No."             , LotNo);
           END;
           IF (Item."Item Tracking Code" = 'SERIE') THEN BEGIN
             RrsrvEntry2.VALIDATE("Item Tracking"       , RrsrvEntry2."Item Tracking"::"Serial No.");
             RrsrvEntry2.VALIDATE("Serial No."          , LotNo);
           END;
           RrsrvEntry2.VALIDATE("Expected Receipt Date", TransferLine."Receipt Date");
           RrsrvEntry2.INSERT(TRUE);
           RrsrvEntry2."Quantity (Base)"               :=Qty;
           RrsrvEntry2.VALIDATE("Quantity (Base)");
           RrsrvEntry2.MODIFY(TRUE);
        END;

      END;
    END;

    PROCEDURE GetInfoReceipt@1102401134(DocNo@1102401007 : Code[30];ItemNo@1102401006 : Code[30];VAR LocationCode@1102401005 : Code[30];VAR BinCode@1102401004 : Code[30]);
    VAR
      WarehouseReceiptLine@1102401001 : Record 7317;
    BEGIN
      CLEAR(LocationCode);
      CLEAR(BinCode);
      WarehouseReceiptLine.RESET;
      WarehouseReceiptLine.SETRANGE("No."           ,DocNo);
      WarehouseReceiptLine.SETRANGE("Item No."      ,ItemNo);
      IF WarehouseReceiptLine.FINDSET THEN BEGIN
        LocationCode:=WarehouseReceiptLine."Location Code";
        BinCode :=WarehouseReceiptLine."Bin Code";
      END;
    END;

    PROCEDURE ValidateExistWhouseShip@1102401140(ShipmentNo@1102401001 : Code[30]) : Boolean;
    VAR
      WarehouseShipmentHeader@1102401002 : Record 7320;
    BEGIN
      WarehouseShipmentHeader.RESET;
      WarehouseShipmentHeader.SETRANGE("No.",ShipmentNo);
      IF WarehouseShipmentHeader.FINDSET THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ValidateExistWhouseReceipt@1102401139(ReceiptNo@1102401002 : Code[30]) : Boolean;
    VAR
      WarehouseReceiptHeader@1102401001 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.RESET;
      WarehouseReceiptHeader.SETRANGE("No.",ReceiptNo);
      IF WarehouseReceiptHeader.FINDSET THEN
        EXIT(TRUE)
      ELSE
        ERROR('No Existe la Recepcion %1',ReceiptNo);
    END;

    PROCEDURE PostingWarehouseShip@1102401138(DocumentNo@1102401001 : Code[30]) : Boolean;
    VAR
      WarehouseShipmentLine2@1102401003 : Record 7321;
      WhseShptLine@1102401004 : Record 7321;
      WhsePostShipment@1102401002 : Codeunit 5763;
    BEGIN
      //>>registra envio almacen
      ManufacturingSetup.GET;
      IF ManufacturingSetup."Posting Ship Auto." THEN BEGIN
        WarehouseShipmentLine2.RESET;
        WarehouseShipmentLine2.SETFILTER("No.",'=%1',DocumentNo);
        IF WarehouseShipmentLine2.FINDSET THEN BEGIN
          WhseShptLine.COPY(WarehouseShipmentLine2);
          WhsePostShipment.RUN(WhseShptLine);
          COMMIT;
          //>>limpia cantidades a enviar
          DeleteQtyToWarehouseShip(DocumentNo);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE PostingWarehouseReceipt@1102401137(DocumentNo@1102401001 : Code[30]) : Boolean;
    VAR
      WarehouseReceiptLine@1102401003 : Record 7317;
      WarehReceiptLine@1102401004 : Record 7317;
      WhsePostReceipt@1102401002 : Codeunit 5760;
    BEGIN
      //>>registra Recepcion Compra

      ManufacturingSetup.GET('');
      IF ManufacturingSetup."Posting Receipt Auto." THEN BEGIN
        WarehouseReceiptLine.RESET;
        WarehouseReceiptLine.SETFILTER("No.",'=%1',DocumentNo);
        IF WarehouseReceiptLine.FINDSET THEN BEGIN
          WarehReceiptLine.COPY(WarehouseReceiptLine);
          WhsePostReceipt.RUN(WarehReceiptLine);
          COMMIT;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE PostingOrderTransfer@1102401136(DocumentNo@1102401001 : Code[30];Ship@1102401005 : Boolean;Receipt@1102401006 : Boolean) : Boolean;
    VAR
      TransHeader@1102401007 : Record 5740;
      TransferPostShipment@1102401003 : Codeunit 5704;
      TransferPostReceipt@1102401002 : Codeunit 5705;
    BEGIN
      //>>registra Pedido Transferencia
      ManufacturingSetup.GET('');
      IF ManufacturingSetup."Posting Transfer Order Auto" THEN BEGIN
        TransHeader.RESET;
        TransHeader.SETRANGE("No.",DocumentNo);
        TransHeader.FINDSET;
        IF Ship THEN
          TransferPostShipment.RUN(TransHeader);
        IF Receipt THEN
          TransferPostReceipt.RUN(TransHeader);
      END;
    END;

    PROCEDURE DeleteQtyToWarehouseShip@1102401128(DocNoShip@1102401002 : Code[30]) : Boolean;
    VAR
      WarehouseShipmentLine@1102401001 : Record 7321;
      WhseShptLine@1102401003 : Record 7321;
      ReservationEntry@1102401004 : Record 337;
    BEGIN
      WhseShptLine.RESET;
      WhseShptLine.SETRANGE("No.",DocNoShip);
      IF WhseShptLine.FINDSET THEN BEGIN
        REPEAT
          {
          ReservationEntry.RESET;
          ReservationEntry.SETFILTER("Source ID",'=%1',WhseShptLine."Source No.");
          IF ReservationEntry.FINDSET THEN
            ReservationEntry.DELETEALL;
            }
          WhseShptLine.VALIDATE("Qty. to Ship",0);
          WhseShptLine.MODIFY;
        UNTIL WhseShptLine.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE DeleteQtyToWarehouseReceipt@1102401111(DocNoReceipt@1102401002 : Code[30]) : Boolean;
    VAR
      WarehouseReceiptLine@1102401001 : Record 7317;
      WarehouseRecLine@1102401003 : Record 7317;
      ReservationEntry@1102401004 : Record 337;
    BEGIN
      WarehouseReceiptLine.RESET;
      WarehouseReceiptLine.SETRANGE("No.",DocNoReceipt);
      IF WarehouseReceiptLine.FINDSET THEN BEGIN
        REPEAT
          WarehouseReceiptLine.VALIDATE("Qty. to Receive",0);
          WarehouseReceiptLine.MODIFY;
        UNTIL WarehouseReceiptLine.NEXT=0;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE UpdateLabelVendorExt@1102401130(WarehouseReceiptLine@1102401001 : Record 7317;LabelNoStr@1102401002 : Code[30]);
    VAR
      LabelNo@1102401003 : Integer;
    BEGIN
      EVALUATE(LabelNo,LabelNoStr);
      LabelLedgerEntry.RESET;
      LabelLedgerEntry.GET(LabelNo);

      LabelLedgerEntry."Document No." :=WarehouseReceiptLine."No.";
      LabelLedgerEntry."Document Line No." := WarehouseReceiptLine."Line No.";
      LabelLedgerEntry.MODIFY;
    END;

    PROCEDURE GetLastLabelLedgerEntry@1102401133(LabelNoStr@1102401001 : Code[30];VAR LocationCodeDest@1102401002 : Code[30];VAR BinCodeDest@1102401003 : Code[30];VAR PhysicalLocation@1102401004 : Code[50]);
    VAR
      LabelNo@1102401005 : Integer;
      LastEntry@1102401006 : Integer;
      LabelLedgerEntryTracking@1102401007 : Record 50064;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.TESTFIELD("Loc. Quality Release Default");
      ManufacturingSetup.TESTFIELD("Bin Quality Release Default");
      ManufacturingSetup.TESTFIELD("Location Physical Release Def");

      CLEAR(LocationCodeDest);
      CLEAR(BinCodeDest);
      CLEAR(PhysicalLocation);

      //obtiene ultima ubicacion
      EVALUATE(LabelNo,LabelNoStr);
      LastEntry:=GetInfoLastLabelLedgerEntryLiberateLot(LabelNo);
      IF (LastEntry <> 0) THEN BEGIN
       LabelLedgerEntryTracking.GET(LastEntry);
        LocationCodeDest  := LabelLedgerEntryTracking."Location Code";
        BinCodeDest       := LabelLedgerEntryTracking."Bin Code";
        PhysicalLocation  := LabelLedgerEntryTracking."Physical Location";
      END;

      IF (LocationCodeDest ='') THEN
        LocationCodeDest  :=ManufacturingSetup."Loc. Quality Release Default";

      IF (BinCodeDest ='') THEN
        BinCodeDest       :=ManufacturingSetup."Bin Quality Release Default";

      IF (PhysicalLocation= '') THEN
        PhysicalLocation  :=ManufacturingSetup."Location Physical Release Def";
    END;

    LOCAL PROCEDURE CargaOpActual@1102401131();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateStatusLabelInventory@1102401132(PreScannedInventory@1102401002 : Record 50066);
    VAR
      LabelLedgerEntry@1102401001 : Record 50011;
      LotRelationed@1102401005 : Record 50065;
      PreStatus@1102401003 : Integer;
      LabelLedgerEntry2@1102401004 : Record 50011;
    BEGIN
      ManufacturingSetup.GET('');
      ManufacturingSetup.TESTFIELD("Journal Template Name Stock");
      ManufacturingSetup.TESTFIELD("Journal Batch Name Stock");
      LibroInvFis     :=  ManufacturingSetup."Journal Template Name Stock";
      SeccionInvFis   :=  ManufacturingSetup."Journal Batch Name Stock";

      //limpia todos los asignados previos
      LabelLedgerEntry2.RESET;
      LabelLedgerEntry2.SETRANGE("Journal Batch Name",SeccionInvFis);
      LabelLedgerEntry2.SETRANGE("Journal Template Name",LibroInvFis);
      IF LabelLedgerEntry2.FINDSET THEN BEGIN
        REPEAT
        LabelLedgerEntry2."Journal Batch Name"    :='';
        LabelLedgerEntry2."Journal Template Name" :='';
        UNTIL LabelLedgerEntry2.NEXT=0;
      END;

      LotRelationed.RESET;
      LotRelationed.SETRANGE("Inventory Code" ,PreScannedInventory."Inventory Code");
      LotRelationed.SETRANGE("Item No."       ,PreScannedInventory."Item No");
      LotRelationed.SETRANGE("Location Code"  ,PreScannedInventory."Cod. Location");
      LotRelationed.SETRANGE("Bin Code"       ,PreScannedInventory."Bin Code");
      IF LotRelationed.FINDSET THEN BEGIN
        REPEAT
          IF LotRelationed."Calculated Quantity" <= LotRelationed."Qty Physical" THEN
            PreStatus :=1 // ajust pos
          ELSE
            PreStatus :=0;      //ajust neg

          LabelLedgerEntry.RESET;
          LabelLedgerEntry.SETCURRENTKEY("Source No.","Lot. No");
          LabelLedgerEntry.SETRANGE("Source No.",LotRelationed."Item No.");
          LabelLedgerEntry.SETRANGE("Lot. No"   ,LotRelationed."Lot. No.");
          IF LabelLedgerEntry.FINDSET THEN BEGIN
            REPEAT
              IF (PreStatus = 1) THEN BEGIN  //ajuste positivo
                LabelLedgerEntry."Pre-Label Status" := LabelLedgerEntry."Pre-Label Status"::Almacen;
                LabelLedgerEntry."Pre Remaining Quantity"  := LabelLedgerEntry."Pre Remaining Quantity";
              END;

              IF (PreStatus = 0) THEN BEGIN //ajuste negativo
                LabelLedgerEntry."Pre-Label Status" := LabelLedgerEntry."Pre-Label Status"::Terminada;
                LabelLedgerEntry."Pre Remaining Quantity" := 0;
              END;
              LabelLedgerEntry."Journal Template Name" :=LibroInvFis;
              LabelLedgerEntry."Journal Batch Name" :=SeccionInvFis;
              LabelLedgerEntry.MODIFY;
            UNTIL LabelLedgerEntry.NEXT=0;
          END;
        UNTIL LotRelationed.NEXT=0;
      END;
    END;

    PROCEDURE CheckPackingOP@1102401135(PackingCode@1102401001 : Code[30];ProdOrder@1102401002 : Code[30]) : Boolean;
    VAR
      ProductionOrder@1102401003 : Record 5405;
      ProdOrderComponent@1102401004 : Record 5407;
    BEGIN
      ProductionOrder.RESET;
      ProductionOrder.SETCURRENTKEY(Status,"No.");
      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrder);

      IF ProductionOrder."Order Production Type" = ProductionOrder."Order Production Type"::Produccion THEN
        EXIT(TRUE);

      ProdOrderComponent.RESET;
      ProdOrderComponent.SETRANGE(Status            ,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No." ,ProductionOrder."No.");
      ProdOrderComponent.SETRANGE("Item No."        ,PackingCode);
      IF ProdOrderComponent.FINDSET THEN BEGIN
       EXIT(TRUE);
      END
      ELSE BEGIN
        EXIT(FALSE);
      END;
    END;

    PROCEDURE UpdateSegPostingEmb@1102401141(AudEmbNo@1102401001 : Code[50];StatusEmb@1102401005 : 'Open,Released');
    VAR
      AuditShipmentHeader@1102401002 : Record 50062;
      AuditShipmentLines@1102401003 : Record 50063;
      AuditShipmentLinesDetall@1102401004 : Record 50067;
      LabelLedgerEntryTracking@1102401006 : Record 50064;
    BEGIN
      AuditShipmentHeader.RESET;
      AuditShipmentHeader.GET(AudEmbNo);

      IF StatusEmb = StatusEmb::Open THEN BEGIN

      END;

      IF StatusEmb = StatusEmb::Released THEN BEGIN
        AuditShipmentLinesDetall.RESET;
        AuditShipmentLinesDetall.SETRANGE("Document No. Ref",AuditShipmentHeader."No.");
        IF AuditShipmentLinesDetall.FINDSET THEN BEGIN
          REPEAT
            LabelLedgerEntryTracking.RESET;
            //IF LabelLedgerEntryTracking.GET(AuditShipmentLinesDetall ."Seg. Posting") THEN BEGIN




          UNTIL AuditShipmentLinesDetall.NEXT=0;
        END;



      END;
    END;

    PROCEDURE GetScrapJournal@1102401142(LabelNoStr@1102401001 : Code[30];VAR LocationCodeDest@1102401002 : Code[30];VAR BinCodeDest@1102401003 : Code[30];VAR PhysicalLocation@1102401004 : Code[50]);
    VAR
      LabelNo@1102401005 : Integer;
      LastEntry@1102401006 : Integer;
      LabelLedgerEntryTracking@1102401007 : Record 50064;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.TESTFIELD("Scrap Bin Code");
      ManufacturingSetup.TESTFIELD("Scrap Location Code");
      ManufacturingSetup.TESTFIELD("Scrap Journal Template Name");
      ManufacturingSetup.TESTFIELD("Scrap Journal Batch Name");

      CLEAR(LocationCodeDest);
      CLEAR(BinCodeDest);
      CLEAR(PhysicalLocation);
      LocationCodeDest  :=ManufacturingSetup."Scrap Location Code";
      BinCodeDest       :=ManufacturingSetup."Scrap Bin Code";
      PhysicalLocation  :='';
    END;

    PROCEDURE GetOPInfo@1102401098(ProdOrder@1102401001 : Code[50];VAR SourceCode@1102401002 : Code[50];VAR Description@1102401003 : Text[100]);
    VAR
      ProductionOrder@1102401004 : Record 5405;
    BEGIN
      SourceCode:='';
      Description :='';
      ProductionOrder.RESET;
      ProductionOrder.SETFILTER(Status,'=%1|=%2|=%3|=%4',ProductionOrder.Status::Simulated,ProductionOrder.Status::Planned,ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);
      ProductionOrder.SETFILTER("No.",ProdOrder);
      IF ProductionOrder.FINDSET THEN BEGIN
        SourceCode := ProductionOrder."Source No.";
        Description:= ProductionOrder.Description;
      END;
    END;

    LOCAL PROCEDURE UpdateStatusLabel060@1102401148();
    VAR
      Query1@1102401001 : Query 7300;
      LabelLedgerEntry@1102401002 : Record 50011;
      CodAlm@1102401003 : Code[30];
      CodUbi@1102401004 : Code[30];
      ItemNo@1102401005 : Code[30];
      LotNo@1102401006 : Code[30];
    BEGIN
      CodAlm:='060';
      CodUbi:='CUARENTENA';
      ItemNo :='2GANUS022RM5';
      //LotNo := '21E19307U091976009';
      Query1.SETRANGE(Item_No       ,ItemNo);
      Query1.SETRANGE(Location_Code ,CodAlm);
      Query1.SETRANGE(Bin_Code      ,CodUbi);
      //Query1.SETRANGE(Lot_No,LotNo);
      Query1.OPEN;
      WHILE Query1.READ DO BEGIN
        IF Query1.Sum_Qty_Base <> 0 THEN BEGIN
          LabelLedgerEntry.RESET;
          LabelLedgerEntry.SETRANGE("Source No."  ,Query1.Item_No);
          LabelLedgerEntry.SETRANGE("Lot. No"     ,Query1.Lot_No);
          IF LabelLedgerEntry.FINDSET THEN BEGIN
            LabelLedgerEntry."Label Status":= LabelLedgerEntry."Label Status"::Almacen;
            LabelLedgerEntry."Quality Control" := LabelLedgerEntry."Quality Control"::"Bloqueado Calidad";
            LabelLedgerEntry.MODIFY;
          END;
        END;
      END;
      Query1.CLOSE;
    END;

    PROCEDURE GetInfoLastLabelLedgerConsumo@1102401152(LabelNo@1102401002 : Integer;VAR LocationLast@1102401003 : Code[30];VAR BinCodeLast@1102401004 : Code[30];VAR BinPhysicalLast@1102401005 : Text[100]) : Integer;
    VAR
      LabelLedgerEntryTracking@1102401001 : Record 50064;
    BEGIN
      CLEAR(LocationLast);
      CLEAR(BinCodeLast);
      CLEAR(BinPhysicalLast);

      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.SETCURRENTKEY("Entry No. Label");
      LabelLedgerEntryTracking.SETRANGE("Entry No. Label" ,LabelNo);
      LabelLedgerEntryTracking.SETFILTER("Source Document",'=%1','CONSUMO');
      IF LabelLedgerEntryTracking.FINDLAST THEN BEGIN
        LocationLast:= LabelLedgerEntryTracking."Location Code";
        BinCodeLast:=LabelLedgerEntryTracking."Bin Code";
        BinPhysicalLast:=LabelLedgerEntryTracking."Physical Location";
      END
      ELSE BEGIN
      LocationLast:='';
        BinCodeLast:='';
        BinPhysicalLast:='';
      END;
    END;

    LOCAL PROCEDURE GetInfoLastLabelLedgerEntryLiberateLotCuarentena@1102401151(LabelNo@1102401002 : Integer) : Integer;
    VAR
      LabelLedgerEntryTracking@1102401001 : Record 50064;
    BEGIN
      LabelLedgerEntryTracking.RESET;
      LabelLedgerEntryTracking.SETRANGE("Entry No. Label" ,LabelNo);
      //LabelLedgerEntryTracking.SETFILTER("Source Document",'<>%1','CUARENTENA');
      IF LabelLedgerEntryTracking.FINDLAST THEN
        EXIT(LabelLedgerEntryTracking."Entry No.")
      ELSE
        EXIT(0);
    END;

    PROCEDURE GetLastLabelLedgerEntry2@1102401154(LabelNoStr@1102401001 : Code[30];VAR LocationCodeDest@1102401002 : Code[30];VAR BinCodeDest@1102401003 : Code[30];VAR PhysicalLocation@1102401004 : Code[50]);
    VAR
      LabelNo@1102401005 : Integer;
      LastEntry@1102401006 : Integer;
      LabelLedgerEntryTracking@1102401007 : Record 50064;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.TESTFIELD("Loc. Quality Release Default");
      ManufacturingSetup.TESTFIELD("Bin Quality Release Default");
      ManufacturingSetup.TESTFIELD("Location Physical Release Def");

      CLEAR(LocationCodeDest);
      CLEAR(BinCodeDest);
      CLEAR(PhysicalLocation);

      //obtiene ultima ubicacion
      EVALUATE(LabelNo,LabelNoStr);
      LastEntry:=GetInfoLastLabelLedgerEntryLiberateLotCuarentena(LabelNo);
      IF (LastEntry <> 0) THEN BEGIN
       LabelLedgerEntryTracking.GET(LastEntry);
        LocationCodeDest  := LabelLedgerEntryTracking."Location Code";
        BinCodeDest       := LabelLedgerEntryTracking."Bin Code";
        PhysicalLocation  := LabelLedgerEntryTracking."Physical Location";
      END;

      IF (LocationCodeDest ='') THEN
        LocationCodeDest  :=ManufacturingSetup."Loc. Quality Release Default";

      IF (BinCodeDest ='') THEN
        BinCodeDest       :=ManufacturingSetup."Bin Quality Release Default";

      IF (PhysicalLocation= '') THEN
        PhysicalLocation  :=ManufacturingSetup."Location Physical Release Def";
    END;

    LOCAL PROCEDURE ValidarMaxSeriesHella@1102401155(DocNo@1102401001 : Code[20];ItemNo@1102401002 : Code[20];CustNo@1102401006 : Code[20];MaxSeries@1102401008 : Integer);
    VAR
      AuditShipmentLines@1102401003 : Record 50063;
      AuditShipmDetail@1102401004 : Record 50067;
      AuditShipmentHeader@1102401005 : Record 50062;
      Contador@1102401007 : Integer;
    BEGIN
      //JHR
      CLEAR(Contador);
      AuditShipmentLines.RESET;
      AuditShipmentLines.SETCURRENTKEY("Document No.","Line No.");
      AuditShipmentLines.SETRANGE("Document No."  , DocNo);
      AuditShipmentLines.SETRANGE("Customer No."  , CustNo);
      AuditShipmentLines.SETFILTER("No."          , '=%1',ItemNo);
      IF AuditShipmentLines.FINDSET THEN BEGIN
        AuditShipmDetail.RESET;
        AuditShipmDetail.SETCURRENTKEY("Document No. Ref","Line No. Ref","Line No.");
        AuditShipmDetail.SETRANGE("Document No. Ref", DocNo);
        AuditShipmDetail.SETRANGE("Line No. Ref", AuditShipmentLines."Line No.");
        AuditShipmDetail.SETRANGE("No.", ItemNo);
        IF AuditShipmDetail.FINDSET THEN BEGIN
            Contador:=   AuditShipmDetail.COUNT;
             IF Contador > MaxSeries THEN
               ERROR('Supero el numero maximo de series ('+ FORMAT(MaxSeries) +') posibles para Hella!!');
        END;
      END;
    END;

    LOCAL PROCEDURE ValidarMaxSeriesHellaDiarConsig@1102401156();
    VAR
      AuditShipmentHeader@1102401001 : Record 50062;
      AuditShipmentLine@1102401002 : Record 50063;
      ContadorSeries@1102401003 : Integer;
      Filtro@1102401004 : Text;
      Longitud@1102401005 : Integer;
      NoProd@1102401006 : Code[20];
      Customer@1102401007 : Record 18;
    BEGIN
      //JHR
      CLEAR(Longitud);
      CLEAR(Filtro);
      CLEAR(NoProd);
      CLEAR(ContadorSeries);
      AuditShipmentHeader.RESET;
      AuditShipmentHeader.SETFILTER("Selec. Aud. Ship",'=%1',TRUE);
      AuditShipmentHeader.SETFILTER("Sended to Journal Consign",'=%1',FALSE);
      IF AuditShipmentHeader.FINDSET THEN BEGIN
        Customer.RESET;
        Customer.GET(AuditShipmentHeader."Customer No.");
        IF Customer."ASN type" = Customer."ASN type"::Hella THEN BEGIN
           REPEAT
              Filtro += AuditShipmentHeader."No." +'|';
           UNTIL AuditShipmentHeader.NEXT()=0;

            Longitud := STRLEN(Filtro);
            Filtro := COPYSTR(Filtro, 1, Longitud - 1);

            AuditShipmentLine.RESET;
            AuditShipmentLine.SETVIEW('sorting ("No.") order(descending)');
            AuditShipmentLine.SETFILTER("Document No.", Filtro);
            IF AuditShipmentLine.FINDSET THEN BEGIN
              REPEAT
                AuditShipmentLine.CALCFIELDS("Total Series Detalle");
                  IF NoProd = AuditShipmentLine."No." THEN BEGIN
                    ContadorSeries += AuditShipmentLine."Total Series Detalle";
                    IF ContadorSeries > Customer."No. Max Series Hella" THEN
                      ERROR('Supero el numero maximo de series permitidas (%1) de ('+ FORMAT(Customer."No. Max Series Hella") +') del producto %2  para Hella acomuladas hasta la auditoria %3 !!', ContadorSeries, NoProd, AuditShipmentLine."Document No.");
                  END ELSE BEGIN
                    CLEAR(ContadorSeries);
                     ContadorSeries := AuditShipmentLine."Total Series Detalle";
                    END;
                   NoProd :=  AuditShipmentLine."No.";
              UNTIL AuditShipmentLine.NEXT()=0;
              END;
        END;

      END;
    END;

    BEGIN
    END.
  }
}

